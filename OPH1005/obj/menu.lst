   1                             		.file	"menu.c"
   2                             		.section P,"ax"
   3                             	.Ltext0:
   4                             		.local	_menu_layers
   5                             		.comm	_menu_layers,40,4
   7                             	_GetMaxCharsXPos:
   8                             	.LFB0:
   9                             		.file 1 "SOURCES/menu.c"
   1:SOURCES/menu.c **** //
   2:SOURCES/menu.c **** // menu.c
   3:SOURCES/menu.c **** // implementation of the menu functions
   4:SOURCES/menu.c **** //
   5:SOURCES/menu.c **** // Martin Jansen
   6:SOURCES/menu.c **** //
   7:SOURCES/menu.c **** // The ShowTextMenu menu is based on xmenu by Simon Brouwer
   8:SOURCES/menu.c **** // The ShowTextSelectionMenu is based on selmenu by Oscar Jacobse
   9:SOURCES/menu.c **** //
  10:SOURCES/menu.c **** // For questions:
  11:SOURCES/menu.c **** // email:	support@opticon.com
  12:SOURCES/menu.c **** // web:		www.opticon.com
  13:SOURCES/menu.c **** //
  14:SOURCES/menu.c **** // 23/06/2005:	Added the graphical menu items, Functions InitGraphMenu,
  15:SOURCES/menu.c **** //				ShowGraphMenu and ShowGraphSelection menu are added.
  16:SOURCES/menu.c **** // 				Changed the defined OPTION values from format
  17:SOURCES/menu.c **** //				TXT_MENU_XXXXX to MENU_XXXXX. The stxtSelMenu structure
  18:SOURCES/menu.c **** //				name is changed to sSelMenu because it is also used by the
  19:SOURCES/menu.c **** //				graphical selection menu.
  20:SOURCES/menu.c **** //
  21:SOURCES/menu.c **** // 23/11/2005:	Fixed a multiple selection problem when return -1L value had also an *
  22:SOURCES/menu.c **** //				selection sign.
  23:SOURCES/menu.c **** //
  24:SOURCES/menu.c **** // 19/06/2006:	In display_progress_bar() the static nGap variable was not initialized
  25:SOURCES/menu.c **** //
  26:SOURCES/menu.c **** 
  27:SOURCES/menu.c **** #include <stdio.h>
  28:SOURCES/menu.c **** #include <stdlib.h>
  29:SOURCES/menu.c **** #include <string.h>
  30:SOURCES/menu.c **** #include "lib.h"
  31:SOURCES/menu.c **** #include "input.h"
  32:SOURCES/menu.c **** #include "menu.h"
  33:SOURCES/menu.c **** 
  34:SOURCES/menu.c **** 
  35:SOURCES/menu.c **** #if OPH1005
  36:SOURCES/menu.c **** extern const unsigned char _vga_15_32[];
  37:SOURCES/menu.c **** extern const unsigned char _exit_pic[];
  38:SOURCES/menu.c **** extern const unsigned char _checked[];
  39:SOURCES/menu.c **** extern const unsigned char _uncheck[];
  40:SOURCES/menu.c **** #endif
  41:SOURCES/menu.c **** 
  42:SOURCES/menu.c **** 
  43:SOURCES/menu.c **** #ifndef DISP_WIDTH
  44:SOURCES/menu.c **** #if PHL
  45:SOURCES/menu.c **** 	// PHL1700-10 and PHL1700-20
  46:SOURCES/menu.c **** 	#define DISP_WIDTH  96
  47:SOURCES/menu.c ****     #define DISP_HEIGHT 48
  48:SOURCES/menu.c **** #elif PHL1000
  49:SOURCES/menu.c **** 	// PHL1300
  50:SOURCES/menu.c **** 	#define DISP_WIDTH  96
  51:SOURCES/menu.c **** 	// Change height to 48 when indicators need to be on (see cursor() function)
  52:SOURCES/menu.c ****     #define DISP_HEIGHT 64
  53:SOURCES/menu.c **** #elif PHL2700
  54:SOURCES/menu.c **** 	// PHL2700
  55:SOURCES/menu.c **** 	#define DISP_WIDTH  128
  56:SOURCES/menu.c ****     #define DISP_HEIGHT 64
  57:SOURCES/menu.c **** #elif OPH
  58:SOURCES/menu.c **** 	// OPH-1000 series
  59:SOURCES/menu.c **** 	#define DISP_WIDTH  112
  60:SOURCES/menu.c **** 	#define DISP_HEIGHT 128
  61:SOURCES/menu.c **** #elif OPH1004
  62:SOURCES/menu.c **** 	#define DISP_WIDTH	128
  63:SOURCES/menu.c **** 	#define DISP_HEIGHT	128
  64:SOURCES/menu.c **** #elif OPH1005
  65:SOURCES/menu.c **** 		// OPH1005
  66:SOURCES/menu.c **** 	#define DISP_WIDTH  240
  67:SOURCES/menu.c **** 	#define DISP_HEIGHT	320
  68:SOURCES/menu.c **** #else
  69:SOURCES/menu.c **** 	// OPL972X series
  70:SOURCES/menu.c **** 	#define DISP_WIDTH  112
  71:SOURCES/menu.c ****     #define DISP_HEIGHT 64
  72:SOURCES/menu.c **** #endif
  73:SOURCES/menu.c **** #endif
  74:SOURCES/menu.c **** 
  75:SOURCES/menu.c **** #define DISP_YSTART	10		// drawing the line progressbar graphical menu
  76:SOURCES/menu.c **** //
  77:SOURCES/menu.c **** // A few macros for getting the options values
  78:SOURCES/menu.c **** //
  79:SOURCES/menu.c **** #define SHOWHEADER( x )((int)(x!=NULL))
  80:SOURCES/menu.c **** #define DOLOOP(x)((unsigned long)(x&MENU_LOOP))
  81:SOURCES/menu.c **** #define MULTIPLE_SELECT(x)((unsigned long)(x&MENU_MULTIPLE))
  82:SOURCES/menu.c **** #define RETURN_SINGLE_SELECT(x)((unsigned long)((x&MENU_RET_SEL) && !MULTIPLE_SELECT(x)))
  83:SOURCES/menu.c **** 
  84:SOURCES/menu.c **** // ===== GLOBALS =====
  85:SOURCES/menu.c **** static int menu_layers[ MAX_LAYERS ];	// layer array for the graphical menu
  86:SOURCES/menu.c **** 
  87:SOURCES/menu.c **** // ===== IMPLEMENTATION =====
  88:SOURCES/menu.c **** 
  89:SOURCES/menu.c **** static int GetMaxCharsXPos( void )
  90:SOURCES/menu.c **** {
  10                             		.loc 1 90 0
  11 0000 6E 6B                   		pushm	r6-r11
  12                             	.LCFI0:
  13 0002 71 06 F8                		add	#-8, r0, r6
  14                             	.LCFI1:
  15 0005 EF 60                   		mov.L	r6, r0
  16                             	.LCFI2:
  91:SOURCES/menu.c **** 	unsigned int nHeight, nWidth;
  92:SOURCES/menu.c **** 	nHeight = nWidth = 0; // prevent warning toshiba compiler
  17                             		.loc 1 92 0
  18 0007 3E 61 00                		mov.L	#0, 4[r6]
  19 000a ED 6A 01                		mov.L	4[r6], r10
  20 000d E3 6A                   		mov.L	r10, [r6]
  93:SOURCES/menu.c **** 	getfontsize( &nHeight, &nWidth);
  21                             		.loc 1 93 0
  22 000f 71 6A 04                		add	#4, r6, r10
  23 0012 EF 61                   		mov.L	r6, r1
  24 0014 EF A2                   		mov.L	r10, r2
  25 0016 05 00 00 00             		bsr	_getfontsize
  94:SOURCES/menu.c **** 
  95:SOURCES/menu.c **** 	return (DISP_WIDTH / nWidth);
  26                             		.loc 1 95 0
  27 001a ED 6A 01                		mov.L	4[r6], r10
  28 001d 75 4B F0                		mov.L	#0xf0, r11
  29 0020 EF B7                   		mov.L	r11, r7
  30 0022 FC 27 A7                		divu	r10, r7
  31 0025 EF 7A                   		mov.L	r7, r10
  96:SOURCES/menu.c **** }
  32                             		.loc 1 96 0
  33 0027 EF A1                   		mov.L	r10, r1
  34 0029 3F 6B 08                		rtsd	#32, r6-r11
  35                             	.LFE0:
  38                             	_GetMaxYLines:
  39                             	.LFB1:
  97:SOURCES/menu.c **** 
  98:SOURCES/menu.c **** static int GetMaxYLines( void )
  99:SOURCES/menu.c **** {
  40                             		.loc 1 99 0
  41 002c 6E 6B                   		pushm	r6-r11
  42                             	.LCFI3:
  43 002e 71 06 F8                		add	#-8, r0, r6
  44                             	.LCFI4:
  45 0031 EF 60                   		mov.L	r6, r0
  46                             	.LCFI5:
 100:SOURCES/menu.c **** 	unsigned int nHeight, nWidth;
 101:SOURCES/menu.c **** 	nHeight = nWidth = 0; // prevent warning toshiba compiler
  47                             		.loc 1 101 0
  48 0033 3E 61 00                		mov.L	#0, 4[r6]
  49 0036 ED 6A 01                		mov.L	4[r6], r10
  50 0039 E3 6A                   		mov.L	r10, [r6]
 102:SOURCES/menu.c **** 	getfontsize( &nHeight, &nWidth);
  51                             		.loc 1 102 0
  52 003b 71 6A 04                		add	#4, r6, r10
  53 003e EF 61                   		mov.L	r6, r1
  54 0040 EF A2                   		mov.L	r10, r2
  55 0042 05 00 00 00             		bsr	_getfontsize
 103:SOURCES/menu.c **** 
 104:SOURCES/menu.c **** 	return (DISP_HEIGHT / nHeight);
  56                             		.loc 1 104 0
  57 0046 EC 6A                   		mov.L	[r6], r10
  58 0048 FB BA 40 01             		mov.L	#0x140, r11
  59 004c EF B7                   		mov.L	r11, r7
  60 004e FC 27 A7                		divu	r10, r7
  61 0051 EF 7A                   		mov.L	r7, r10
 105:SOURCES/menu.c **** }
  62                             		.loc 1 105 0
  63 0053 EF A1                   		mov.L	r10, r1
  64 0055 3F 6B 08                		rtsd	#32, r6-r11
  65                             	.LFE1:
  67                             		.section C,"a",@progbits
  68                             		.p2align 2
  69                             	.LC0:
  70 0000 25 63 25 2D 2A 2E 2A 73 		.string	"%c%-*.*s "
  70      20 00 
  71                             	.LC1:
  72 000a 20 25 2D 2A 2E 2A 73 25 		.string	" %-*.*s%c"
  72      63 00 
  73                             	.LC2:
  74 0014 25 63 25 2D 2A 2E 2A 73 		.string	"%c%-*.*s%c"
  74      25 63 00 
  75                             		.section P,"ax"
  77                             	_display_txt_header:
  78                             	.LFB2:
 106:SOURCES/menu.c **** 
 107:SOURCES/menu.c **** 
 108:SOURCES/menu.c **** static void display_txt_header( int *nIndex, const char *txtHeader, int nMax, int nOptions )
 109:SOURCES/menu.c **** {
  79                             		.loc 1 109 0
  80 0058 6E 6B                   		pushm	r6-r11
  81                             	.LCFI6:
  82 005a 71 06 EC                		add	#-20, r0, r6
  83                             	.LCFI7:
  84 005d 71 60 E8                		add	#-24, r6, r0
  85                             	.LCFI8:
  86 0060 A0 69                   		mov.L	r1, 4[r6]
  87 0062 A0 E2                   		mov.L	r2, 8[r6]
  88 0064 A0 EB                   		mov.L	r3, 12[r6]
  89 0066 A1 64                   		mov.L	r4, 16[r6]
 110:SOURCES/menu.c **** 	int nXChars;
 111:SOURCES/menu.c **** 	nXChars = GetMaxCharsXPos()-2;
  90                             		.loc 1 111 0
  91 0068 39 98 FF                		bsr	_GetMaxCharsXPos
  92 006b EF 1A                   		mov.L	r1, r10
  93 006d 60 2A                   		sub	#2, r10
  94 006f E3 6A                   		mov.L	r10, [r6]
 112:SOURCES/menu.c **** 	gotoxy(0,0);
  95                             		.loc 1 112 0
  96 0071 66 01                   		mov.L	#0, r1
  97 0073 66 02                   		mov.L	#0, r2
  98 0075 05 00 00 00             		bsr	_gotoxy
 113:SOURCES/menu.c **** 
 114:SOURCES/menu.c **** 	if( *nIndex == (nMax-1) && !DOLOOP( nOptions ))
  99                             		.loc 1 114 0
 100 0079 ED 6A 01                		mov.L	4[r6], r10
 101 007c EC AB                   		mov.L	[r10], r11
 102 007e ED 6A 03                		mov.L	12[r6], r10
 103 0081 60 1A                   		sub	#1, r10
 104 0083 47 AB                   		cmp	r10, r11
 105 0085 21 2A                   		bne	.L6
 106                             		.loc 1 114 0 is_stmt 0 discriminator 1
 107 0087 ED 6A 04                		mov.L	16[r6], r10
 108 008a 64 1A                   		and	#1, r10
 109 008c 61 0A                   		cmp	#0, r10
 110 008e 21 21                   		bne	.L6
 115:SOURCES/menu.c **** 		printf("%c%-*.*s ", 0x1E, nXChars, nXChars, txtHeader );
 111                             		.loc 1 115 0 is_stmt 1
 112 0090 F8 02 00 00 00 00       		mov.L	#.LC0, [r0]
 113 0096 3E 01 1E                		mov.L	#30, 4[r0]
 114 0099 EC 6A                   		mov.L	[r6], r10
 115 009b E7 0A 02                		mov.L	r10, 8[r0]
 116 009e EC 6A                   		mov.L	[r6], r10
 117 00a0 E7 0A 03                		mov.L	r10, 12[r0]
 118 00a3 ED 6A 02                		mov.L	8[r6], r10
 119 00a6 E7 0A 04                		mov.L	r10, 16[r0]
 120 00a9 05 00 00 00             		bsr	_printf
 121 00ad 2E 53                   		bra	.L5
 122                             	.L6:
 116:SOURCES/menu.c **** 	else if( *nIndex == 0 && !DOLOOP(nOptions))
 123                             		.loc 1 116 0
 124 00af ED 6A 01                		mov.L	4[r6], r10
 125 00b2 EC AA                   		mov.L	[r10], r10
 126 00b4 61 0A                   		cmp	#0, r10
 127 00b6 21 2A                   		bne	.L8
 128                             		.loc 1 116 0 is_stmt 0 discriminator 1
 129 00b8 ED 6A 04                		mov.L	16[r6], r10
 130 00bb 64 1A                   		and	#1, r10
 131 00bd 61 0A                   		cmp	#0, r10
 132 00bf 21 21                   		bne	.L8
 117:SOURCES/menu.c **** 		printf(" %-*.*s%c", nXChars, nXChars, txtHeader, 0x1F );
 133                             		.loc 1 117 0 is_stmt 1
 134 00c1 F8 02 0A 00 00 00       		mov.L	#.LC1, [r0]
 135 00c7 EC 6A                   		mov.L	[r6], r10
 136 00c9 E7 0A 01                		mov.L	r10, 4[r0]
 137 00cc EC 6A                   		mov.L	[r6], r10
 138 00ce E7 0A 02                		mov.L	r10, 8[r0]
 139 00d1 ED 6A 02                		mov.L	8[r6], r10
 140 00d4 E7 0A 03                		mov.L	r10, 12[r0]
 141 00d7 3E 04 1F                		mov.L	#31, 16[r0]
 142 00da 05 00 00 00             		bsr	_printf
 143 00de 2E 22                   		bra	.L5
 144                             	.L8:
 118:SOURCES/menu.c **** 	else
 119:SOURCES/menu.c **** 		printf("%c%-*.*s%c", 0x1E, nXChars, nXChars, txtHeader, 0x1F );
 145                             		.loc 1 119 0
 146 00e0 F8 02 14 00 00 00       		mov.L	#.LC2, [r0]
 147 00e6 3E 01 1E                		mov.L	#30, 4[r0]
 148 00e9 EC 6A                   		mov.L	[r6], r10
 149 00eb E7 0A 02                		mov.L	r10, 8[r0]
 150 00ee EC 6A                   		mov.L	[r6], r10
 151 00f0 E7 0A 03                		mov.L	r10, 12[r0]
 152 00f3 ED 6A 02                		mov.L	8[r6], r10
 153 00f6 E7 0A 04                		mov.L	r10, 16[r0]
 154 00f9 3E 05 1F                		mov.L	#31, 20[r0]
 155 00fc 05 00 00 00             		bsr	_printf
 156                             		.balign 2,3,2
 157                             	.L5:
 120:SOURCES/menu.c **** }
 158                             		.loc 1 120 0
 159 0100 3F 6B 11                		rtsd	#68, r6-r11
 160                             	.LFE2:
 162                             		.section C,"a",@progbits
 163 001f 00                      		.p2align 2
 164                             	.LC3:
 165 0020 09 72 25 2A 64 20 25 2D 		.string	"\tr%*d %-*.*s \tr"
 165      2A 2E 2A 73 20 09 72 00 
 166                             	.LC4:
 167 0030 25 2A 64 20 25 2D 2A 2E 		.string	"%*d %-*.*s "
 167      2A 73 20 00 
 168                             	.LC5:
 169 003c 25 2D 2A 2E 2A 73 20 00 		.string	"%-*.*s "
 170                             	.LC6:
 171 0044 20 00                   		.string	" "
 172                             		.section P,"ax"
 174                             	_display_txt_menu_lines:
 175                             	.LFB3:
 121:SOURCES/menu.c **** 
 122:SOURCES/menu.c **** 
 123:SOURCES/menu.c **** static void display_txt_menu_lines( int *nIndex, stxtMenu *menuItems, int nMax, int nShownHeader)
 124:SOURCES/menu.c **** {
 176                             		.loc 1 124 0
 177 0103 6E 6C                   		pushm	r6-r12
 178                             	.LCFI9:
 179 0105 71 06 D8                		add	#-40, r0, r6
 180                             	.LCFI10:
 181 0108 71 60 E8                		add	#-24, r6, r0
 182                             	.LCFI11:
 183 010b A1 E1                   		mov.L	r1, 24[r6]
 184 010d A1 EA                   		mov.L	r2, 28[r6]
 185 010f A2 63                   		mov.L	r3, 32[r6]
 186 0111 A2 6C                   		mov.L	r4, 36[r6]
 125:SOURCES/menu.c **** 	int nCount;
 126:SOURCES/menu.c **** 	int nPos;
 127:SOURCES/menu.c **** 	int nStart;
 128:SOURCES/menu.c **** 	int nDisplayMnuLines;
 129:SOURCES/menu.c **** 	int nCalcDecimals;
 130:SOURCES/menu.c **** 	int nXChars;
 131:SOURCES/menu.c **** 
 132:SOURCES/menu.c **** 	nCalcDecimals = (nMax>9)?2:1;
 187                             		.loc 1 132 0
 188 0113 ED 6A 08                		mov.L	32[r6], r10
 189 0116 61 9A                   		cmp	#9, r10
 190 0118 2B 05                   		ble	.L10
 191                             		.loc 1 132 0 is_stmt 0 discriminator 1
 192 011a 66 2A                   		mov.L	#2, r10
 193 011c 0C                      		bra	.L11
 194                             	.L10:
 195                             		.loc 1 132 0 discriminator 2
 196 011d 66 1A                   		mov.L	#1, r10
 197 011f 03                      		.balign 2,3,5
 198                             	.L11:
 199                             		.loc 1 132 0 discriminator 3
 200 0120 E7 6A 02                		mov.L	r10, 8[r6]
 133:SOURCES/menu.c **** 
 134:SOURCES/menu.c **** 	nXChars = GetMaxCharsXPos()-nCalcDecimals -1;
 201                             		.loc 1 134 0 is_stmt 1 discriminator 3
 202 0123 39 DD FE                		bsr	_GetMaxCharsXPos
 203 0126 EF 1B                   		mov.L	r1, r11
 204 0128 ED 6A 02                		mov.L	8[r6], r10
 205 012b FF 0A AB                		sub	r10, r11, r10
 206 012e 60 1A                   		sub	#1, r10
 207 0130 E7 6A 03                		mov.L	r10, 12[r6]
 135:SOURCES/menu.c **** 
 136:SOURCES/menu.c **** 	nDisplayMnuLines = GetMaxYLines() - ((nShownHeader)?1:0);
 208                             		.loc 1 136 0 discriminator 3
 209 0133 39 F9 FE                		bsr	_GetMaxYLines
 210 0136 EF 1B                   		mov.L	r1, r11
 211 0138 ED 6A 09                		mov.L	36[r6], r10
 212 013b 61 0A                   		cmp	#0, r10
 213 013d FC DB A1                		scne.L	r10
 214 0140 5B AA                   		movu.B	r10, r10
 215 0142 FF 0A AB                		sub	r10, r11, r10
 216 0145 E7 6A 04                		mov.L	r10, 16[r6]
 137:SOURCES/menu.c **** 
 138:SOURCES/menu.c **** 	if( nDisplayMnuLines > nMax )
 217                             		.loc 1 138 0 discriminator 3
 218 0148 ED 6B 04                		mov.L	16[r6], r11
 219 014b ED 6A 08                		mov.L	32[r6], r10
 220 014e 47 AB                   		cmp	r10, r11
 221 0150 2B 07                   		ble	.L12
 139:SOURCES/menu.c **** 		nStart = 0;
 222                             		.loc 1 139 0
 223 0152 3E 61 00                		mov.L	#0, 4[r6]
 224 0155 2E 29                   		bra	.L13
 225                             	.L12:
 140:SOURCES/menu.c **** 	else if( *nIndex + nDisplayMnuLines  > nMax )
 226                             		.loc 1 140 0
 227 0157 ED 6A 06                		mov.L	24[r6], r10
 228 015a EC AA                   		mov.L	[r10], r10
 229 015c EF AB                   		mov.L	r10, r11
 230 015e 06 89 6B 04             		add	16[r6].L, r11
 231 0162 ED 6A 08                		mov.L	32[r6], r10
 232 0165 47 AB                   		cmp	r10, r11
 233 0167 2B 0F                   		ble	.L14
 141:SOURCES/menu.c **** 		nStart = nMax - nDisplayMnuLines ;
 234                             		.loc 1 141 0
 235 0169 ED 6B 08                		mov.L	32[r6], r11
 236 016c ED 6A 04                		mov.L	16[r6], r10
 237 016f FF 0A AB                		sub	r10, r11, r10
 238 0172 E7 6A 01                		mov.L	r10, 4[r6]
 239 0175 09                      		bra	.L13
 240                             	.L14:
 142:SOURCES/menu.c **** 	else
 143:SOURCES/menu.c **** 		nStart = *nIndex;
 241                             		.loc 1 143 0
 242 0176 ED 6A 06                		mov.L	24[r6], r10
 243 0179 EC AA                   		mov.L	[r10], r10
 244 017b E7 6A 01                		mov.L	r10, 4[r6]
 245                             		.balign 2,3,4
 246                             	.L13:
 144:SOURCES/menu.c **** 
 145:SOURCES/menu.c **** 	for( nCount = 0; nCount < nDisplayMnuLines; nCount++ )
 247                             		.loc 1 145 0
 248 017e 3E 60 00                		mov.L	#0, [r6]
 249 0181 38 D3 00                		bra	.L15
 250                             	.L19:
 146:SOURCES/menu.c **** 	{
 147:SOURCES/menu.c **** 		nPos = nCount + nStart;
 251                             		.loc 1 147 0
 252 0184 EC 6A                   		mov.L	[r6], r10
 253 0186 06 89 6A 01             		add	4[r6].L, r10
 254 018a E7 6A 05                		mov.L	r10, 20[r6]
 148:SOURCES/menu.c **** 		gotoxy( 0, nCount +((nShownHeader)?1:0));
 255                             		.loc 1 148 0
 256 018d ED 6A 09                		mov.L	36[r6], r10
 257 0190 61 0A                   		cmp	#0, r10
 258 0192 FC DB A1                		scne.L	r10
 259 0195 5B AA                   		movu.B	r10, r10
 260 0197 06 88 6A                		add	[r6].L, r10
 261 019a 66 01                   		mov.L	#0, r1
 262 019c EF A2                   		mov.L	r10, r2
 263 019e 05 00 00 00             		bsr	_gotoxy
 149:SOURCES/menu.c **** 		if( *nIndex == nPos )
 264                             		.loc 1 149 0
 265 01a2 ED 6A 06                		mov.L	24[r6], r10
 266 01a5 EC AB                   		mov.L	[r10], r11
 267 01a7 ED 6A 05                		mov.L	20[r6], r10
 268 01aa 47 AB                   		cmp	r10, r11
 269 01ac 21 38                   		bne	.L16
 150:SOURCES/menu.c **** 			printf("\tr%*d %-*.*s \tr", nCalcDecimals, nPos+1, nXChars, nXChars, menuItems[ nPos ].text ); /
 270                             		.loc 1 150 0
 271 01ae ED 6A 05                		mov.L	20[r6], r10
 272 01b1 71 AB 01                		add	#1, r10, r11
 273 01b4 ED 6A 05                		mov.L	20[r6], r10
 274 01b7 6C 3A                   		shll	#3, r10
 275 01b9 ED 6C 07                		mov.L	28[r6], r12
 276 01bc 4B CA                   		add	r12, r10
 277 01be EC AA                   		mov.L	[r10], r10
 278 01c0 F8 02 20 00 00 00       		mov.L	#.LC3, [r0]
 279 01c6 ED 6C 02                		mov.L	8[r6], r12
 280 01c9 E7 0C 01                		mov.L	r12, 4[r0]
 281 01cc E7 0B 02                		mov.L	r11, 8[r0]
 282 01cf ED 6B 03                		mov.L	12[r6], r11
 283 01d2 E7 0B 03                		mov.L	r11, 12[r0]
 284 01d5 ED 6B 03                		mov.L	12[r6], r11
 285 01d8 E7 0B 04                		mov.L	r11, 16[r0]
 286 01db E7 0A 05                		mov.L	r10, 20[r0]
 287 01de 05 00 00 00             		bsr	_printf
 288 01e2 2E 6C                   		bra	.L17
 289                             	.L16:
 151:SOURCES/menu.c **** 		else
 152:SOURCES/menu.c **** 		{
 153:SOURCES/menu.c **** 			if( nPos < nMax )
 290                             		.loc 1 153 0
 291 01e4 ED 6B 05                		mov.L	20[r6], r11
 292 01e7 ED 6A 08                		mov.L	32[r6], r10
 293 01ea 47 AB                   		cmp	r10, r11
 294 01ec 28 38                   		bge	.L18
 154:SOURCES/menu.c **** 				printf("%*d %-*.*s ", nCalcDecimals, nPos+1, nXChars, nXChars, menuItems[ nPos ].text );
 295                             		.loc 1 154 0
 296 01ee ED 6A 05                		mov.L	20[r6], r10
 297 01f1 71 AB 01                		add	#1, r10, r11
 298 01f4 ED 6A 05                		mov.L	20[r6], r10
 299 01f7 6C 3A                   		shll	#3, r10
 300 01f9 ED 6C 07                		mov.L	28[r6], r12
 301 01fc 4B CA                   		add	r12, r10
 302 01fe EC AA                   		mov.L	[r10], r10
 303 0200 F8 02 30 00 00 00       		mov.L	#.LC4, [r0]
 304 0206 ED 6C 02                		mov.L	8[r6], r12
 305 0209 E7 0C 01                		mov.L	r12, 4[r0]
 306 020c E7 0B 02                		mov.L	r11, 8[r0]
 307 020f ED 6B 03                		mov.L	12[r6], r11
 308 0212 E7 0B 03                		mov.L	r11, 12[r0]
 309 0215 ED 6B 03                		mov.L	12[r6], r11
 310 0218 E7 0B 04                		mov.L	r11, 16[r0]
 311 021b E7 0A 05                		mov.L	r10, 20[r0]
 312 021e 05 00 00 00             		bsr	_printf
 313 0222 2E 2C                   		bra	.L17
 314                             	.L18:
 155:SOURCES/menu.c **** 			else
 156:SOURCES/menu.c **** 				printf("%-*.*s ", (nXChars+nCalcDecimals+1), (nXChars+nCalcDecimals+1), " ");
 315                             		.loc 1 156 0
 316 0224 ED 6A 03                		mov.L	12[r6], r10
 317 0227 06 89 6A 02             		add	8[r6].L, r10
 318 022b 71 AB 01                		add	#1, r10, r11
 319 022e ED 6A 03                		mov.L	12[r6], r10
 320 0231 06 89 6A 02             		add	8[r6].L, r10
 321 0235 62 1A                   		add	#1, r10
 322 0237 F8 02 3C 00 00 00       		mov.L	#.LC5, [r0]
 323 023d E7 0B 01                		mov.L	r11, 4[r0]
 324 0240 E7 0A 02                		mov.L	r10, 8[r0]
 325 0243 F9 02 03 44 00 00 00    		mov.L	#.LC6, 12[r0]
 326 024a 05 00 00 00             		bsr	_printf
 327                             		.balign 2,3,1
 328                             	.L17:
 145:SOURCES/menu.c **** 	for( nCount = 0; nCount < nDisplayMnuLines; nCount++ )
 329                             		.loc 1 145 0
 330 024e EC 6A                   		mov.L	[r6], r10
 331 0250 62 1A                   		add	#1, r10
 332 0252 E3 6A                   		mov.L	r10, [r6]
 333                             		.balign 2,3,1
 334                             	.L15:
 145:SOURCES/menu.c **** 	for( nCount = 0; nCount < nDisplayMnuLines; nCount++ )
 335                             		.loc 1 145 0 is_stmt 0 discriminator 1
 336 0254 EC 6B                   		mov.L	[r6], r11
 337 0256 ED 6A 04                		mov.L	16[r6], r10
 338 0259 47 AB                   		cmp	r10, r11
 339 025b 28 05 38 27 FF          		blt	.L19
 157:SOURCES/menu.c **** 		}
 158:SOURCES/menu.c **** 	}
 159:SOURCES/menu.c **** }
 340                             		.loc 1 159 0 is_stmt 1
 341 0260 3F 6C 17                		rtsd	#92, r6-r12
 342                             	.LFE3:
 345                             	_errorbeep:
 346                             	.LFB4:
 160:SOURCES/menu.c **** 
 161:SOURCES/menu.c **** static void errorbeep( void )
 162:SOURCES/menu.c **** {
 347                             		.loc 1 162 0
 348 0263 7E A6                   		push.l	r6
 349                             	.LCFI12:
 350 0265 EF 06                   		mov.L	r0, r6
 351                             	.LCFI13:
 352 0267 60 C0                   		sub	#12, r0
 163:SOURCES/menu.c **** 	sound(TSTANDARD, VHIGH, SERROR, NULL);
 353                             		.loc 1 163 0
 354 0269 3E 00 7F                		mov.L	#0x7f, [r0]
 355 026c 3E 01 64                		mov.L	#0x64, 4[r0]
 356 026f 3E 02 00                		mov.L	#0, 8[r0]
 357 0272 66 51                   		mov.L	#5, r1
 358 0274 05 00 00 00             		bsr	_sound
 164:SOURCES/menu.c **** }
 359                             		.loc 1 164 0
 360 0278 3F 66 04                		rtsd	#16, r6-r6
 361                             	.LFE4:
 364                             	_get_txt_menu_input:
 365                             	.LFB5:
 165:SOURCES/menu.c **** 
 166:SOURCES/menu.c **** static int get_txt_menu_input( int *nIndex, stxtMenu *menuItems, int nMax, int nOptions )
 167:SOURCES/menu.c **** {
 366                             		.loc 1 167 0
 367 027b 6E 6B                   		pushm	r6-r11
 368                             	.LCFI14:
 369 027d 71 06 EC                		add	#-20, r0, r6
 370                             	.LCFI15:
 371 0280 EF 60                   		mov.L	r6, r0
 372                             	.LCFI16:
 373 0282 A0 69                   		mov.L	r1, 4[r6]
 374 0284 A0 E2                   		mov.L	r2, 8[r6]
 375 0286 A0 EB                   		mov.L	r3, 12[r6]
 376 0288 A1 64                   		mov.L	r4, 16[r6]
 168:SOURCES/menu.c **** 	int nKey = WaitForKey();
 377                             		.loc 1 168 0
 378 028a 05 00 00 00             		bsr	_WaitForKey
 379 028e E3 61                   		mov.L	r1, [r6]
 169:SOURCES/menu.c **** 	switch( nKey )
 380                             		.loc 1 169 0
 381 0290 EC 6A                   		mov.L	[r6], r10
 382 0292 75 5A 80                		cmp	#0x80, r10
 383 0295 20 39                   		beq	.L25
 384 0297 75 5A 80                		cmp	#0x80, r10
 385 029a 2A 1D                   		bgt	.L28
 386 029c 75 5A 1B                		cmp	#27, r10
 387 029f 3A B5 00                		beq	.L23
 388 02a2 75 5A 1B                		cmp	#27, r10
 389 02a5 28 05 38 F7 00          		blt	.L22
 390 02aa 71 AA CF                		add	#-49, r10
 391 02ad 61 8A                   		cmp	#8, r10
 392 02af 25 05 38 ED 00          		bgtu	.L22
 393 02b4 38 AA 00                		bra	.L40
 394                             	.L28:
 395 02b7 75 5A 82                		cmp	#0x82, r10
 396 02ba 20 67                   		beq	.L27
 397 02bc 75 5A 82                		cmp	#0x82, r10
 398 02bf 29 2C                   		blt	.L26
 399 02c1 75 5A 85                		cmp	#0x85, r10
 400 02c4 12                      		beq	.L25
 401 02c5 75 5A 86                		cmp	#0x86, r10
 402 02c8 3A 8C 00                		beq	.L23
 403 02cb 38 D3 00                		bra	.L22
 404                             	.L25:
 170:SOURCES/menu.c **** 	{
 171:SOURCES/menu.c **** 	case ENT_KEY:
 172:SOURCES/menu.c **** 	case TRIGGER_KEY:
 173:SOURCES/menu.c **** 		if( menuItems[ *nIndex ].funcitem == NULL )
 405                             		.loc 1 173 0
 406 02ce ED 6A 01                		mov.L	4[r6], r10
 407 02d1 EC AA                   		mov.L	[r10], r10
 408 02d3 6C 3A                   		shll	#3, r10
 409 02d5 ED 6B 02                		mov.L	8[r6], r11
 410 02d8 4B BA                   		add	r11, r10
 411 02da ED AA 01                		mov.L	4[r10], r10
 412 02dd 61 0A                   		cmp	#0, r10
 413 02df 1F                      		bne	.L29
 174:SOURCES/menu.c **** 			*nIndex = -1;
 414                             		.loc 1 174 0
 415 02e0 ED 6A 01                		mov.L	4[r6], r10
 416 02e3 F8 A6 FF                		mov.L	#-1, [r10]
 417                             		.balign 2,3,1
 418                             	.L29:
 175:SOURCES/menu.c **** 		return TRUE; // exit
 419                             		.loc 1 175 0
 420 02e6 66 1A                   		mov.L	#1, r10
 421 02e8 38 BC 00                		bra	.L30
 422                             	.L26:
 176:SOURCES/menu.c **** 
 177:SOURCES/menu.c **** 	case UP_KEY:
 178:SOURCES/menu.c **** #if !OPH1005
 179:SOURCES/menu.c **** 	case LEFT_KEY:
 180:SOURCES/menu.c **** #endif
 181:SOURCES/menu.c **** #if PHL|PHL1000|PHL2700
 182:SOURCES/menu.c **** 	case Q1_KEY:
 183:SOURCES/menu.c **** 	case F5_KEY:
 184:SOURCES/menu.c **** 	case F7_KEY:
 185:SOURCES/menu.c **** #endif
 186:SOURCES/menu.c **** 		if( *nIndex > 0 )
 423                             		.loc 1 186 0
 424 02eb ED 6A 01                		mov.L	4[r6], r10
 425 02ee EC AA                   		mov.L	[r10], r10
 426 02f0 61 0A                   		cmp	#0, r10
 427 02f2 2B 12                   		ble	.L31
 187:SOURCES/menu.c **** 			(*nIndex)--;
 428                             		.loc 1 187 0
 429 02f4 ED 6A 01                		mov.L	4[r6], r10
 430 02f7 EC AA                   		mov.L	[r10], r10
 431 02f9 71 AB FF                		add	#-1, r10, r11
 432 02fc ED 6A 01                		mov.L	4[r6], r10
 433 02ff E3 AB                   		mov.L	r11, [r10]
 188:SOURCES/menu.c **** 		else if( DOLOOP( nOptions ))
 189:SOURCES/menu.c **** 			(*nIndex) = nMax-1;
 190:SOURCES/menu.c **** 		else
 191:SOURCES/menu.c **** 			errorbeep();
 192:SOURCES/menu.c **** 		break;
 434                             		.loc 1 192 0
 435 0301 38 A1 00                		bra	.L34
 436                             	.L31:
 188:SOURCES/menu.c **** 		else if( DOLOOP( nOptions ))
 437                             		.loc 1 188 0
 438 0304 ED 6A 04                		mov.L	16[r6], r10
 439 0307 64 1A                   		and	#1, r10
 440 0309 61 0A                   		cmp	#0, r10
 441 030b 20 10                   		beq	.L33
 189:SOURCES/menu.c **** 			(*nIndex) = nMax-1;
 442                             		.loc 1 189 0
 443 030d ED 6A 03                		mov.L	12[r6], r10
 444 0310 71 AB FF                		add	#-1, r10, r11
 445 0313 ED 6A 01                		mov.L	4[r6], r10
 446 0316 E3 AB                   		mov.L	r11, [r10]
 447                             		.loc 1 192 0
 448 0318 38 8A 00                		bra	.L34
 449                             	.L33:
 191:SOURCES/menu.c **** 			errorbeep();
 450                             		.loc 1 191 0
 451 031b 39 48 FF                		bsr	_errorbeep
 452                             		.loc 1 192 0
 453 031e 38 84 00                		bra	.L34
 454                             	.L27:
 193:SOURCES/menu.c **** 	case DOWN_KEY:
 194:SOURCES/menu.c **** #if !OPH1005
 195:SOURCES/menu.c **** 	case RIGHT_KEY:
 196:SOURCES/menu.c **** #endif
 197:SOURCES/menu.c **** #if PHL|PHL1000|PHL2700
 198:SOURCES/menu.c **** 	case Q2_KEY:
 199:SOURCES/menu.c **** 	case F6_KEY:
 200:SOURCES/menu.c **** 	case F8_KEY:
 201:SOURCES/menu.c **** #endif
 202:SOURCES/menu.c **** 		if( *nIndex + 1 < nMax )
 455                             		.loc 1 202 0
 456 0321 ED 6A 01                		mov.L	4[r6], r10
 457 0324 EC AA                   		mov.L	[r10], r10
 458 0326 71 AB 01                		add	#1, r10, r11
 459 0329 ED 6A 03                		mov.L	12[r6], r10
 460 032c 47 AB                   		cmp	r10, r11
 461 032e 28 11                   		bge	.L35
 203:SOURCES/menu.c **** 			(*nIndex)++;
 462                             		.loc 1 203 0
 463 0330 ED 6A 01                		mov.L	4[r6], r10
 464 0333 EC AA                   		mov.L	[r10], r10
 465 0335 71 AB 01                		add	#1, r10, r11
 466 0338 ED 6A 01                		mov.L	4[r6], r10
 467 033b E3 AB                   		mov.L	r11, [r10]
 204:SOURCES/menu.c **** 		else if( DOLOOP( nOptions ))
 205:SOURCES/menu.c **** 			(*nIndex) = 0;
 206:SOURCES/menu.c **** 		else
 207:SOURCES/menu.c **** 			errorbeep();
 208:SOURCES/menu.c **** 		break;
 468                             		.loc 1 208 0
 469 033d 2E 65                   		bra	.L34
 470                             	.L35:
 204:SOURCES/menu.c **** 		else if( DOLOOP( nOptions ))
 471                             		.loc 1 204 0
 472 033f ED 6A 04                		mov.L	16[r6], r10
 473 0342 64 1A                   		and	#1, r10
 474 0344 61 0A                   		cmp	#0, r10
 475 0346 11                      		beq	.L37
 205:SOURCES/menu.c **** 			(*nIndex) = 0;
 476                             		.loc 1 205 0
 477 0347 ED 6A 01                		mov.L	4[r6], r10
 478 034a F8 A6 00                		mov.L	#0, [r10]
 479                             		.loc 1 208 0
 480 034d 2E 55                   		bra	.L34
 481                             	.L37:
 207:SOURCES/menu.c **** 			errorbeep();
 482                             		.loc 1 207 0
 483 034f 39 14 FF                		bsr	_errorbeep
 484                             		.loc 1 208 0
 485 0352 2E 50                   		bra	.L34
 486                             	.L23:
 209:SOURCES/menu.c **** 	case CLR_KEY:
 210:SOURCES/menu.c **** 	case ESC_KEY:
 211:SOURCES/menu.c **** 		(*nIndex) = -1;
 487                             		.loc 1 211 0
 488 0354 ED 6A 01                		mov.L	4[r6], r10
 489 0357 F8 A6 FF                		mov.L	#-1, [r10]
 212:SOURCES/menu.c **** 		return TRUE;
 490                             		.loc 1 212 0
 491 035a 66 1A                   		mov.L	#1, r10
 492 035c 2E 48                   		bra	.L30
 493                             	.L40:
 213:SOURCES/menu.c **** 
 214:SOURCES/menu.c **** 	case '1':	case '2':	case '3':
 215:SOURCES/menu.c **** 	case '4':	case '5':	case '6':
 216:SOURCES/menu.c **** 	case '7':	case '8':	case '9':
 217:SOURCES/menu.c **** 		if( (nKey - 0x31) >= 0 && (nKey - 0x31) < nMax)
 494                             		.loc 1 217 0
 495 035e EC 6A                   		mov.L	[r6], r10
 496 0360 71 AA CF                		add	#-49, r10
 497 0363 61 0A                   		cmp	#0, r10
 498 0365 29 35                   		blt	.L38
 499                             		.loc 1 217 0 is_stmt 0 discriminator 1
 500 0367 EC 6A                   		mov.L	[r6], r10
 501 0369 71 AB CF                		add	#-49, r10, r11
 502 036c ED 6A 03                		mov.L	12[r6], r10
 503 036f 47 AB                   		cmp	r10, r11
 504 0371 28 29                   		bge	.L38
 218:SOURCES/menu.c **** 		{
 219:SOURCES/menu.c **** 			(*nIndex) = nKey - 0x31;
 505                             		.loc 1 219 0 is_stmt 1
 506 0373 EC 6A                   		mov.L	[r6], r10
 507 0375 71 AB CF                		add	#-49, r10, r11
 508 0378 ED 6A 01                		mov.L	4[r6], r10
 509 037b E3 AB                   		mov.L	r11, [r10]
 220:SOURCES/menu.c **** 
 221:SOURCES/menu.c **** 			if( menuItems[ *nIndex ].funcitem == NULL )
 510                             		.loc 1 221 0
 511 037d ED 6A 01                		mov.L	4[r6], r10
 512 0380 EC AA                   		mov.L	[r10], r10
 513 0382 6C 3A                   		shll	#3, r10
 514 0384 ED 6B 02                		mov.L	8[r6], r11
 515 0387 4B BA                   		add	r11, r10
 516 0389 ED AA 01                		mov.L	4[r10], r10
 517 038c 61 0A                   		cmp	#0, r10
 518 038e 18                      		bne	.L39
 222:SOURCES/menu.c **** 				*nIndex = -1;
 519                             		.loc 1 222 0
 520 038f ED 6A 01                		mov.L	4[r6], r10
 521 0392 F8 A6 FF                		mov.L	#-1, [r10]
 522 0395 03                      		.balign 2,3,1
 523                             	.L39:
 223:SOURCES/menu.c **** 
 224:SOURCES/menu.c **** 			return TRUE;
 524                             		.loc 1 224 0
 525 0396 66 1A                   		mov.L	#1, r10
 526 0398 2E 0C                   		bra	.L30
 527                             	.L38:
 225:SOURCES/menu.c **** 		}
 226:SOURCES/menu.c **** 		errorbeep();
 528                             		.loc 1 226 0
 529 039a 39 C9 FE                		bsr	_errorbeep
 227:SOURCES/menu.c **** 		break;
 530                             		.loc 1 227 0
 531 039d 0D                      		bra	.L34
 532                             	.L22:
 228:SOURCES/menu.c **** 	default:
 229:SOURCES/menu.c **** 		errorbeep();
 533                             		.loc 1 229 0
 534 039e 39 C5 FE                		bsr	_errorbeep
 230:SOURCES/menu.c **** 		break;
 535                             		.loc 1 230 0
 536 03a1 03                      		nop
 537                             		.balign 2,3,1
 538                             	.L34:
 231:SOURCES/menu.c **** 	}
 232:SOURCES/menu.c **** 	return FALSE;
 539                             		.loc 1 232 0
 540 03a2 66 0A                   		mov.L	#0, r10
 541                             		.balign 2,3,1
 542                             	.L30:
 233:SOURCES/menu.c **** }
 543                             		.loc 1 233 0
 544 03a4 EF A1                   		mov.L	r10, r1
 545 03a6 3F 6B 0B                		rtsd	#44, r6-r11
 546                             	.LFE5:
 548                             		.global	_ShowTextMenu
 550                             	_ShowTextMenu:
 551                             	.LFB6:
 234:SOURCES/menu.c **** 
 235:SOURCES/menu.c **** void ShowTextMenu( int *nIndex, const char* txtHeader, stxtMenu *menuItems, int nMax, int nOptions 
 236:SOURCES/menu.c **** {
 552                             		.loc 1 236 0
 553 03a9 6E 6C                   		pushm	r6-r12
 554                             	.LCFI17:
 555 03ab 71 06 EC                		add	#-20, r0, r6
 556                             	.LCFI18:
 557 03ae EF 60                   		mov.L	r6, r0
 558                             	.LCFI19:
 559 03b0 75 4B 34                		mov.L	#52, r11
 560 03b3 4B 6B                   		add	r6, r11
 561 03b5 E3 61                   		mov.L	r1, [r6]
 562 03b7 A0 6A                   		mov.L	r2, 4[r6]
 563 03b9 A0 E3                   		mov.L	r3, 8[r6]
 564 03bb A0 EC                   		mov.L	r4, 12[r6]
 237:SOURCES/menu.c **** 	cursor( NOWRAP );
 565                             		.loc 1 237 0
 566 03bd 66 41                   		mov.L	#4, r1
 567 03bf 05 00 00 00             		bsr	_cursor
 238:SOURCES/menu.c **** 	putchar('\f');
 568                             		.loc 1 238 0
 569 03c3 FB A2 00 00 00 00       		mov.L	#__impure_ptr, r10
 570 03c9 EC AA                   		mov.L	[r10], r10
 571 03cb ED AA 02                		mov.L	8[r10], r10
 572 03ce ED AC 02                		mov.L	8[r10], r12
 573 03d1 60 1C                   		sub	#1, r12
 574 03d3 E7 AC 02                		mov.L	r12, 8[r10]
 575 03d6 ED AA 02                		mov.L	8[r10], r10
 576 03d9 61 0A                   		cmp	#0, r10
 577 03db 29 05 38 99 00          		bge	.L42
 578                             		.loc 1 238 0 is_stmt 0 discriminator 1
 579 03e0 FB A2 00 00 00 00       		mov.L	#__impure_ptr, r10
 580 03e6 EC AA                   		mov.L	[r10], r10
 581 03e8 ED AA 02                		mov.L	8[r10], r10
 582 03eb ED AC 02                		mov.L	8[r10], r12
 583 03ee FB A2 00 00 00 00       		mov.L	#__impure_ptr, r10
 584 03f4 EC AA                   		mov.L	[r10], r10
 585 03f6 ED AA 02                		mov.L	8[r10], r10
 586 03f9 ED AA 06                		mov.L	24[r10], r10
 587 03fc 47 AC                   		cmp	r10, r12
 588 03fe 29 59                   		blt	.L43
 589                             		.loc 1 238 0 discriminator 3
 590 0400 FB A2 00 00 00 00       		mov.L	#__impure_ptr, r10
 591 0406 EC AA                   		mov.L	[r10], r10
 592 0408 ED AA 02                		mov.L	8[r10], r10
 593 040b EC AA                   		mov.L	[r10], r10
 594 040d F8 A4 0C                		mov.B	#12, [r10]
 595 0410 FB A2 00 00 00 00       		mov.L	#__impure_ptr, r10
 596 0416 EC AA                   		mov.L	[r10], r10
 597 0418 ED AA 02                		mov.L	8[r10], r10
 598 041b EC AA                   		mov.L	[r10], r10
 599 041d CC AA                   		mov.B	[r10], r10
 600 041f 5B AA                   		movu.B	r10, r10
 601 0421 61 AA                   		cmp	#10, r10
 602 0423 20 15                   		beq	.L44
 603                             		.loc 1 238 0 discriminator 5
 604 0425 FB A2 00 00 00 00       		mov.L	#__impure_ptr, r10
 605 042b EC AA                   		mov.L	[r10], r10
 606 042d ED AA 02                		mov.L	8[r10], r10
 607 0430 EC AC                   		mov.L	[r10], r12
 608 0432 62 1C                   		add	#1, r12
 609 0434 E3 AC                   		mov.L	r12, [r10]
 610 0436 2E 64                   		bra	.L47
 611                             	.L44:
 612                             		.loc 1 238 0 discriminator 6
 613 0438 FB A2 00 00 00 00       		mov.L	#__impure_ptr, r10
 614 043e EC AC                   		mov.L	[r10], r12
 615 0440 FB A2 00 00 00 00       		mov.L	#__impure_ptr, r10
 616 0446 EC AA                   		mov.L	[r10], r10
 617 0448 ED AA 02                		mov.L	8[r10], r10
 618 044b EF C1                   		mov.L	r12, r1
 619 044d 66 A2                   		mov.L	#10, r2
 620 044f EF A3                   		mov.L	r10, r3
 621 0451 05 00 00 00             		bsr	___swbuf_r
 622 0455 2E 45                   		bra	.L47
 623                             	.L43:
 624                             		.loc 1 238 0 discriminator 4
 625 0457 FB A2 00 00 00 00       		mov.L	#__impure_ptr, r10
 626 045d EC AC                   		mov.L	[r10], r12
 627 045f FB A2 00 00 00 00       		mov.L	#__impure_ptr, r10
 628 0465 EC AA                   		mov.L	[r10], r10
 629 0467 ED AA 02                		mov.L	8[r10], r10
 630 046a EF C1                   		mov.L	r12, r1
 631 046c 66 C2                   		mov.L	#12, r2
 632 046e EF A3                   		mov.L	r10, r3
 633 0470 05 00 00 00             		bsr	___swbuf_r
 634 0474 2E 26                   		bra	.L47
 635                             	.L42:
 636                             		.loc 1 238 0 discriminator 2
 637 0476 FB A2 00 00 00 00       		mov.L	#__impure_ptr, r10
 638 047c EC AA                   		mov.L	[r10], r10
 639 047e ED AA 02                		mov.L	8[r10], r10
 640 0481 EC AA                   		mov.L	[r10], r10
 641 0483 F8 A4 0C                		mov.B	#12, [r10]
 642 0486 FB A2 00 00 00 00       		mov.L	#__impure_ptr, r10
 643 048c EC AA                   		mov.L	[r10], r10
 644 048e ED AA 02                		mov.L	8[r10], r10
 645 0491 EC AC                   		mov.L	[r10], r12
 646 0493 62 1C                   		add	#1, r12
 647 0495 E3 AC                   		mov.L	r12, [r10]
 648 0497 0B                      		bra	.L47
 649                             	.L53:
 239:SOURCES/menu.c **** 	for(;;)
 240:SOURCES/menu.c **** 	{
 241:SOURCES/menu.c **** 		if( SHOWHEADER( txtHeader ) )
 242:SOURCES/menu.c **** 			display_txt_header( nIndex, txtHeader, nMax, nOptions );
 243:SOURCES/menu.c **** 
 244:SOURCES/menu.c **** 		display_txt_menu_lines( nIndex, menuItems, nMax, SHOWHEADER( txtHeader ));
 245:SOURCES/menu.c **** 
 246:SOURCES/menu.c **** 		if( get_txt_menu_input( nIndex, menuItems, nMax, nOptions))
 247:SOURCES/menu.c **** 		{
 248:SOURCES/menu.c **** 			if( *nIndex == -1 )
 249:SOURCES/menu.c **** 				return;
 250:SOURCES/menu.c **** 			menuItems[ *nIndex ].funcitem();
 251:SOURCES/menu.c **** 			cursor( NOWRAP );
 252:SOURCES/menu.c **** 		}
 253:SOURCES/menu.c **** 	}
 650                             		.loc 1 253 0 is_stmt 1
 651 0498 03                      		nop
 652 0499 03                      		.balign 2,3,1
 653                             	.L47:
 241:SOURCES/menu.c **** 		if( SHOWHEADER( txtHeader ) )
 654                             		.loc 1 241 0
 655 049a ED 6A 01                		mov.L	4[r6], r10
 656 049d 61 0A                   		cmp	#0, r10
 657 049f 20 0D                   		beq	.L48
 242:SOURCES/menu.c **** 			display_txt_header( nIndex, txtHeader, nMax, nOptions );
 658                             		.loc 1 242 0
 659 04a1 EC 61                   		mov.L	[r6], r1
 660 04a3 A8 6A                   		mov.L	4[r6], r2
 661 04a5 A8 EB                   		mov.L	12[r6], r3
 662 04a7 EC B4                   		mov.L	[r11], r4
 663 04a9 39 AF FB                		bsr	_display_txt_header
 664                             		.balign 2,3,1
 665                             	.L48:
 244:SOURCES/menu.c **** 		display_txt_menu_lines( nIndex, menuItems, nMax, SHOWHEADER( txtHeader ));
 666                             		.loc 1 244 0
 667 04ac ED 6A 01                		mov.L	4[r6], r10
 668 04af 61 0A                   		cmp	#0, r10
 669 04b1 FC DB A1                		scne.L	r10
 670 04b4 5B AA                   		movu.B	r10, r10
 671 04b6 EC 61                   		mov.L	[r6], r1
 672 04b8 A8 E2                   		mov.L	8[r6], r2
 673 04ba A8 EB                   		mov.L	12[r6], r3
 674 04bc EF A4                   		mov.L	r10, r4
 675 04be 39 45 FC                		bsr	_display_txt_menu_lines
 246:SOURCES/menu.c **** 		if( get_txt_menu_input( nIndex, menuItems, nMax, nOptions))
 676                             		.loc 1 246 0
 677 04c1 EC 61                   		mov.L	[r6], r1
 678 04c3 A8 E2                   		mov.L	8[r6], r2
 679 04c5 A8 EB                   		mov.L	12[r6], r3
 680 04c7 EC B4                   		mov.L	[r11], r4
 681 04c9 39 B2 FD                		bsr	_get_txt_menu_input
 682 04cc EF 1A                   		mov.L	r1, r10
 683 04ce 61 0A                   		cmp	#0, r10
 684 04d0 20 C8                   		beq	.L53
 248:SOURCES/menu.c **** 			if( *nIndex == -1 )
 685                             		.loc 1 248 0
 686 04d2 EC 6A                   		mov.L	[r6], r10
 687 04d4 EC AA                   		mov.L	[r10], r10
 688 04d6 75 0A FF                		cmp	#-1, r10
 689 04d9 20 1B                   		beq	.L54
 690 04db 03                      		.balign 2,3,1
 691                             	.L50:
 250:SOURCES/menu.c **** 			menuItems[ *nIndex ].funcitem();
 692                             		.loc 1 250 0
 693 04dc EC 6A                   		mov.L	[r6], r10
 694 04de EC AA                   		mov.L	[r10], r10
 695 04e0 6C 3A                   		shll	#3, r10
 696 04e2 ED 6C 02                		mov.L	8[r6], r12
 697 04e5 4B CA                   		add	r12, r10
 698 04e7 ED AA 01                		mov.L	4[r10], r10
 699 04ea 7F 1A                   		jsr	r10
 251:SOURCES/menu.c **** 			cursor( NOWRAP );
 700                             		.loc 1 251 0
 701 04ec 66 41                   		mov.L	#4, r1
 702 04ee 05 00 00 00             		bsr	_cursor
 703                             		.loc 1 253 0
 704 04f2 2E A6                   		bra	.L53
 705                             	.L54:
 249:SOURCES/menu.c **** 				return;
 706                             		.loc 1 249 0
 707 04f4 03                      		nop
 708 04f5 03                      		.balign 2,3,2
 709                             	.L52:
 254:SOURCES/menu.c **** }
 710                             		.loc 1 254 0
 711 04f6 3F 6C 0C                		rtsd	#48, r6-r12
 712                             	.LFE6:
 715                             	_txt_menu_sel_set_value:
 716                             	.LFB7:
 255:SOURCES/menu.c **** 
 256:SOURCES/menu.c **** 
 257:SOURCES/menu.c **** //-----------------------------------------------------------------------------
 258:SOURCES/menu.c **** // The Text selection menu stuff is below here
 259:SOURCES/menu.c **** //-----------------------------------------------------------------------------
 260:SOURCES/menu.c **** 
 261:SOURCES/menu.c **** 
 262:SOURCES/menu.c **** static void txt_menu_sel_set_value( int *nIndex, sSelMenu *menuSelItems, int nOptions, long *lValue
 263:SOURCES/menu.c **** {
 717                             		.loc 1 263 0
 718 04f9 6E 6C                   		pushm	r6-r12
 719                             	.LCFI20:
 720 04fb 71 06 F0                		add	#-16, r0, r6
 721                             	.LCFI21:
 722 04fe EF 60                   		mov.L	r6, r0
 723                             	.LCFI22:
 724 0500 E3 61                   		mov.L	r1, [r6]
 725 0502 A0 6A                   		mov.L	r2, 4[r6]
 726 0504 A0 E3                   		mov.L	r3, 8[r6]
 727 0506 A0 EC                   		mov.L	r4, 12[r6]
 264:SOURCES/menu.c **** 	if( menuSelItems[ *nIndex ].value == -1L )
 728                             		.loc 1 264 0
 729 0508 EC 6A                   		mov.L	[r6], r10
 730 050a EC AA                   		mov.L	[r10], r10
 731 050c 6C 3A                   		shll	#3, r10
 732 050e ED 6B 01                		mov.L	4[r6], r11
 733 0511 4B BA                   		add	r11, r10
 734 0513 ED AA 01                		mov.L	4[r10], r10
 735 0516 75 0A FF                		cmp	#-1, r10
 736 0519 18                      		bne	.L56
 265:SOURCES/menu.c **** 		*nIndex = -1;
 737                             		.loc 1 265 0
 738 051a EC 6A                   		mov.L	[r6], r10
 739 051c F8 A6 FF                		mov.L	#-1, [r10]
 740 051f 2E 45                   		bra	.L57
 741                             	.L56:
 266:SOURCES/menu.c **** 	else if( MULTIPLE_SELECT( nOptions ))
 742                             		.loc 1 266 0
 743 0521 ED 6A 02                		mov.L	8[r6], r10
 744 0524 64 2A                   		and	#2, r10
 745 0526 61 0A                   		cmp	#0, r10
 746 0528 20 1F                   		beq	.L58
 267:SOURCES/menu.c **** 		*lValue ^= menuSelItems[ *nIndex ].value;
 747                             		.loc 1 267 0
 748 052a ED 6A 03                		mov.L	12[r6], r10
 749 052d EC AB                   		mov.L	[r10], r11
 750 052f EC 6A                   		mov.L	[r6], r10
 751 0531 EC AA                   		mov.L	[r10], r10
 752 0533 6C 3A                   		shll	#3, r10
 753 0535 ED 6C 01                		mov.L	4[r6], r12
 754 0538 4B CA                   		add	r12, r10
 755 053a ED AA 01                		mov.L	4[r10], r10
 756 053d FC 37 AB                		xor	r10, r11
 757 0540 ED 6A 03                		mov.L	12[r6], r10
 758 0543 E3 AB                   		mov.L	r11, [r10]
 759 0545 2E 1F                   		bra	.L57
 760                             	.L58:
 268:SOURCES/menu.c **** 	else if( !MULTIPLE_SELECT( nOptions ) ) //&& menuSelItems[ *nIndex ].value != 0UL )
 761                             		.loc 1 268 0
 762 0547 ED 6A 02                		mov.L	8[r6], r10
 763 054a 64 2A                   		and	#2, r10
 764 054c 61 0A                   		cmp	#0, r10
 765 054e 21 16                   		bne	.L57
 269:SOURCES/menu.c **** 		*lValue = menuSelItems[ *nIndex ].value;
 766                             		.loc 1 269 0
 767 0550 EC 6A                   		mov.L	[r6], r10
 768 0552 EC AA                   		mov.L	[r10], r10
 769 0554 6C 3A                   		shll	#3, r10
 770 0556 ED 6B 01                		mov.L	4[r6], r11
 771 0559 4B BA                   		add	r11, r10
 772 055b ED AB 01                		mov.L	4[r10], r11
 773 055e ED 6A 03                		mov.L	12[r6], r10
 774 0561 E3 AB                   		mov.L	r11, [r10]
 775 0563 03                      		.balign 2,3,1
 776                             	.L57:
 270:SOURCES/menu.c **** 
 271:SOURCES/menu.c **** 	if( RETURN_SINGLE_SELECT(nOptions) )
 777                             		.loc 1 271 0
 778 0564 ED 6A 02                		mov.L	8[r6], r10
 779 0567 64 4A                   		and	#4, r10
 780 0569 61 0A                   		cmp	#0, r10
 781 056b 20 0F                   		beq	.L55
 782                             		.loc 1 271 0 is_stmt 0 discriminator 1
 783 056d ED 6A 02                		mov.L	8[r6], r10
 784 0570 64 2A                   		and	#2, r10
 785 0572 61 0A                   		cmp	#0, r10
 786 0574 1E                      		bne	.L55
 272:SOURCES/menu.c **** 		*nIndex = -1;
 787                             		.loc 1 272 0 is_stmt 1
 788 0575 EC 6A                   		mov.L	[r6], r10
 789 0577 F8 A6 FF                		mov.L	#-1, [r10]
 790                             		.balign 2,3,2
 791                             	.L55:
 273:SOURCES/menu.c **** }
 792                             		.loc 1 273 0
 793 057a 3F 6C 0B                		rtsd	#44, r6-r12
 794                             	.LFE7:
 797                             	_get_txt_menu_sel_input:
 798                             	.LFB8:
 274:SOURCES/menu.c **** 
 275:SOURCES/menu.c **** static int get_txt_menu_sel_input( int *nIndex, sSelMenu *menuSelItems, int nMax, int nOptions, lon
 276:SOURCES/menu.c **** {
 799                             		.loc 1 276 0
 800 057d 6E 6C                   		pushm	r6-r12
 801                             	.LCFI23:
 802 057f 71 06 E8                		add	#-24, r0, r6
 803                             	.LCFI24:
 804 0582 EF 60                   		mov.L	r6, r0
 805                             	.LCFI25:
 806 0584 75 4B 38                		mov.L	#56, r11
 807 0587 4B 6B                   		add	r6, r11
 808 0589 A0 69                   		mov.L	r1, 4[r6]
 809 058b A0 E2                   		mov.L	r2, 8[r6]
 810 058d A0 EB                   		mov.L	r3, 12[r6]
 811 058f A1 64                   		mov.L	r4, 16[r6]
 277:SOURCES/menu.c **** 	int nKey = WaitForKey();
 812                             		.loc 1 277 0
 813 0591 05 00 00 00             		bsr	_WaitForKey
 814 0595 E3 61                   		mov.L	r1, [r6]
 278:SOURCES/menu.c **** 	switch( nKey )
 815                             		.loc 1 278 0
 816 0597 EC 6A                   		mov.L	[r6], r10
 817 0599 75 5A 80                		cmp	#0x80, r10
 818 059c 20 38                   		beq	.L64
 819 059e 75 5A 80                		cmp	#0x80, r10
 820 05a1 2A 1D                   		bgt	.L67
 821 05a3 75 5A 1B                		cmp	#27, r10
 822 05a6 3A A5 00                		beq	.L62
 823 05a9 75 5A 1B                		cmp	#27, r10
 824 05ac 28 05 38 D9 00          		blt	.L61
 825 05b1 71 AA CF                		add	#-49, r10
 826 05b4 61 8A                   		cmp	#8, r10
 827 05b6 25 05 38 CF 00          		bgtu	.L61
 828 05bb 38 9A 00                		bra	.L77
 829                             	.L67:
 830 05be 75 5A 82                		cmp	#0x82, r10
 831 05c1 20 57                   		beq	.L66
 832 05c3 75 5A 82                		cmp	#0x82, r10
 833 05c6 29 1E                   		blt	.L65
 834 05c8 75 5A 85                		cmp	#0x85, r10
 835 05cb 11                      		beq	.L64
 836 05cc 75 5A 86                		cmp	#0x86, r10
 837 05cf 20 7C                   		beq	.L62
 838 05d1 38 B6 00                		bra	.L61
 839                             	.L64:
 279:SOURCES/menu.c **** 	{
 280:SOURCES/menu.c **** 	case ENT_KEY:
 281:SOURCES/menu.c **** 	case TRIGGER_KEY:
 282:SOURCES/menu.c **** 
 283:SOURCES/menu.c **** 		// Change the value item first before redrawing
 284:SOURCES/menu.c **** 		txt_menu_sel_set_value( nIndex, menuSelItems, nOptions, lValue );
 840                             		.loc 1 284 0
 841 05d4 A8 69                   		mov.L	4[r6], r1
 842 05d6 A8 E2                   		mov.L	8[r6], r2
 843 05d8 A9 63                   		mov.L	16[r6], r3
 844 05da EC B4                   		mov.L	[r11], r4
 845 05dc 39 1D FF                		bsr	_txt_menu_sel_set_value
 285:SOURCES/menu.c **** 
 286:SOURCES/menu.c **** 		return TRUE; // exit
 846                             		.loc 1 286 0
 847 05df 66 1A                   		mov.L	#1, r10
 848 05e1 38 AD 00                		bra	.L68
 849                             	.L65:
 287:SOURCES/menu.c **** 
 288:SOURCES/menu.c **** 	case UP_KEY:
 289:SOURCES/menu.c **** #if !OPH1005
 290:SOURCES/menu.c **** 	case LEFT_KEY:
 291:SOURCES/menu.c **** #endif
 292:SOURCES/menu.c **** #if PHL|PHL1000|PHL2700
 293:SOURCES/menu.c **** 	case Q1_KEY:
 294:SOURCES/menu.c **** 	case F5_KEY:
 295:SOURCES/menu.c **** 	case F7_KEY:
 296:SOURCES/menu.c **** #endif
 297:SOURCES/menu.c **** 		if( *nIndex > 0 )
 850                             		.loc 1 297 0
 851 05e4 ED 6A 01                		mov.L	4[r6], r10
 852 05e7 EC AA                   		mov.L	[r10], r10
 853 05e9 61 0A                   		cmp	#0, r10
 854 05eb 2B 12                   		ble	.L69
 298:SOURCES/menu.c **** 			(*nIndex)--;
 855                             		.loc 1 298 0
 856 05ed ED 6A 01                		mov.L	4[r6], r10
 857 05f0 EC AA                   		mov.L	[r10], r10
 858 05f2 71 AB FF                		add	#-1, r10, r11
 859 05f5 ED 6A 01                		mov.L	4[r6], r10
 860 05f8 E3 AB                   		mov.L	r11, [r10]
 299:SOURCES/menu.c **** 		else if( DOLOOP( nOptions ) )
 300:SOURCES/menu.c **** 			(*nIndex) = nMax-1;
 301:SOURCES/menu.c **** 		else
 302:SOURCES/menu.c **** 			errorbeep();
 303:SOURCES/menu.c **** 		break;
 861                             		.loc 1 303 0
 862 05fa 38 92 00                		bra	.L72
 863                             	.L69:
 299:SOURCES/menu.c **** 		else if( DOLOOP( nOptions ) )
 864                             		.loc 1 299 0
 865 05fd ED 6A 04                		mov.L	16[r6], r10
 866 0600 64 1A                   		and	#1, r10
 867 0602 61 0A                   		cmp	#0, r10
 868 0604 20 0F                   		beq	.L71
 300:SOURCES/menu.c **** 			(*nIndex) = nMax-1;
 869                             		.loc 1 300 0
 870 0606 ED 6A 03                		mov.L	12[r6], r10
 871 0609 71 AB FF                		add	#-1, r10, r11
 872 060c ED 6A 01                		mov.L	4[r6], r10
 873 060f E3 AB                   		mov.L	r11, [r10]
 874                             		.loc 1 303 0
 875 0611 2E 7B                   		bra	.L72
 876                             	.L71:
 302:SOURCES/menu.c **** 			errorbeep();
 877                             		.loc 1 302 0
 878 0613 39 50 FC                		bsr	_errorbeep
 879                             		.loc 1 303 0
 880 0616 2E 76                   		bra	.L72
 881                             	.L66:
 304:SOURCES/menu.c **** 
 305:SOURCES/menu.c **** 	case DOWN_KEY:
 306:SOURCES/menu.c **** #if !OPH1005
 307:SOURCES/menu.c **** 	case RIGHT_KEY:
 308:SOURCES/menu.c **** #endif
 309:SOURCES/menu.c **** #if PHL|PHL1000|PHL2700
 310:SOURCES/menu.c **** 	case Q2_KEY:
 311:SOURCES/menu.c **** 	case F6_KEY:
 312:SOURCES/menu.c **** 	case F8_KEY:
 313:SOURCES/menu.c **** #endif
 314:SOURCES/menu.c **** 		if( *nIndex + 1 < nMax )
 882                             		.loc 1 314 0
 883 0618 ED 6A 01                		mov.L	4[r6], r10
 884 061b EC AA                   		mov.L	[r10], r10
 885 061d 71 AB 01                		add	#1, r10, r11
 886 0620 ED 6A 03                		mov.L	12[r6], r10
 887 0623 47 AB                   		cmp	r10, r11
 888 0625 28 11                   		bge	.L73
 315:SOURCES/menu.c **** 			(*nIndex)++;
 889                             		.loc 1 315 0
 890 0627 ED 6A 01                		mov.L	4[r6], r10
 891 062a EC AA                   		mov.L	[r10], r10
 892 062c 71 AB 01                		add	#1, r10, r11
 893 062f ED 6A 01                		mov.L	4[r6], r10
 894 0632 E3 AB                   		mov.L	r11, [r10]
 316:SOURCES/menu.c **** 		else if( DOLOOP( nOptions ) )
 317:SOURCES/menu.c **** 			(*nIndex) = 0;
 318:SOURCES/menu.c **** 		else
 319:SOURCES/menu.c **** 			errorbeep();
 320:SOURCES/menu.c **** 		break;
 895                             		.loc 1 320 0
 896 0634 2E 58                   		bra	.L72
 897                             	.L73:
 316:SOURCES/menu.c **** 		else if( DOLOOP( nOptions ) )
 898                             		.loc 1 316 0
 899 0636 ED 6A 04                		mov.L	16[r6], r10
 900 0639 64 1A                   		and	#1, r10
 901 063b 61 0A                   		cmp	#0, r10
 902 063d 11                      		beq	.L75
 317:SOURCES/menu.c **** 			(*nIndex) = 0;
 903                             		.loc 1 317 0
 904 063e ED 6A 01                		mov.L	4[r6], r10
 905 0641 F8 A6 00                		mov.L	#0, [r10]
 906                             		.loc 1 320 0
 907 0644 2E 48                   		bra	.L72
 908                             	.L75:
 319:SOURCES/menu.c **** 			errorbeep();
 909                             		.loc 1 319 0
 910 0646 39 1D FC                		bsr	_errorbeep
 911                             		.loc 1 320 0
 912 0649 2E 43                   		bra	.L72
 913                             	.L62:
 321:SOURCES/menu.c **** 
 322:SOURCES/menu.c **** 	case CLR_KEY:
 323:SOURCES/menu.c **** 	case ESC_KEY:
 324:SOURCES/menu.c **** 		(*nIndex) = -1;
 914                             		.loc 1 324 0
 915 064b ED 6A 01                		mov.L	4[r6], r10
 916 064e F8 A6 FF                		mov.L	#-1, [r10]
 325:SOURCES/menu.c **** 		return TRUE;
 917                             		.loc 1 325 0
 918 0651 66 1A                   		mov.L	#1, r10
 919 0653 2E 3B                   		bra	.L68
 920                             	.L77:
 326:SOURCES/menu.c **** 
 327:SOURCES/menu.c **** 	case '1':	case '2':	case '3':
 328:SOURCES/menu.c **** 	case '4':	case '5':	case '6':
 329:SOURCES/menu.c **** 	case '7':	case '8':	case '9':
 330:SOURCES/menu.c **** 		if( (nKey - 0x31) >= 0 && (nKey - 0x31) < nMax)
 921                             		.loc 1 330 0
 922 0655 EC 6A                   		mov.L	[r6], r10
 923 0657 71 AA CF                		add	#-49, r10
 924 065a 61 0A                   		cmp	#0, r10
 925 065c 29 27                   		blt	.L76
 926                             		.loc 1 330 0 is_stmt 0 discriminator 1
 927 065e EC 6A                   		mov.L	[r6], r10
 928 0660 71 AC CF                		add	#-49, r10, r12
 929 0663 ED 6A 03                		mov.L	12[r6], r10
 930 0666 47 AC                   		cmp	r10, r12
 931 0668 28 1B                   		bge	.L76
 331:SOURCES/menu.c **** 		{
 332:SOURCES/menu.c **** 			(*nIndex) = nKey - 0x31;
 932                             		.loc 1 332 0 is_stmt 1
 933 066a EC 6A                   		mov.L	[r6], r10
 934 066c 71 AC CF                		add	#-49, r10, r12
 935 066f ED 6A 01                		mov.L	4[r6], r10
 936 0672 E3 AC                   		mov.L	r12, [r10]
 333:SOURCES/menu.c **** 			txt_menu_sel_set_value( nIndex, menuSelItems, nOptions, lValue );
 937                             		.loc 1 333 0
 938 0674 A8 69                   		mov.L	4[r6], r1
 939 0676 A8 E2                   		mov.L	8[r6], r2
 940 0678 A9 63                   		mov.L	16[r6], r3
 941 067a EC B4                   		mov.L	[r11], r4
 942 067c 39 7D FE                		bsr	_txt_menu_sel_set_value
 334:SOURCES/menu.c **** 
 335:SOURCES/menu.c **** 			return TRUE;
 943                             		.loc 1 335 0
 944 067f 66 1A                   		mov.L	#1, r10
 945 0681 2E 0D                   		bra	.L68
 946                             	.L76:
 336:SOURCES/menu.c **** 		}
 337:SOURCES/menu.c **** 		errorbeep();
 947                             		.loc 1 337 0
 948 0683 39 E0 FB                		bsr	_errorbeep
 338:SOURCES/menu.c **** 		break;
 949                             		.loc 1 338 0
 950 0686 0E                      		bra	.L72
 951                             	.L61:
 339:SOURCES/menu.c **** 
 340:SOURCES/menu.c **** 	default:
 341:SOURCES/menu.c **** 		errorbeep();
 952                             		.loc 1 341 0
 953 0687 39 DC FB                		bsr	_errorbeep
 342:SOURCES/menu.c **** 		break;
 954                             		.loc 1 342 0
 955 068a 03                      		nop
 956 068b 03                      		.balign 2,3,1
 957                             	.L72:
 343:SOURCES/menu.c **** 	}
 344:SOURCES/menu.c **** 
 345:SOURCES/menu.c **** 	return FALSE;
 958                             		.loc 1 345 0
 959 068c 66 0A                   		mov.L	#0, r10
 960                             		.balign 2,3,1
 961                             	.L68:
 346:SOURCES/menu.c **** }
 962                             		.loc 1 346 0
 963 068e EF A1                   		mov.L	r10, r1
 964 0690 3F 6C 0D                		rtsd	#52, r6-r12
 965                             	.LFE8:
 967                             		.section C,"a",@progbits
 968 0046 00 00                   		.p2align 2
 969                             	.LC7:
 970 0048 09 72 25 2A 64 25 63 25 		.string	"\tr%*d%c%-*.*s \tr"
 970      2D 2A 2E 2A 73 20 09 72 
 970      00 
 971                             	.LC8:
 972 0059 25 2A 64 25 63 25 2D 2A 		.string	"%*d%c%-*.*s "
 972      2E 2A 73 20 00 
 973                             		.section P,"ax"
 975                             	_display_txt_menu_sel_lines:
 976                             	.LFB9:
 347:SOURCES/menu.c **** 
 348:SOURCES/menu.c **** static void display_txt_menu_sel_lines( int *nIndex, sSelMenu *menuSelItems, int nMax, int nShownHe
 349:SOURCES/menu.c **** {
 977                             		.loc 1 349 0
 978 0693 6E 6D                   		pushm	r6-r13
 979                             	.LCFI26:
 980 0695 71 06 D0                		add	#-48, r0, r6
 981                             	.LCFI27:
 982 0698 71 60 E4                		add	#-28, r6, r0
 983                             	.LCFI28:
 984 069b 75 4A 54                		mov.L	#0x54, r10
 985 069e 4B 6A                   		add	r6, r10
 986 06a0 A1 E1                   		mov.L	r1, 24[r6]
 987 06a2 A1 EA                   		mov.L	r2, 28[r6]
 988 06a4 A2 63                   		mov.L	r3, 32[r6]
 989 06a6 A2 6C                   		mov.L	r4, 36[r6]
 350:SOURCES/menu.c **** 	int nCount;
 351:SOURCES/menu.c **** 	int nPos;
 352:SOURCES/menu.c **** 	int nStart;
 353:SOURCES/menu.c **** 	int nDisplayMnuLines;
 354:SOURCES/menu.c **** 	int nCalcDecimals;
 355:SOURCES/menu.c **** 	int nXChars;
 356:SOURCES/menu.c **** 
 357:SOURCES/menu.c **** 	nCalcDecimals = (nMax>9)?2:1;
 990                             		.loc 1 357 0
 991 06a8 ED 6B 08                		mov.L	32[r6], r11
 992 06ab 61 9B                   		cmp	#9, r11
 993 06ad 2B 05                   		ble	.L79
 994                             		.loc 1 357 0 is_stmt 0 discriminator 1
 995 06af 66 2B                   		mov.L	#2, r11
 996 06b1 0B                      		bra	.L80
 997                             	.L79:
 998                             		.loc 1 357 0 discriminator 2
 999 06b2 66 1B                   		mov.L	#1, r11
 1000                             		.balign 2,3,5
 1001                             	.L80:
 1002                             		.loc 1 357 0 discriminator 3
 1003 06b4 E7 6B 02                		mov.L	r11, 8[r6]
 358:SOURCES/menu.c **** 
 359:SOURCES/menu.c **** 	nXChars = GetMaxCharsXPos()-nCalcDecimals -1;
 1004                             		.loc 1 359 0 is_stmt 1 discriminator 3
 1005 06b7 39 49 F9                		bsr	_GetMaxCharsXPos
 1006 06ba EF 1C                   		mov.L	r1, r12
 1007 06bc ED 6B 02                		mov.L	8[r6], r11
 1008 06bf FF 0B BC                		sub	r11, r12, r11
 1009 06c2 60 1B                   		sub	#1, r11
 1010 06c4 E7 6B 03                		mov.L	r11, 12[r6]
 360:SOURCES/menu.c **** 
 361:SOURCES/menu.c **** 	nDisplayMnuLines = GetMaxYLines() - ((nShownHeader)?1:0);
 1011                             		.loc 1 361 0 discriminator 3
 1012 06c7 39 65 F9                		bsr	_GetMaxYLines
 1013 06ca EF 1C                   		mov.L	r1, r12
 1014 06cc ED 6B 09                		mov.L	36[r6], r11
 1015 06cf 61 0B                   		cmp	#0, r11
 1016 06d1 FC DB B1                		scne.L	r11
 1017 06d4 5B BB                   		movu.B	r11, r11
 1018 06d6 FF 0B BC                		sub	r11, r12, r11
 1019 06d9 E7 6B 04                		mov.L	r11, 16[r6]
 362:SOURCES/menu.c **** 
 363:SOURCES/menu.c **** 	if( nDisplayMnuLines > nMax )
 1020                             		.loc 1 363 0 discriminator 3
 1021 06dc ED 6C 04                		mov.L	16[r6], r12
 1022 06df ED 6B 08                		mov.L	32[r6], r11
 1023 06e2 47 BC                   		cmp	r11, r12
 1024 06e4 2B 07                   		ble	.L81
 364:SOURCES/menu.c **** 		nStart = 0;
 1025                             		.loc 1 364 0
 1026 06e6 3E 61 00                		mov.L	#0, 4[r6]
 1027 06e9 2E 29                   		bra	.L82
 1028                             	.L81:
 365:SOURCES/menu.c **** 	else if( *nIndex + nDisplayMnuLines  > nMax )
 1029                             		.loc 1 365 0
 1030 06eb ED 6B 06                		mov.L	24[r6], r11
 1031 06ee EC BB                   		mov.L	[r11], r11
 1032 06f0 EF BC                   		mov.L	r11, r12
 1033 06f2 06 89 6C 04             		add	16[r6].L, r12
 1034 06f6 ED 6B 08                		mov.L	32[r6], r11
 1035 06f9 47 BC                   		cmp	r11, r12
 1036 06fb 2B 0F                   		ble	.L83
 366:SOURCES/menu.c **** 		nStart = nMax - nDisplayMnuLines ;
 1037                             		.loc 1 366 0
 1038 06fd ED 6C 08                		mov.L	32[r6], r12
 1039 0700 ED 6B 04                		mov.L	16[r6], r11
 1040 0703 FF 0B BC                		sub	r11, r12, r11
 1041 0706 E7 6B 01                		mov.L	r11, 4[r6]
 1042 0709 09                      		bra	.L82
 1043                             	.L83:
 367:SOURCES/menu.c **** 	else
 368:SOURCES/menu.c **** 		nStart = *nIndex;
 1044                             		.loc 1 368 0
 1045 070a ED 6B 06                		mov.L	24[r6], r11
 1046 070d EC BB                   		mov.L	[r11], r11
 1047 070f E7 6B 01                		mov.L	r11, 4[r6]
 1048                             		.balign 2,3,4
 1049                             	.L82:
 369:SOURCES/menu.c **** 
 370:SOURCES/menu.c **** 	for( nCount = 0; nCount < nDisplayMnuLines; nCount++ )
 1050                             		.loc 1 370 0
 1051 0712 3E 60 00                		mov.L	#0, [r6]
 1052 0715 38 EB 01                		bra	.L84
 1053                             	.L98:
 371:SOURCES/menu.c **** 	{
 372:SOURCES/menu.c **** 		nPos = nCount + nStart;
 1054                             		.loc 1 372 0
 1055 0718 EC 6B                   		mov.L	[r6], r11
 1056 071a 06 89 6B 01             		add	4[r6].L, r11
 1057 071e E7 6B 05                		mov.L	r11, 20[r6]
 373:SOURCES/menu.c **** 		gotoxy( 0, nCount +((nShownHeader)?1:0));
 1058                             		.loc 1 373 0
 1059 0721 ED 6B 09                		mov.L	36[r6], r11
 1060 0724 61 0B                   		cmp	#0, r11
 1061 0726 FC DB B1                		scne.L	r11
 1062 0729 5B BB                   		movu.B	r11, r11
 1063 072b 06 88 6B                		add	[r6].L, r11
 1064 072e 66 01                   		mov.L	#0, r1
 1065 0730 EF B2                   		mov.L	r11, r2
 1066 0732 05 00 00 00             		bsr	_gotoxy
 374:SOURCES/menu.c **** 		if( *nIndex == nPos )
 1067                             		.loc 1 374 0
 1068 0736 ED 6B 06                		mov.L	24[r6], r11
 1069 0739 EC BC                   		mov.L	[r11], r12
 1070 073b ED 6B 05                		mov.L	20[r6], r11
 1071 073e 47 BC                   		cmp	r11, r12
 1072 0740 3B CC 00                		bne	.L85
 375:SOURCES/menu.c **** 		{
 376:SOURCES/menu.c **** 			if( MULTIPLE_SELECT( nOptions ))
 1073                             		.loc 1 376 0
 1074 0743 EC AB                   		mov.L	[r10], r11
 1075 0745 64 2B                   		and	#2, r11
 1076 0747 61 0B                   		cmp	#0, r11
 1077 0749 20 6D                   		beq	.L86
 377:SOURCES/menu.c **** 				printf("\tr%*d%c%-*.*s \tr", nCalcDecimals, nPos+1, ((menuSelItems[ nPos ].value & *lValue)&& (
 1078                             		.loc 1 377 0
 1079 074b ED 6B 05                		mov.L	20[r6], r11
 1080 074e 71 BD 01                		add	#1, r11, r13
 1081 0751 ED 6B 05                		mov.L	20[r6], r11
 1082 0754 6C 3B                   		shll	#3, r11
 1083 0756 ED 6C 07                		mov.L	28[r6], r12
 1084 0759 4B CB                   		add	r12, r11
 1085 075b ED BC 01                		mov.L	4[r11], r12
 1086 075e ED AB 01                		mov.L	4[r10], r11
 1087 0761 EC BB                   		mov.L	[r11], r11
 1088 0763 53 CB                   		and	r12, r11
 1089 0765 61 0B                   		cmp	#0, r11
 1090 0767 20 17                   		beq	.L87
 1091                             		.loc 1 377 0 is_stmt 0 discriminator 1
 1092 0769 ED 6B 05                		mov.L	20[r6], r11
 1093 076c 6C 3B                   		shll	#3, r11
 1094 076e ED 6C 07                		mov.L	28[r6], r12
 1095 0771 4B CB                   		add	r12, r11
 1096 0773 ED BB 01                		mov.L	4[r11], r11
 1097 0776 75 0B FF                		cmp	#-1, r11
 1098 0779 15                      		beq	.L87
 1099 077a 75 4B 2A                		mov.L	#42, r11
 1100 077d 0D                      		bra	.L88
 1101                             	.L87:
 1102                             		.loc 1 377 0 discriminator 2
 1103 077e 75 4B 20                		mov.L	#32, r11
 1104 0781 03                      		.balign 2,3,1
 1105                             	.L88:
 1106                             		.loc 1 377 0 discriminator 3
 1107 0782 ED 6C 05                		mov.L	20[r6], r12
 1108 0785 6C 3C                   		shll	#3, r12
 1109 0787 ED 6E 07                		mov.L	28[r6], r14
 1110 078a 4B EC                   		add	r14, r12
 1111 078c EC CC                   		mov.L	[r12], r12
 1112 078e F8 02 48 00 00 00       		mov.L	#.LC7, [r0]
 1113 0794 ED 6E 02                		mov.L	8[r6], r14
 1114 0797 E7 0E 01                		mov.L	r14, 4[r0]
 1115 079a E7 0D 02                		mov.L	r13, 8[r0]
 1116 079d E7 0B 03                		mov.L	r11, 12[r0]
 1117 07a0 ED 6B 03                		mov.L	12[r6], r11
 1118 07a3 E7 0B 04                		mov.L	r11, 16[r0]
 1119 07a6 ED 6B 03                		mov.L	12[r6], r11
 1120 07a9 E7 0B 05                		mov.L	r11, 20[r0]
 1121 07ac E7 0C 06                		mov.L	r12, 24[r0]
 1122 07af 05 00 00 00             		bsr	_printf
 1123 07b3 38 47 01                		bra	.L89
 1124                             	.L86:
 378:SOURCES/menu.c **** 			else
 379:SOURCES/menu.c **** 				printf("\tr%*d%c%-*.*s \tr", nCalcDecimals, nPos+1, (menuSelItems[ nPos ].value == *lValue)?'*'
 1125                             		.loc 1 379 0 is_stmt 1
 1126 07b6 ED 6B 05                		mov.L	20[r6], r11
 1127 07b9 71 BD 01                		add	#1, r11, r13
 1128 07bc ED 6B 05                		mov.L	20[r6], r11
 1129 07bf 6C 3B                   		shll	#3, r11
 1130 07c1 ED 6C 07                		mov.L	28[r6], r12
 1131 07c4 4B CB                   		add	r12, r11
 1132 07c6 ED BC 01                		mov.L	4[r11], r12
 1133 07c9 ED AB 01                		mov.L	4[r10], r11
 1134 07cc EC BB                   		mov.L	[r11], r11
 1135 07ce 47 BC                   		cmp	r11, r12
 1136 07d0 1D                      		bne	.L90
 1137                             		.loc 1 379 0 is_stmt 0 discriminator 1
 1138 07d1 75 4B 2A                		mov.L	#42, r11
 1139 07d4 0C                      		bra	.L91
 1140                             	.L90:
 1141                             		.loc 1 379 0 discriminator 2
 1142 07d5 75 4B 20                		mov.L	#32, r11
 1143                             		.balign 2,3,1
 1144                             	.L91:
 1145                             		.loc 1 379 0 discriminator 3
 1146 07d8 ED 6C 05                		mov.L	20[r6], r12
 1147 07db 6C 3C                   		shll	#3, r12
 1148 07dd ED 6E 07                		mov.L	28[r6], r14
 1149 07e0 4B EC                   		add	r14, r12
 1150 07e2 EC CC                   		mov.L	[r12], r12
 1151 07e4 F8 02 48 00 00 00       		mov.L	#.LC7, [r0]
 1152 07ea ED 6E 02                		mov.L	8[r6], r14
 1153 07ed E7 0E 01                		mov.L	r14, 4[r0]
 1154 07f0 E7 0D 02                		mov.L	r13, 8[r0]
 1155 07f3 E7 0B 03                		mov.L	r11, 12[r0]
 1156 07f6 ED 6B 03                		mov.L	12[r6], r11
 1157 07f9 E7 0B 04                		mov.L	r11, 16[r0]
 1158 07fc ED 6B 03                		mov.L	12[r6], r11
 1159 07ff E7 0B 05                		mov.L	r11, 20[r0]
 1160 0802 E7 0C 06                		mov.L	r12, 24[r0]
 1161 0805 05 00 00 00             		bsr	_printf
 1162 0809 38 F1 00                		bra	.L89
 1163                             	.L85:
 380:SOURCES/menu.c **** 		}
 381:SOURCES/menu.c **** 		else
 382:SOURCES/menu.c **** 		{
 383:SOURCES/menu.c **** 			if( nPos < nMax )
 1164                             		.loc 1 383 0 is_stmt 1
 1165 080c ED 6C 05                		mov.L	20[r6], r12
 1166 080f ED 6B 08                		mov.L	32[r6], r11
 1167 0812 47 BC                   		cmp	r11, r12
 1168 0814 29 05 38 B9 00          		bge	.L92
 384:SOURCES/menu.c **** 			{
 385:SOURCES/menu.c **** 				if( MULTIPLE_SELECT( nOptions ))
 1169                             		.loc 1 385 0
 1170 0819 EC AB                   		mov.L	[r10], r11
 1171 081b 64 2B                   		and	#2, r11
 1172 081d 61 0B                   		cmp	#0, r11
 1173 081f 20 5B                   		beq	.L93
 386:SOURCES/menu.c **** 					printf("%*d%c%-*.*s ", nCalcDecimals, nPos+1, (menuSelItems[ nPos ].value & *lValue)?'*':' ', 
 1174                             		.loc 1 386 0
 1175 0821 ED 6B 05                		mov.L	20[r6], r11
 1176 0824 71 BD 01                		add	#1, r11, r13
 1177 0827 ED 6B 05                		mov.L	20[r6], r11
 1178 082a 6C 3B                   		shll	#3, r11
 1179 082c ED 6C 07                		mov.L	28[r6], r12
 1180 082f 4B CB                   		add	r12, r11
 1181 0831 ED BC 01                		mov.L	4[r11], r12
 1182 0834 ED AB 01                		mov.L	4[r10], r11
 1183 0837 EC BB                   		mov.L	[r11], r11
 1184 0839 53 CB                   		and	r12, r11
 1185 083b 61 0B                   		cmp	#0, r11
 1186 083d 15                      		beq	.L94
 1187                             		.loc 1 386 0 is_stmt 0 discriminator 1
 1188 083e 75 4B 2A                		mov.L	#42, r11
 1189 0841 0D                      		bra	.L95
 1190                             	.L94:
 1191                             		.loc 1 386 0 discriminator 2
 1192 0842 75 4B 20                		mov.L	#32, r11
 1193 0845 03                      		.balign 2,3,1
 1194                             	.L95:
 1195                             		.loc 1 386 0 discriminator 3
 1196 0846 ED 6C 05                		mov.L	20[r6], r12
 1197 0849 6C 3C                   		shll	#3, r12
 1198 084b ED 6E 07                		mov.L	28[r6], r14
 1199 084e 4B EC                   		add	r14, r12
 1200 0850 EC CC                   		mov.L	[r12], r12
 1201 0852 F8 02 59 00 00 00       		mov.L	#.LC8, [r0]
 1202 0858 ED 6E 02                		mov.L	8[r6], r14
 1203 085b E7 0E 01                		mov.L	r14, 4[r0]
 1204 085e E7 0D 02                		mov.L	r13, 8[r0]
 1205 0861 E7 0B 03                		mov.L	r11, 12[r0]
 1206 0864 ED 6B 03                		mov.L	12[r6], r11
 1207 0867 E7 0B 04                		mov.L	r11, 16[r0]
 1208 086a ED 6B 03                		mov.L	12[r6], r11
 1209 086d E7 0B 05                		mov.L	r11, 20[r0]
 1210 0870 E7 0C 06                		mov.L	r12, 24[r0]
 1211 0873 05 00 00 00             		bsr	_printf
 1212 0877 38 83 00                		bra	.L89
 1213                             	.L93:
 387:SOURCES/menu.c **** 				else
 388:SOURCES/menu.c **** 					printf("%*d%c%-*.*s ", nCalcDecimals, nPos+1, (menuSelItems[ nPos ].value == *lValue)?'*':' ',
 1214                             		.loc 1 388 0 is_stmt 1
 1215 087a ED 6B 05                		mov.L	20[r6], r11
 1216 087d 71 BD 01                		add	#1, r11, r13
 1217 0880 ED 6B 05                		mov.L	20[r6], r11
 1218 0883 6C 3B                   		shll	#3, r11
 1219 0885 ED 6C 07                		mov.L	28[r6], r12
 1220 0888 4B CB                   		add	r12, r11
 1221 088a ED BC 01                		mov.L	4[r11], r12
 1222 088d ED AB 01                		mov.L	4[r10], r11
 1223 0890 EC BB                   		mov.L	[r11], r11
 1224 0892 47 BC                   		cmp	r11, r12
 1225 0894 1D                      		bne	.L96
 1226                             		.loc 1 388 0 is_stmt 0 discriminator 1
 1227 0895 75 4B 2A                		mov.L	#42, r11
 1228 0898 0C                      		bra	.L97
 1229                             	.L96:
 1230                             		.loc 1 388 0 discriminator 2
 1231 0899 75 4B 20                		mov.L	#32, r11
 1232                             		.balign 2,3,1
 1233                             	.L97:
 1234                             		.loc 1 388 0 discriminator 3
 1235 089c ED 6C 05                		mov.L	20[r6], r12
 1236 089f 6C 3C                   		shll	#3, r12
 1237 08a1 ED 6E 07                		mov.L	28[r6], r14
 1238 08a4 4B EC                   		add	r14, r12
 1239 08a6 EC CC                   		mov.L	[r12], r12
 1240 08a8 F8 02 59 00 00 00       		mov.L	#.LC8, [r0]
 1241 08ae ED 6E 02                		mov.L	8[r6], r14
 1242 08b1 E7 0E 01                		mov.L	r14, 4[r0]
 1243 08b4 E7 0D 02                		mov.L	r13, 8[r0]
 1244 08b7 E7 0B 03                		mov.L	r11, 12[r0]
 1245 08ba ED 6B 03                		mov.L	12[r6], r11
 1246 08bd E7 0B 04                		mov.L	r11, 16[r0]
 1247 08c0 ED 6B 03                		mov.L	12[r6], r11
 1248 08c3 E7 0B 05                		mov.L	r11, 20[r0]
 1249 08c6 E7 0C 06                		mov.L	r12, 24[r0]
 1250 08c9 05 00 00 00             		bsr	_printf
 1251 08cd 2E 2D                   		bra	.L89
 1252                             	.L92:
 389:SOURCES/menu.c **** 			}
 390:SOURCES/menu.c **** 			else
 391:SOURCES/menu.c **** 				printf("%-*.*s ", (nXChars+nCalcDecimals+1), (nXChars+nCalcDecimals+1), " ");
 1253                             		.loc 1 391 0 is_stmt 1
 1254 08cf ED 6B 03                		mov.L	12[r6], r11
 1255 08d2 06 89 6B 02             		add	8[r6].L, r11
 1256 08d6 71 BC 01                		add	#1, r11, r12
 1257 08d9 ED 6B 03                		mov.L	12[r6], r11
 1258 08dc 06 89 6B 02             		add	8[r6].L, r11
 1259 08e0 62 1B                   		add	#1, r11
 1260 08e2 F8 02 3C 00 00 00       		mov.L	#.LC5, [r0]
 1261 08e8 E7 0C 01                		mov.L	r12, 4[r0]
 1262 08eb E7 0B 02                		mov.L	r11, 8[r0]
 1263 08ee F9 02 03 44 00 00 00    		mov.L	#.LC6, 12[r0]
 1264 08f5 05 00 00 00             		bsr	_printf
 1265 08f9 03                      		.balign 2,3,1
 1266                             	.L89:
 370:SOURCES/menu.c **** 	for( nCount = 0; nCount < nDisplayMnuLines; nCount++ )
 1267                             		.loc 1 370 0
 1268 08fa EC 6B                   		mov.L	[r6], r11
 1269 08fc 62 1B                   		add	#1, r11
 1270 08fe E3 6B                   		mov.L	r11, [r6]
 1271                             		.balign 2,3,1
 1272                             	.L84:
 370:SOURCES/menu.c **** 	for( nCount = 0; nCount < nDisplayMnuLines; nCount++ )
 1273                             		.loc 1 370 0 is_stmt 0 discriminator 1
 1274 0900 EC 6C                   		mov.L	[r6], r12
 1275 0902 ED 6B 04                		mov.L	16[r6], r11
 1276 0905 47 BC                   		cmp	r11, r12
 1277 0907 28 05 38 0F FE          		blt	.L98
 392:SOURCES/menu.c **** 		}
 393:SOURCES/menu.c **** 	}
 394:SOURCES/menu.c **** }
 1278                             		.loc 1 394 0 is_stmt 1
 1279 090c 3F 6D 1B                		rtsd	#108, r6-r13
 1280                             	.LFE9:
 1282                             		.global	_ShowTextSelectionMenu
 1284                             	_ShowTextSelectionMenu:
 1285                             	.LFB10:
 395:SOURCES/menu.c **** 
 396:SOURCES/menu.c **** void ShowTextSelectionMenu( int *nIndex, const char* txtHeader, sSelMenu *menuSelItems, int nMax, i
 397:SOURCES/menu.c **** {
 1286                             		.loc 1 397 0
 1287 090f 6E 6C                   		pushm	r6-r12
 1288                             	.LCFI29:
 1289 0911 71 06 E8                		add	#-24, r0, r6
 1290                             	.LCFI30:
 1291 0914 71 60 F8                		add	#-8, r6, r0
 1292                             	.LCFI31:
 1293 0917 75 4A 38                		mov.L	#56, r10
 1294 091a 4B 6A                   		add	r6, r10
 1295 091c E3 61                   		mov.L	r1, [r6]
 1296 091e A0 6A                   		mov.L	r2, 4[r6]
 1297 0920 A0 E3                   		mov.L	r3, 8[r6]
 1298 0922 A0 EC                   		mov.L	r4, 12[r6]
 398:SOURCES/menu.c **** 	cursor( NOWRAP );
 1299                             		.loc 1 398 0
 1300 0924 66 41                   		mov.L	#4, r1
 1301 0926 05 00 00 00             		bsr	_cursor
 399:SOURCES/menu.c **** 	putchar('\f');
 1302                             		.loc 1 399 0
 1303 092a FB B2 00 00 00 00       		mov.L	#__impure_ptr, r11
 1304 0930 EC BB                   		mov.L	[r11], r11
 1305 0932 ED BB 02                		mov.L	8[r11], r11
 1306 0935 ED BC 02                		mov.L	8[r11], r12
 1307 0938 60 1C                   		sub	#1, r12
 1308 093a E7 BC 02                		mov.L	r12, 8[r11]
 1309 093d ED BB 02                		mov.L	8[r11], r11
 1310 0940 61 0B                   		cmp	#0, r11
 1311 0942 29 05 38 99 00          		bge	.L100
 1312                             		.loc 1 399 0 is_stmt 0 discriminator 1
 1313 0947 FB B2 00 00 00 00       		mov.L	#__impure_ptr, r11
 1314 094d EC BB                   		mov.L	[r11], r11
 1315 094f ED BB 02                		mov.L	8[r11], r11
 1316 0952 ED BC 02                		mov.L	8[r11], r12
 1317 0955 FB B2 00 00 00 00       		mov.L	#__impure_ptr, r11
 1318 095b EC BB                   		mov.L	[r11], r11
 1319 095d ED BB 02                		mov.L	8[r11], r11
 1320 0960 ED BB 06                		mov.L	24[r11], r11
 1321 0963 47 BC                   		cmp	r11, r12
 1322 0965 29 59                   		blt	.L101
 1323                             		.loc 1 399 0 discriminator 3
 1324 0967 FB B2 00 00 00 00       		mov.L	#__impure_ptr, r11
 1325 096d EC BB                   		mov.L	[r11], r11
 1326 096f ED BB 02                		mov.L	8[r11], r11
 1327 0972 EC BB                   		mov.L	[r11], r11
 1328 0974 F8 B4 0C                		mov.B	#12, [r11]
 1329 0977 FB B2 00 00 00 00       		mov.L	#__impure_ptr, r11
 1330 097d EC BB                   		mov.L	[r11], r11
 1331 097f ED BB 02                		mov.L	8[r11], r11
 1332 0982 EC BB                   		mov.L	[r11], r11
 1333 0984 CC BB                   		mov.B	[r11], r11
 1334 0986 5B BB                   		movu.B	r11, r11
 1335 0988 61 AB                   		cmp	#10, r11
 1336 098a 20 15                   		beq	.L102
 1337                             		.loc 1 399 0 discriminator 5
 1338 098c FB B2 00 00 00 00       		mov.L	#__impure_ptr, r11
 1339 0992 EC BB                   		mov.L	[r11], r11
 1340 0994 ED BB 02                		mov.L	8[r11], r11
 1341 0997 EC BC                   		mov.L	[r11], r12
 1342 0999 62 1C                   		add	#1, r12
 1343 099b E3 BC                   		mov.L	r12, [r11]
 1344 099d 2E 65                   		bra	.L105
 1345                             	.L102:
 1346                             		.loc 1 399 0 discriminator 6
 1347 099f FB B2 00 00 00 00       		mov.L	#__impure_ptr, r11
 1348 09a5 EC BC                   		mov.L	[r11], r12
 1349 09a7 FB B2 00 00 00 00       		mov.L	#__impure_ptr, r11
 1350 09ad EC BB                   		mov.L	[r11], r11
 1351 09af ED BB 02                		mov.L	8[r11], r11
 1352 09b2 EF C1                   		mov.L	r12, r1
 1353 09b4 66 A2                   		mov.L	#10, r2
 1354 09b6 EF B3                   		mov.L	r11, r3
 1355 09b8 05 00 00 00             		bsr	___swbuf_r
 1356 09bc 2E 46                   		bra	.L105
 1357                             	.L101:
 1358                             		.loc 1 399 0 discriminator 4
 1359 09be FB B2 00 00 00 00       		mov.L	#__impure_ptr, r11
 1360 09c4 EC BC                   		mov.L	[r11], r12
 1361 09c6 FB B2 00 00 00 00       		mov.L	#__impure_ptr, r11
 1362 09cc EC BB                   		mov.L	[r11], r11
 1363 09ce ED BB 02                		mov.L	8[r11], r11
 1364 09d1 EF C1                   		mov.L	r12, r1
 1365 09d3 66 C2                   		mov.L	#12, r2
 1366 09d5 EF B3                   		mov.L	r11, r3
 1367 09d7 05 00 00 00             		bsr	___swbuf_r
 1368 09db 2E 27                   		bra	.L105
 1369                             	.L100:
 1370                             		.loc 1 399 0 discriminator 2
 1371 09dd FB B2 00 00 00 00       		mov.L	#__impure_ptr, r11
 1372 09e3 EC BB                   		mov.L	[r11], r11
 1373 09e5 ED BB 02                		mov.L	8[r11], r11
 1374 09e8 EC BB                   		mov.L	[r11], r11
 1375 09ea F8 B4 0C                		mov.B	#12, [r11]
 1376 09ed FB B2 00 00 00 00       		mov.L	#__impure_ptr, r11
 1377 09f3 EC BB                   		mov.L	[r11], r11
 1378 09f5 ED BB 02                		mov.L	8[r11], r11
 1379 09f8 EC BC                   		mov.L	[r11], r12
 1380 09fa 62 1C                   		add	#1, r12
 1381 09fc E3 BC                   		mov.L	r12, [r11]
 1382 09fe 2E 04                   		bra	.L105
 1383                             	.L109:
 400:SOURCES/menu.c **** 	for(;;)
 401:SOURCES/menu.c **** 	{
 402:SOURCES/menu.c **** 		if( SHOWHEADER( txtHeader ) )
 403:SOURCES/menu.c **** 			display_txt_header( nIndex, txtHeader, nMax, nOptions );
 404:SOURCES/menu.c **** 
 405:SOURCES/menu.c **** 		display_txt_menu_sel_lines( nIndex, menuSelItems, nMax, SHOWHEADER( txtHeader ), nOptions, lValue
 406:SOURCES/menu.c **** 
 407:SOURCES/menu.c **** 		if( get_txt_menu_sel_input( nIndex, menuSelItems, nMax, nOptions, lValue))
 408:SOURCES/menu.c **** 		{
 409:SOURCES/menu.c **** 			if( *nIndex == -1 )
 410:SOURCES/menu.c **** 				return;
 411:SOURCES/menu.c **** 		}
 412:SOURCES/menu.c **** 	}
 1384                             		.loc 1 412 0 is_stmt 1
 1385 0a00 03                      		nop
 1386 0a01 03                      		.balign 2,3,1
 1387                             	.L105:
 402:SOURCES/menu.c **** 		if( SHOWHEADER( txtHeader ) )
 1388                             		.loc 1 402 0
 1389 0a02 ED 6B 01                		mov.L	4[r6], r11
 1390 0a05 61 0B                   		cmp	#0, r11
 1391 0a07 20 0D                   		beq	.L106
 403:SOURCES/menu.c **** 			display_txt_header( nIndex, txtHeader, nMax, nOptions );
 1392                             		.loc 1 403 0
 1393 0a09 EC 61                   		mov.L	[r6], r1
 1394 0a0b A8 6A                   		mov.L	4[r6], r2
 1395 0a0d A8 EB                   		mov.L	12[r6], r3
 1396 0a0f EC A4                   		mov.L	[r10], r4
 1397 0a11 39 47 F6                		bsr	_display_txt_header
 1398                             		.balign 2,3,1
 1399                             	.L106:
 405:SOURCES/menu.c **** 		display_txt_menu_sel_lines( nIndex, menuSelItems, nMax, SHOWHEADER( txtHeader ), nOptions, lValue
 1400                             		.loc 1 405 0
 1401 0a14 ED 6B 01                		mov.L	4[r6], r11
 1402 0a17 61 0B                   		cmp	#0, r11
 1403 0a19 FC DB B1                		scne.L	r11
 1404 0a1c 5B BB                   		movu.B	r11, r11
 1405 0a1e EC AC                   		mov.L	[r10], r12
 1406 0a20 E3 0C                   		mov.L	r12, [r0]
 1407 0a22 ED AC 01                		mov.L	4[r10], r12
 1408 0a25 E7 0C 01                		mov.L	r12, 4[r0]
 1409 0a28 EC 61                   		mov.L	[r6], r1
 1410 0a2a A8 E2                   		mov.L	8[r6], r2
 1411 0a2c A8 EB                   		mov.L	12[r6], r3
 1412 0a2e EF B4                   		mov.L	r11, r4
 1413 0a30 39 63 FC                		bsr	_display_txt_menu_sel_lines
 407:SOURCES/menu.c **** 		if( get_txt_menu_sel_input( nIndex, menuSelItems, nMax, nOptions, lValue))
 1414                             		.loc 1 407 0
 1415 0a33 ED AB 01                		mov.L	4[r10], r11
 1416 0a36 E3 0B                   		mov.L	r11, [r0]
 1417 0a38 EC 61                   		mov.L	[r6], r1
 1418 0a3a A8 E2                   		mov.L	8[r6], r2
 1419 0a3c A8 EB                   		mov.L	12[r6], r3
 1420 0a3e EC A4                   		mov.L	[r10], r4
 1421 0a40 39 3D FB                		bsr	_get_txt_menu_sel_input
 1422 0a43 EF 1B                   		mov.L	r1, r11
 1423 0a45 61 0B                   		cmp	#0, r11
 1424 0a47 20 B9                   		beq	.L109
 409:SOURCES/menu.c **** 			if( *nIndex == -1 )
 1425                             		.loc 1 409 0
 1426 0a49 EC 6B                   		mov.L	[r6], r11
 1427 0a4b EC BB                   		mov.L	[r11], r11
 1428 0a4d 75 0B FF                		cmp	#-1, r11
 1429 0a50 21 B0                   		bne	.L109
 410:SOURCES/menu.c **** 				return;
 1430                             		.loc 1 410 0
 1431 0a52 03                      		nop
 413:SOURCES/menu.c **** }
 1432                             		.loc 1 413 0
 1433 0a53 3F 6C 0F                		rtsd	#60, r6-r12
 1434                             	.LFE10:
 1436                             		.global	_InitGraphMenu
 1438                             	_InitGraphMenu:
 1439                             	.LFB11:
 414:SOURCES/menu.c **** 
 415:SOURCES/menu.c **** #if !OPH1005
 416:SOURCES/menu.c **** // ===== Graphical menu images ============
 417:SOURCES/menu.c **** #if PHL | PX25
 418:SOURCES/menu.c **** // PHL1700 exit sign 20*20 pixels
 419:SOURCES/menu.c **** const unsigned char _exitsign[]=
 420:SOURCES/menu.c **** { 0x14, 0x14,
 421:SOURCES/menu.c ****  0x00, 0x00, 0x0F, 0x3F, 0xFF, 0xCF, 0x60, 0x00,
 422:SOURCES/menu.c ****  0x2F, 0x5A, 0xBB, 0xAF, 0x52, 0x91, 0x2F, 0x59,
 423:SOURCES/menu.c ****  0x11, 0x2F, 0x52, 0x91, 0x2F, 0x5A, 0xB9, 0x2F,
 424:SOURCES/menu.c ****  0x40, 0x00, 0x2F, 0x40, 0x00, 0x2F, 0x40, 0x3C,
 425:SOURCES/menu.c ****  0x2F, 0x40, 0x1C, 0x2F, 0x40, 0x3C, 0x2F, 0x40,
 426:SOURCES/menu.c ****  0x74, 0x2F, 0x40, 0xE0, 0x2F, 0x41, 0xC0, 0x2F,
 427:SOURCES/menu.c ****  0x43, 0x80, 0x2F, 0x40, 0x00, 0x2F, 0x3F, 0xFF,
 428:SOURCES/menu.c ****  0xCF, 0x00, 0x00, 0x0F,
 429:SOURCES/menu.c **** };
 430:SOURCES/menu.c **** 
 431:SOURCES/menu.c **** #elif OPH | OPH1004
 432:SOURCES/menu.c **** const unsigned char _exitsign[]=
 433:SOURCES/menu.c **** {
 434:SOURCES/menu.c ****  0x40, 0x40,
 435:SOURCES/menu.c ****  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 436:SOURCES/menu.c ****  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 437:SOURCES/menu.c ****  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 438:SOURCES/menu.c ****  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 439:SOURCES/menu.c ****  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 440:SOURCES/menu.c ****  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 441:SOURCES/menu.c ****  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 442:SOURCES/menu.c ****  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 443:SOURCES/menu.c ****  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 444:SOURCES/menu.c ****  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 445:SOURCES/menu.c ****  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 446:SOURCES/menu.c ****  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 447:SOURCES/menu.c ****  0x00, 0x00, 0x1F, 0xFF, 0xFF, 0xF8, 0x00, 0x00,
 448:SOURCES/menu.c ****  0x00, 0x00, 0x3F, 0xFF, 0xFF, 0xFC, 0x00, 0x00,
 449:SOURCES/menu.c ****  0x00, 0x00, 0x70, 0x00, 0x00, 0x0E, 0x00, 0x00,
 450:SOURCES/menu.c ****  0x00, 0x00, 0x60, 0x00, 0x00, 0x06, 0x00, 0x00,
 451:SOURCES/menu.c ****  0x00, 0x00, 0x67, 0xD9, 0xB7, 0xE6, 0x00, 0x00,
 452:SOURCES/menu.c ****  0x00, 0x00, 0x67, 0xD9, 0xB7, 0xE6, 0x00, 0x00,
 453:SOURCES/menu.c ****  0x00, 0x00, 0x66, 0x0F, 0x31, 0x86, 0x00, 0x00,
 454:SOURCES/menu.c ****  0x00, 0x00, 0x67, 0x86, 0x31, 0x86, 0x00, 0x00,
 455:SOURCES/menu.c ****  0x00, 0x00, 0x67, 0x86, 0x31, 0x86, 0x00, 0x00,
 456:SOURCES/menu.c ****  0x00, 0x00, 0x66, 0x0F, 0x31, 0x86, 0x00, 0x00,
 457:SOURCES/menu.c ****  0x00, 0x00, 0x67, 0xD9, 0xB1, 0x86, 0x00, 0x00,
 458:SOURCES/menu.c ****  0x00, 0x00, 0x67, 0xD9, 0xB1, 0x86, 0x00, 0x00,
 459:SOURCES/menu.c ****  0x00, 0x00, 0x60, 0x00, 0x00, 0x06, 0x00, 0x00,
 460:SOURCES/menu.c ****  0x00, 0x00, 0x60, 0x00, 0x00, 0x06, 0x00, 0x00,
 461:SOURCES/menu.c ****  0x00, 0x00, 0x60, 0x01, 0xFC, 0x06, 0x00, 0x00,
 462:SOURCES/menu.c ****  0x00, 0x00, 0x60, 0x00, 0xFC, 0x06, 0x00, 0x00,
 463:SOURCES/menu.c ****  0x00, 0x00, 0x60, 0x00, 0x7C, 0x06, 0x00, 0x00,
 464:SOURCES/menu.c ****  0x00, 0x00, 0x60, 0x00, 0xFC, 0x06, 0x00, 0x00,
 465:SOURCES/menu.c ****  0x00, 0x00, 0x60, 0x01, 0xFC, 0x06, 0x00, 0x00,
 466:SOURCES/menu.c ****  0x00, 0x00, 0x60, 0x03, 0xEC, 0x06, 0x00, 0x00,
 467:SOURCES/menu.c ****  0x00, 0x00, 0x60, 0x07, 0xC4, 0x06, 0x00, 0x00,
 468:SOURCES/menu.c ****  0x00, 0x00, 0x60, 0x0F, 0x80, 0x06, 0x00, 0x00,
 469:SOURCES/menu.c ****  0x00, 0x00, 0x60, 0x1F, 0x00, 0x06, 0x00, 0x00,
 470:SOURCES/menu.c ****  0x00, 0x00, 0x60, 0x3E, 0x00, 0x06, 0x00, 0x00,
 471:SOURCES/menu.c ****  0x00, 0x00, 0x60, 0x3C, 0x00, 0x06, 0x00, 0x00,
 472:SOURCES/menu.c ****  0x00, 0x00, 0x60, 0x18, 0x00, 0x06, 0x00, 0x00,
 473:SOURCES/menu.c ****  0x00, 0x00, 0x60, 0x00, 0x00, 0x06, 0x00, 0x00,
 474:SOURCES/menu.c ****  0x00, 0x00, 0x70, 0x00, 0x00, 0x0E, 0x00, 0x00,
 475:SOURCES/menu.c ****  0x00, 0x00, 0x3F, 0xFF, 0xFF, 0xFC, 0x00, 0x00,
 476:SOURCES/menu.c ****  0x00, 0x00, 0x1F, 0xFF, 0xFF, 0xF8, 0x00, 0x00,
 477:SOURCES/menu.c ****  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 478:SOURCES/menu.c ****  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 479:SOURCES/menu.c ****  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 480:SOURCES/menu.c ****  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 481:SOURCES/menu.c ****  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 482:SOURCES/menu.c ****  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 483:SOURCES/menu.c ****  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 484:SOURCES/menu.c ****  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 485:SOURCES/menu.c ****  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 486:SOURCES/menu.c ****  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 487:SOURCES/menu.c ****  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 488:SOURCES/menu.c ****  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 489:SOURCES/menu.c ****  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 490:SOURCES/menu.c ****  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 491:SOURCES/menu.c ****  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 492:SOURCES/menu.c ****  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 493:SOURCES/menu.c ****  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 494:SOURCES/menu.c ****  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 495:SOURCES/menu.c ****  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 496:SOURCES/menu.c ****  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 497:SOURCES/menu.c ****  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 498:SOURCES/menu.c ****  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 499:SOURCES/menu.c **** 
 500:SOURCES/menu.c **** };
 501:SOURCES/menu.c **** #else
 502:SOURCES/menu.c **** const unsigned char _exitsign[]=
 503:SOURCES/menu.c **** { 0x20, 0x20,
 504:SOURCES/menu.c ****  0x00, 0x00, 0x00, 0x00, 0x1F, 0xFF, 0xFF, 0xF8,
 505:SOURCES/menu.c ****  0x3F, 0xFF, 0xFF, 0xFC, 0x70, 0x00, 0x00, 0x0E,
 506:SOURCES/menu.c ****  0x60, 0x00, 0x00, 0x06, 0x67, 0xD9, 0xB7, 0xE6,
 507:SOURCES/menu.c ****  0x67, 0xD9, 0xB7, 0xE6, 0x66, 0x0F, 0x31, 0x86,
 508:SOURCES/menu.c ****  0x67, 0x86, 0x31, 0x86, 0x67, 0x86, 0x31, 0x86,
 509:SOURCES/menu.c ****  0x66, 0x0F, 0x31, 0x86, 0x67, 0xD9, 0xB1, 0x86,
 510:SOURCES/menu.c ****  0x67, 0xD9, 0xB1, 0x86, 0x60, 0x00, 0x00, 0x06,
 511:SOURCES/menu.c ****  0x60, 0x00, 0x00, 0x06, 0x60, 0x01, 0xFC, 0x06,
 512:SOURCES/menu.c ****  0x60, 0x00, 0xFC, 0x06, 0x60, 0x00, 0x7C, 0x06,
 513:SOURCES/menu.c ****  0x60, 0x00, 0xFC, 0x06, 0x60, 0x01, 0xFC, 0x06,
 514:SOURCES/menu.c ****  0x60, 0x03, 0xEC, 0x06, 0x60, 0x07, 0xC4, 0x06,
 515:SOURCES/menu.c ****  0x60, 0x0F, 0x80, 0x06, 0x60, 0x1F, 0x00, 0x06,
 516:SOURCES/menu.c ****  0x60, 0x3E, 0x00, 0x06, 0x60, 0x3C, 0x00, 0x06,
 517:SOURCES/menu.c ****  0x60, 0x18, 0x00, 0x06, 0x60, 0x00, 0x00, 0x06,
 518:SOURCES/menu.c ****  0x70, 0x00, 0x00, 0x0E, 0x3F, 0xFF, 0xFF, 0xFC,
 519:SOURCES/menu.c ****  0x1F, 0xFF, 0xFF, 0xF8, 0x00, 0x00, 0x00, 0x00,
 520:SOURCES/menu.c **** };
 521:SOURCES/menu.c **** #endif
 522:SOURCES/menu.c **** 
 523:SOURCES/menu.c **** const unsigned char _up_arrow[]=
 524:SOURCES/menu.c **** { 0x08, 0x08,
 525:SOURCES/menu.c ****  0x7E, 0xE7, 0xC3, 0x81, 0xE7, 0xE7, 0xE7, 0xFF,
 526:SOURCES/menu.c **** };
 527:SOURCES/menu.c **** 
 528:SOURCES/menu.c **** const unsigned char _down_arrow[]=
 529:SOURCES/menu.c **** { 0x08, 0x08,
 530:SOURCES/menu.c ****  0x7E, 0xE7, 0xE7, 0xE7, 0x81, 0xC3, 0xE7, 0xFF,
 531:SOURCES/menu.c **** };
 532:SOURCES/menu.c **** 
 533:SOURCES/menu.c **** 
 534:SOURCES/menu.c **** //
 535:SOURCES/menu.c **** // Change the select image for you own language
 536:SOURCES/menu.c **** // When you keep the name the same then the menu will
 537:SOURCES/menu.c **** // show it. keep the height to 8 pixels
 538:SOURCES/menu.c **** //
 539:SOURCES/menu.c **** const unsigned char _select[]=
 540:SOURCES/menu.c **** { 0x20, 0x08,
 541:SOURCES/menu.c ****  0x7F, 0xFF, 0xFF, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF,
 542:SOURCES/menu.c ****  0xC4, 0x2F, 0x0C, 0x41, 0xBD, 0xEF, 0x7B, 0xF7,
 543:SOURCES/menu.c ****  0xCC, 0x6F, 0x1B, 0xF7, 0xF5, 0xEF, 0x7B, 0xF7,
 544:SOURCES/menu.c ****  0x8C, 0x21, 0x0C, 0x77, 0xFF, 0xFF, 0xFF, 0xFF,
 545:SOURCES/menu.c **** };
 546:SOURCES/menu.c **** 
 547:SOURCES/menu.c **** #if PHL
 548:SOURCES/menu.c **** // checked and unchecked bitmaps for the selection menu
 549:SOURCES/menu.c **** // special 20*20 pixels for PHL1700
 550:SOURCES/menu.c **** const unsigned char _checked[]=
 551:SOURCES/menu.c **** { 0x14, 0x14,
 552:SOURCES/menu.c ****  0x00, 0x00, 0x0F, 0x7F, 0xFF, 0xEF, 0x40, 0x00,
 553:SOURCES/menu.c ****  0x2F, 0x40, 0x00, 0x2F, 0x40, 0x00, 0xAF, 0x40,
 554:SOURCES/menu.c ****  0x01, 0xAF, 0x40, 0x03, 0xAF, 0x40, 0x07, 0xAF,
 555:SOURCES/menu.c ****  0x58, 0x0F, 0xAF, 0x5C, 0x1F, 0x2F, 0x5E, 0x3E,
 556:SOURCES/menu.c ****  0x2F, 0x4F, 0x7C, 0x2F, 0x47, 0xF8, 0x2F, 0x43,
 557:SOURCES/menu.c ****  0xF0, 0x2F, 0x41, 0xE0, 0x2F, 0x40, 0xC0, 0x2F,
 558:SOURCES/menu.c ****  0x40, 0x00, 0x2F, 0x40, 0x00, 0x2F, 0x7F, 0xFF,
 559:SOURCES/menu.c ****  0xEF, 0x00, 0x00, 0x0F,
 560:SOURCES/menu.c **** };
 561:SOURCES/menu.c **** 
 562:SOURCES/menu.c **** const unsigned char _uncheck[]=
 563:SOURCES/menu.c **** { 0x14, 0x14,
 564:SOURCES/menu.c ****  0x00, 0x00, 0x0F, 0x7F, 0xFF, 0xEF, 0x40, 0x00,
 565:SOURCES/menu.c ****  0x2F, 0x40, 0x00, 0x2F, 0x40, 0x00, 0x2F, 0x40,
 566:SOURCES/menu.c ****  0x00, 0x2F, 0x40, 0x00, 0x2F, 0x40, 0x00, 0x2F,
 567:SOURCES/menu.c ****  0x40, 0x00, 0x2F, 0x40, 0x00, 0x2F, 0x40, 0x00,
 568:SOURCES/menu.c ****  0x2F, 0x40, 0x00, 0x2F, 0x40, 0x00, 0x2F, 0x40,
 569:SOURCES/menu.c ****  0x00, 0x2F, 0x40, 0x00, 0x2F, 0x40, 0x00, 0x2F,
 570:SOURCES/menu.c ****  0x40, 0x00, 0x2F, 0x40, 0x00, 0x2F, 0x7F, 0xFF,
 571:SOURCES/menu.c ****  0xEF, 0x00, 0x00, 0x0F,
 572:SOURCES/menu.c **** };
 573:SOURCES/menu.c **** 
 574:SOURCES/menu.c **** #else
 575:SOURCES/menu.c **** // checked and unchecked bitmaps for the selection menu
 576:SOURCES/menu.c **** const unsigned char _checked[]=
 577:SOURCES/menu.c **** { 0x20, 0x20,
 578:SOURCES/menu.c ****  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80,
 579:SOURCES/menu.c ****  0x00, 0x00, 0x01, 0xE0, 0x00, 0x00, 0x01, 0xF0,
 580:SOURCES/menu.c ****  0x00, 0x00, 0x03, 0xF8, 0x00, 0x00, 0x07, 0xF0,
 581:SOURCES/menu.c ****  0x00, 0x00, 0x07, 0xE0, 0x00, 0x00, 0x0F, 0xE0,
 582:SOURCES/menu.c ****  0x00, 0x00, 0x1F, 0xC0, 0x7F, 0xFF, 0xDF, 0x80,
 583:SOURCES/menu.c ****  0x7F, 0xFF, 0xBF, 0x00, 0x60, 0x00, 0x3E, 0x00,
 584:SOURCES/menu.c ****  0x66, 0x00, 0x7C, 0x00, 0x6F, 0x00, 0xFC, 0x00,
 585:SOURCES/menu.c ****  0x6F, 0x00, 0xF8, 0x00, 0x7F, 0x81, 0xF4, 0x00,
 586:SOURCES/menu.c ****  0x7F, 0x83, 0xEC, 0x00, 0x6F, 0xC3, 0xCC, 0x00,
 587:SOURCES/menu.c ****  0x67, 0xC7, 0xCC, 0x00, 0x63, 0xEF, 0x8C, 0x00,
 588:SOURCES/menu.c ****  0x63, 0xEF, 0x0C, 0x00, 0x61, 0xFE, 0x0C, 0x00,
 589:SOURCES/menu.c ****  0x60, 0xFC, 0x0C, 0x00, 0x60, 0xF8, 0x0C, 0x00,
 590:SOURCES/menu.c ****  0x60, 0x78, 0x0C, 0x00, 0x60, 0x70, 0x0C, 0x00,
 591:SOURCES/menu.c ****  0x60, 0x30, 0x0C, 0x00, 0x60, 0x20, 0x0C, 0x00,
 592:SOURCES/menu.c ****  0x60, 0x00, 0x0C, 0x00, 0x7F, 0xFF, 0xFC, 0x00,
 593:SOURCES/menu.c ****  0x7F, 0xFF, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00,
 594:SOURCES/menu.c **** };
 595:SOURCES/menu.c **** 
 596:SOURCES/menu.c **** const unsigned char _uncheck[]=
 597:SOURCES/menu.c **** { 0x20, 0x20,
 598:SOURCES/menu.c ****  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 599:SOURCES/menu.c ****  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 600:SOURCES/menu.c ****  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 601:SOURCES/menu.c ****  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 602:SOURCES/menu.c ****  0x00, 0x00, 0x00, 0x00, 0x7F, 0xFF, 0xFC, 0x00,
 603:SOURCES/menu.c ****  0x7F, 0xFF, 0xFC, 0x00, 0x60, 0x00, 0x0C, 0x00,
 604:SOURCES/menu.c ****  0x60, 0x00, 0x0C, 0x00, 0x60, 0x00, 0x0C, 0x00,
 605:SOURCES/menu.c ****  0x60, 0x00, 0x0C, 0x00, 0x60, 0x00, 0x0C, 0x00,
 606:SOURCES/menu.c ****  0x60, 0x00, 0x0C, 0x00, 0x60, 0x00, 0x0C, 0x00,
 607:SOURCES/menu.c ****  0x60, 0x00, 0x0C, 0x00, 0x60, 0x00, 0x0C, 0x00,
 608:SOURCES/menu.c ****  0x60, 0x00, 0x0C, 0x00, 0x60, 0x00, 0x0C, 0x00,
 609:SOURCES/menu.c ****  0x60, 0x00, 0x0C, 0x00, 0x60, 0x00, 0x0C, 0x00,
 610:SOURCES/menu.c ****  0x60, 0x00, 0x0C, 0x00, 0x60, 0x00, 0x0C, 0x00,
 611:SOURCES/menu.c ****  0x60, 0x00, 0x0C, 0x00, 0x60, 0x00, 0x0C, 0x00,
 612:SOURCES/menu.c ****  0x60, 0x00, 0x0C, 0x00, 0x7F, 0xFF, 0xFC, 0x00,
 613:SOURCES/menu.c ****  0x7F, 0xFF, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00,
 614:SOURCES/menu.c **** };
 615:SOURCES/menu.c **** #endif
 616:SOURCES/menu.c **** #endif
 617:SOURCES/menu.c **** 
 618:SOURCES/menu.c **** // ===== Graphical menu implementation =====
 619:SOURCES/menu.c **** 
 620:SOURCES/menu.c **** //=========================================================
 621:SOURCES/menu.c **** // VERY IMPORTANT !!!
 622:SOURCES/menu.c **** // THIS FUNCTION NEEDS TO BE PLACED IN THE BEGINNING
 623:SOURCES/menu.c **** // OF THE MAIN LOOP.
 624:SOURCES/menu.c **** //
 625:SOURCES/menu.c **** // This clears the menu layer array counter
 626:SOURCES/menu.c **** //=========================================================
 627:SOURCES/menu.c **** void InitGraphMenu( void )
 628:SOURCES/menu.c **** {
 1440                             		.loc 1 628 0
 1441 0a56 7E A6                   		push.l	r6
 1442                             	.LCFI32:
 1443 0a58 EF 06                   		mov.L	r0, r6
 1444                             	.LCFI33:
 629:SOURCES/menu.c **** 	memset( menu_layers, 0, MAX_LAYERS );
 1445                             		.loc 1 629 0
 1446 0a5a FB 12 00 00 00 00       		mov.L	#_menu_layers, r1
 1447 0a60 66 02                   		mov.L	#0, r2
 1448 0a62 66 A3                   		mov.L	#10, r3
 1449 0a64 05 00 00 00             		bsr	_memset
 630:SOURCES/menu.c **** }
 1450                             		.loc 1 630 0
 1451 0a68 3F 66 01                		rtsd	#4, r6-r6
 1452                             	.LFE11:
 1454                             		.global	_GraphIncLayer
 1456                             	_GraphIncLayer:
 1457                             	.LFB12:
 631:SOURCES/menu.c **** 
 632:SOURCES/menu.c **** // Add a new item to the layer counter
 633:SOURCES/menu.c **** int GraphIncLayer( int nSelect )
 634:SOURCES/menu.c **** {
 1458                             		.loc 1 634 0
 1459 0a6b 6E 6C                   		pushm	r6-r12
 1460                             	.LCFI34:
 1461 0a6d 71 06 F8                		add	#-8, r0, r6
 1462                             	.LCFI35:
 1463 0a70 EF 60                   		mov.L	r6, r0
 1464                             	.LCFI36:
 1465 0a72 A0 69                   		mov.L	r1, 4[r6]
 635:SOURCES/menu.c **** 	int x;
 636:SOURCES/menu.c **** 	// Find an empty spot in the menu_layer
 637:SOURCES/menu.c **** 	for( x = 0; x < MAX_LAYERS; x++ )
 1466                             		.loc 1 637 0
 1467 0a74 3E 60 00                		mov.L	#0, [r6]
 1468 0a77 2E 29                   		bra	.L112
 1469                             	.L115:
 638:SOURCES/menu.c **** 	{
 639:SOURCES/menu.c **** 		if( menu_layers[ x ] == 0 )
 1470                             		.loc 1 639 0
 1471 0a79 FB A2 00 00 00 00       		mov.L	#_menu_layers, r10
 1472 0a7f EC 6B                   		mov.L	[r6], r11
 1473 0a81 FE 6B AA                		mov.L	[r11,r10], r10
 1474 0a84 61 0A                   		cmp	#0, r10
 1475 0a86 21 14                   		bne	.L113
 640:SOURCES/menu.c **** 		{
 641:SOURCES/menu.c **** 			menu_layers[ x ] = nSelect;	// Set the new layer item
 1476                             		.loc 1 641 0
 1477 0a88 FB A2 00 00 00 00       		mov.L	#_menu_layers, r10
 1478 0a8e EC 6B                   		mov.L	[r6], r11
 1479 0a90 ED 6C 01                		mov.L	4[r6], r12
 1480 0a93 FE 2B AC                		mov.L	r12, [r11,r10]
 642:SOURCES/menu.c **** 			return TRUE;
 1481                             		.loc 1 642 0
 1482 0a96 66 1A                   		mov.L	#1, r10
 1483 0a98 2E 10                   		bra	.L114
 1484                             	.L113:
 637:SOURCES/menu.c **** 	for( x = 0; x < MAX_LAYERS; x++ )
 1485                             		.loc 1 637 0
 1486 0a9a EC 6A                   		mov.L	[r6], r10
 1487 0a9c 62 1A                   		add	#1, r10
 1488 0a9e E3 6A                   		mov.L	r10, [r6]
 1489                             		.balign 2,3,1
 1490                             	.L112:
 637:SOURCES/menu.c **** 	for( x = 0; x < MAX_LAYERS; x++ )
 1491                             		.loc 1 637 0 is_stmt 0 discriminator 1
 1492 0aa0 EC 6A                   		mov.L	[r6], r10
 1493 0aa2 61 9A                   		cmp	#9, r10
 1494 0aa4 2B D5                   		ble	.L115
 643:SOURCES/menu.c **** 		}
 644:SOURCES/menu.c **** 	}
 645:SOURCES/menu.c **** 	return FALSE; // Not enough layers for the menu
 1495                             		.loc 1 645 0 is_stmt 1
 1496 0aa6 66 0A                   		mov.L	#0, r10
 1497                             		.balign 2,3,1
 1498                             	.L114:
 646:SOURCES/menu.c **** }
 1499                             		.loc 1 646 0
 1500 0aa8 EF A1                   		mov.L	r10, r1
 1501 0aaa 3F 6C 09                		rtsd	#36, r6-r12
 1502                             	.LFE12:
 1504                             		.section C,"a",@progbits
 1505 0066 00 00                   		.p2align 2
 1506                             	.LC9:
 1507 0068 25 64 00                		.string	"%d"
 1508                             		.section P,"ax"
 1510                             	_build_layer_string:
 1511                             	.LFB13:
 647:SOURCES/menu.c **** 
 648:SOURCES/menu.c **** static int build_layer_string( char* string )
 649:SOURCES/menu.c **** {
 1512                             		.loc 1 649 0
 1513 0aad 6E 6B                   		pushm	r6-r11
 1514                             	.LCFI37:
 1515 0aaf 71 06 F4                		add	#-12, r0, r6
 1516                             	.LCFI38:
 1517 0ab2 71 60 F8                		add	#-8, r6, r0
 1518                             	.LCFI39:
 1519 0ab5 A0 E1                   		mov.L	r1, 8[r6]
 650:SOURCES/menu.c **** 	int x;
 651:SOURCES/menu.c **** 	static char tmp[ 3 ];
 652:SOURCES/menu.c **** 	char *ptr;
 653:SOURCES/menu.c **** 
 654:SOURCES/menu.c **** 	string[0] = '\0';
 1520                             		.loc 1 654 0
 1521 0ab7 ED 6A 02                		mov.L	8[r6], r10
 1522 0aba F8 A4 00                		mov.B	#0, [r10]
 655:SOURCES/menu.c **** 	for( x = 0; x < MAX_LAYERS; x++ )
 1523                             		.loc 1 655 0
 1524 0abd 3E 60 00                		mov.L	#0, [r6]
 1525 0ac0 38 84 00                		bra	.L117
 1526                             	.L121:
 656:SOURCES/menu.c **** 	{
 657:SOURCES/menu.c **** 		if( menu_layers[ x ] == 0 )
 1527                             		.loc 1 657 0
 1528 0ac3 FB A2 00 00 00 00       		mov.L	#_menu_layers, r10
 1529 0ac9 EC 6B                   		mov.L	[r6], r11
 1530 0acb FE 6B AA                		mov.L	[r11,r10], r10
 1531 0ace 61 0A                   		cmp	#0, r10
 1532 0ad0 19                      		bne	.L118
 658:SOURCES/menu.c **** 		{
 659:SOURCES/menu.c **** 			x--;
 1533                             		.loc 1 659 0
 1534 0ad1 EC 6A                   		mov.L	[r6], r10
 1535 0ad3 60 1A                   		sub	#1, r10
 1536 0ad5 E3 6A                   		mov.L	r10, [r6]
 660:SOURCES/menu.c **** 			break;
 1537                             		.loc 1 660 0
 1538 0ad7 2E 77                   		bra	.L119
 1539                             	.L118:
 661:SOURCES/menu.c **** 		}
 662:SOURCES/menu.c **** 
 663:SOURCES/menu.c **** 		if( strlen( string ) > 0 )
 1540                             		.loc 1 663 0
 1541 0ad9 ED 6A 02                		mov.L	8[r6], r10
 1542 0adc CC AA                   		mov.B	[r10], r10
 1543 0ade 5B AA                   		movu.B	r10, r10
 1544 0ae0 61 0A                   		cmp	#0, r10
 1545 0ae2 20 12                   		beq	.L120
 664:SOURCES/menu.c **** 			strcat( string, "-" );	// a submenu add a separator marker
 1546                             		.loc 1 664 0
 1547 0ae4 A8 E1                   		mov.L	8[r6], r1
 1548 0ae6 05 00 00 00             		bsr	_strlen
 1549 0aea EF 1A                   		mov.L	r1, r10
 1550 0aec ED 6B 02                		mov.L	8[r6], r11
 1551 0aef 4B BA                   		add	r11, r10
 1552 0af1 F8 A5 2D                		mov.W	#45, [r10]
 1553                             		.balign 2,3,5
 1554                             	.L120:
 665:SOURCES/menu.c **** 
 666:SOURCES/menu.c **** 		sprintf( tmp, "%d", menu_layers[ x ] );
 1555                             		.loc 1 666 0
 1556 0af4 FB A2 00 00 00 00       		mov.L	#_menu_layers, r10
 1557 0afa EC 6B                   		mov.L	[r6], r11
 1558 0afc FE 6B AA                		mov.L	[r11,r10], r10
 1559 0aff F8 02 68 00 00 00       		mov.L	#.LC9, [r0]
 1560 0b05 E7 0A 01                		mov.L	r10, 4[r0]
 1561 0b08 FB 12 64 00 00 00       		mov.L	#_tmp.3727, r1
 1562 0b0e 05 00 00 00             		bsr	_sprintf
 667:SOURCES/menu.c **** 		strcat( string, tmp );
 1563                             		.loc 1 667 0
 1564 0b12 A8 E1                   		mov.L	8[r6], r1
 1565 0b14 05 00 00 00             		bsr	_strlen
 1566 0b18 EF 1A                   		mov.L	r1, r10
 1567 0b1a ED 6B 02                		mov.L	8[r6], r11
 1568 0b1d 4B AB                   		add	r10, r11
 1569 0b1f FB A2 64 00 00 00       		mov.L	#_tmp.3727, r10
 1570 0b25 FB 36 FF                		mov.L	#-1, r3
 1571 0b28 EF B1                   		mov.L	r11, r1
 1572 0b2a EF A2                   		mov.L	r10, r2
 1573 0b2c EF 1A                   		mov.L	r1, r10
 1574 0b2e 7F 87                   		smovu
 1575 0b30 FB 36 FF                		mov.L	#-1, r3
 1576 0b33 EF A1                   		mov	r10, r1
 1577 0b35 66 02                   		mov	#0, r2
 1578 0b37 7F 80                   		suntil.b
 1579 0b39 EF 1A                   		mov	r1, r10
 1580 0b3b 60 1A                   		sub	#1, r10
 655:SOURCES/menu.c **** 	for( x = 0; x < MAX_LAYERS; x++ )
 1581                             		.loc 1 655 0
 1582 0b3d EC 6A                   		mov.L	[r6], r10
 1583 0b3f 62 1A                   		add	#1, r10
 1584 0b41 E3 6A                   		mov.L	r10, [r6]
 1585 0b43 03                      		.balign 2,3,1
 1586                             	.L117:
 655:SOURCES/menu.c **** 	for( x = 0; x < MAX_LAYERS; x++ )
 1587                             		.loc 1 655 0 is_stmt 0 discriminator 1
 1588 0b44 EC 6A                   		mov.L	[r6], r10
 1589 0b46 61 9A                   		cmp	#9, r10
 1590 0b48 2A 05 38 79 FF          		ble	.L121
 1591 0b4d 03                      		.balign 2,3,1
 1592                             	.L119:
 668:SOURCES/menu.c **** 	}
 669:SOURCES/menu.c **** 	ptr = strrchr( string, '-');
 1593                             		.loc 1 669 0 is_stmt 1
 1594 0b4e A8 E1                   		mov.L	8[r6], r1
 1595 0b50 75 42 2D                		mov.L	#45, r2
 1596 0b53 05 00 00 00             		bsr	_strrchr
 1597 0b57 A0 69                   		mov.L	r1, 4[r6]
 670:SOURCES/menu.c **** 	if( ptr )
 1598                             		.loc 1 670 0
 1599 0b59 ED 6A 01                		mov.L	4[r6], r10
 1600 0b5c 61 0A                   		cmp	#0, r10
 1601 0b5e 20 14                   		beq	.L122
 671:SOURCES/menu.c **** 		string[ ptr-string ] = '\0';
 1602                             		.loc 1 671 0
 1603 0b60 ED 6B 01                		mov.L	4[r6], r11
 1604 0b63 ED 6A 02                		mov.L	8[r6], r10
 1605 0b66 FF 0A AB                		sub	r10, r11, r10
 1606 0b69 ED 6B 02                		mov.L	8[r6], r11
 1607 0b6c 4B BA                   		add	r11, r10
 1608 0b6e F8 A4 00                		mov.B	#0, [r10]
 1609 0b71 0F                      		bra	.L123
 1610                             	.L122:
 672:SOURCES/menu.c **** 	else
 673:SOURCES/menu.c **** 		string[0] = '\0';
 1611                             		.loc 1 673 0
 1612 0b72 ED 6A 02                		mov.L	8[r6], r10
 1613 0b75 F8 A4 00                		mov.B	#0, [r10]
 1614                             		.balign 2,3,1
 1615                             	.L123:
 674:SOURCES/menu.c **** 
 675:SOURCES/menu.c **** 	return x;
 1616                             		.loc 1 675 0
 1617 0b78 EC 6A                   		mov.L	[r6], r10
 676:SOURCES/menu.c **** }
 1618                             		.loc 1 676 0
 1619 0b7a EF A1                   		mov.L	r10, r1
 1620 0b7c 3F 6B 0B                		rtsd	#44, r6-r11
 1621                             	.LFE13:
 1624                             	_display_layer:
 1625                             	.LFB14:
 677:SOURCES/menu.c **** 
 678:SOURCES/menu.c **** static void display_layer( char *string, int current )
 679:SOURCES/menu.c **** {
 1626                             		.loc 1 679 0
 1627 0b7f 7E A6                   		push.l	r6
 1628                             	.LCFI40:
 1629 0b81 71 06 F8                		add	#-8, r0, r6
 1630                             	.LCFI41:
 1631 0b84 EF 60                   		mov.L	r6, r0
 1632                             	.LCFI42:
 1633 0b86 E3 61                   		mov.L	r1, [r6]
 1634 0b88 A0 6A                   		mov.L	r2, 4[r6]
 680:SOURCES/menu.c **** #if !OPH1005
 681:SOURCES/menu.c **** 	int nMaxX;
 682:SOURCES/menu.c **** 
 683:SOURCES/menu.c **** 	gotoxy(0,0);
 684:SOURCES/menu.c **** 	setfont( SMALL_FONT, NULL );
 685:SOURCES/menu.c **** 	nMaxX = GetMaxCharsXPos();
 686:SOURCES/menu.c **** 	nMaxX -= 3; // keep some additional space for the last '-' and current value
 687:SOURCES/menu.c **** 	printf("%*.*s%c%-2d", nMaxX, nMaxX, string, string[0]?'-':' ', current );
 688:SOURCES/menu.c **** #endif
 689:SOURCES/menu.c **** }
 1635                             		.loc 1 689 0
 1636 0b8a 3F 66 03                		rtsd	#12, r6-r6
 1637                             	.LFE14:
 1639                             		.section C,"a",@progbits
 1640 006b 00                      		.p2align 2
 1641                             	.LC10:
 1642 006c 25 2A 73 25 2D 2A 2E 2A 		.string	"%*s%-*.*s"
 1642      73 00 
 1643                             		.section P,"ax"
 1645                             	_display_menu_item_text:
 1646                             	.LFB15:
 690:SOURCES/menu.c **** 
 691:SOURCES/menu.c **** 
 692:SOURCES/menu.c **** static void display_menu_item_text( char *string )
 693:SOURCES/menu.c **** {
 1647                             		.loc 1 693 0
 1648 0b8d 6E 6B                   		pushm	r6-r11
 1649                             	.LCFI43:
 1650 0b8f 71 06 F8                		add	#-8, r0, r6
 1651                             	.LCFI44:
 1652 0b92 71 60 E8                		add	#-24, r6, r0
 1653                             	.LCFI45:
 1654 0b95 A0 69                   		mov.L	r1, 4[r6]
 694:SOURCES/menu.c **** 	int nMaxX;
 695:SOURCES/menu.c **** #if OPH1005
 696:SOURCES/menu.c **** 	setfont(USER_FONT,(char*)_vga_15_32);
 1655                             		.loc 1 696 0
 1656 0b97 66 61                   		mov.L	#6, r1
 1657 0b99 FB 22 00 00 00 00       		mov.L	#__vga_15_32, r2
 1658 0b9f 05 00 00 00             		bsr	_setfont
 697:SOURCES/menu.c **** 	nMaxX = GetMaxCharsXPos();
 1659                             		.loc 1 697 0
 1660 0ba3 39 5D F4                		bsr	_GetMaxCharsXPos
 1661 0ba6 E3 61                   		mov.L	r1, [r6]
 698:SOURCES/menu.c **** #else
 699:SOURCES/menu.c **** 	setfont( LARGE_FONT, NULL );
 700:SOURCES/menu.c **** 	nMaxX = GetMaxCharsXPos()-1; // leave some space for the progress bar
 701:SOURCES/menu.c **** #endif
 702:SOURCES/menu.c **** 
 703:SOURCES/menu.c **** 
 704:SOURCES/menu.c **** #if PHL|PHL1000
 705:SOURCES/menu.c **** 	systemsetting("-1");	// enable CLT gotoxy mode
 706:SOURCES/menu.c **** 	gotoxy(0,2);
 707:SOURCES/menu.c **** #elif PHL2700
 708:SOURCES/menu.c **** 	systemsetting("-1");	// enable CLT gotoxy mode
 709:SOURCES/menu.c **** 	gotoxy(0,3);
 710:SOURCES/menu.c **** #else
 711:SOURCES/menu.c **** 	gotoxy(0,0);
 1662                             		.loc 1 711 0
 1663 0ba8 66 01                   		mov.L	#0, r1
 1664 0baa 66 02                   		mov.L	#0, r2
 1665 0bac 05 00 00 00             		bsr	_gotoxy
 712:SOURCES/menu.c **** #if !OPH1005
 713:SOURCES/menu.c **** 	set_offset(8);
 714:SOURCES/menu.c **** #endif
 715:SOURCES/menu.c **** #endif
 716:SOURCES/menu.c **** 
 717:SOURCES/menu.c **** #ifdef OPH1005
 718:SOURCES/menu.c **** 	printf("%*s%-*.*s",(nMaxX-(int)strlen(string))/2," ",nMaxX,nMaxX,string);
 1666                             		.loc 1 718 0
 1667 0bb0 A8 69                   		mov.L	4[r6], r1
 1668 0bb2 05 00 00 00             		bsr	_strlen
 1669 0bb6 EF 1A                   		mov.L	r1, r10
 1670 0bb8 EC 6B                   		mov.L	[r6], r11
 1671 0bba FF 0A AB                		sub	r10, r11, r10
 1672 0bbd FD 9F AB                		shlr	#31, r10, r11
 1673 0bc0 4B BA                   		add	r11, r10
 1674 0bc2 6A 1A                   		shar	#1, r10
 1675 0bc4 F8 02 6C 00 00 00       		mov.L	#.LC10, [r0]
 1676 0bca E7 0A 01                		mov.L	r10, 4[r0]
 1677 0bcd F9 02 02 44 00 00 00    		mov.L	#.LC6, 8[r0]
 1678 0bd4 EC 6A                   		mov.L	[r6], r10
 1679 0bd6 E7 0A 03                		mov.L	r10, 12[r0]
 1680 0bd9 EC 6A                   		mov.L	[r6], r10
 1681 0bdb E7 0A 04                		mov.L	r10, 16[r0]
 1682 0bde ED 6A 01                		mov.L	4[r6], r10
 1683 0be1 E7 0A 05                		mov.L	r10, 20[r0]
 1684 0be4 05 00 00 00             		bsr	_printf
 719:SOURCES/menu.c **** #else
 720:SOURCES/menu.c **** 	printf("%-*.*s", nMaxX, nMaxX, string );
 721:SOURCES/menu.c **** #endif
 722:SOURCES/menu.c **** 
 723:SOURCES/menu.c **** #if PHL|PHL1000|PHL2700
 724:SOURCES/menu.c **** 	systemsetting("-0");	// disable CLT gotoxy mode
 725:SOURCES/menu.c **** #elif !OPH1005
 726:SOURCES/menu.c **** 	set_offset(0);
 727:SOURCES/menu.c **** #endif
 728:SOURCES/menu.c **** }
 1685                             		.loc 1 728 0
 1686 0be8 3F 6B 0E                		rtsd	#56, r6-r11
 1687                             	.LFE15:
 1690                             	_display_image:
 1691                             	.LFB16:
 729:SOURCES/menu.c **** 
 730:SOURCES/menu.c **** static void display_image( unsigned char *picture )
 731:SOURCES/menu.c **** {
 1692                             		.loc 1 731 0
 1693 0beb 7E AA                   		push.l	r10
 1694                             	.LCFI46:
 1695 0bed 7E A6                   		push.l	r6
 1696                             	.LCFI47:
 1697 0bef 71 06 FC                		add	#-4, r0, r6
 1698                             	.LCFI48:
 1699 0bf2 EF 60                   		mov.L	r6, r0
 1700                             	.LCFI49:
 1701 0bf4 E3 61                   		mov.L	r1, [r6]
 732:SOURCES/menu.c **** 	if( picture == NULL )
 1702                             		.loc 1 732 0
 1703 0bf6 EC 6A                   		mov.L	[r6], r10
 1704 0bf8 61 0A                   		cmp	#0, r10
 1705 0bfa 21 16                   		bne	.L128
 733:SOURCES/menu.c **** 	{
 734:SOURCES/menu.c **** #if OPH1005
 735:SOURCES/menu.c **** 			ShowJPG( 20, 40, WRITE_TO_SCREEN, (unsigned char *)_exit_pic );
 1706                             		.loc 1 735 0
 1707 0bfc 75 41 14                		mov.L	#20, r1
 1708 0bff 75 42 28                		mov.L	#40, r2
 1709 0c02 66 03                   		mov	#0, r3
 1710 0c04 FB 42 00 00 00 00       		mov.L	#__exit_pic, r4
 1711 0c0a 05 00 00 00             		bsr	_ShowJPG
 1712 0c0e 2E 34                   		bra	.L127
 1713                             	.L128:
 736:SOURCES/menu.c **** #elif PHL
 737:SOURCES/menu.c **** 			showpicture( (DISP_WIDTH >> 1)- (_exitsign[1] >> 1), (DISP_HEIGHT >> 1)-5, (const unsigned char*
 738:SOURCES/menu.c **** #elif OPH | OPH1004 | OPH1005
 739:SOURCES/menu.c **** 			showpicture( (DISP_WIDTH >> 1)- (_exitsign[1] >> 1 ), (DISP_HEIGHT >> 1)-25, (const unsigned cha
 740:SOURCES/menu.c **** #else
 741:SOURCES/menu.c **** 			showpicture( (DISP_WIDTH >> 1)- (_exitsign[1] >> 1), (DISP_HEIGHT >> 1)-8, (const unsigned char*
 742:SOURCES/menu.c **** #endif
 743:SOURCES/menu.c **** 	}
 744:SOURCES/menu.c **** 	else if (picture == _checked || picture == _uncheck)
 1714                             		.loc 1 744 0
 1715 0c10 EC 6A                   		mov.L	[r6], r10
 1716 0c12 74 0A 00 00 00 00       		cmp	#__checked, r10
 1717 0c18 20 0C                   		beq	.L130
 1718                             		.loc 1 744 0 is_stmt 0 discriminator 1
 1719 0c1a EC 6A                   		mov.L	[r6], r10
 1720 0c1c 74 0A 00 00 00 00       		cmp	#__uncheck, r10
 1721 0c22 21 12                   		bne	.L131
 1722                             		.balign 2,3,2
 1723                             	.L130:
 745:SOURCES/menu.c **** 	{
 746:SOURCES/menu.c **** #if OPH1005
 747:SOURCES/menu.c **** 			ShowJPG( 20, 40, WRITE_TO_SCREEN, (unsigned char *) picture);
 1724                             		.loc 1 747 0 is_stmt 1
 1725 0c24 75 41 14                		mov.L	#20, r1
 1726 0c27 75 42 28                		mov.L	#40, r2
 1727 0c2a 66 03                   		mov	#0, r3
 1728 0c2c EC 64                   		mov.L	[r6], r4
 1729 0c2e 05 00 00 00             		bsr	_ShowJPG
 1730 0c32 2E 10                   		bra	.L127
 1731                             	.L131:
 748:SOURCES/menu.c **** #elif OPH | OPH1004
 749:SOURCES/menu.c **** 			showpicture( (DISP_WIDTH >> 1)- (picture[1] >> 1 ), (DISP_HEIGHT >> 1)-15, (const unsigned char*
 750:SOURCES/menu.c **** #elif PHL
 751:SOURCES/menu.c **** 			showpicture( (DISP_WIDTH >> 1)- (picture[1] >> 1 ), (DISP_HEIGHT >> 1)-5, (const unsigned char*)
 752:SOURCES/menu.c **** #else
 753:SOURCES/menu.c **** 			showpicture( (DISP_WIDTH >> 1)- (picture[1] >> 1 ), (DISP_HEIGHT >> 1)-8, (const unsigned char*)
 754:SOURCES/menu.c **** #endif
 755:SOURCES/menu.c **** 	}
 756:SOURCES/menu.c **** 	else
 757:SOURCES/menu.c **** 	{
 758:SOURCES/menu.c **** #if OPH1005
 759:SOURCES/menu.c **** 			ShowJPG( 20, 40, WRITE_TO_SCREEN, (unsigned char *)picture );
 1732                             		.loc 1 759 0
 1733 0c34 75 41 14                		mov.L	#20, r1
 1734 0c37 75 42 28                		mov.L	#40, r2
 1735 0c3a 66 03                   		mov	#0, r3
 1736 0c3c EC 64                   		mov.L	[r6], r4
 1737 0c3e 05 00 00 00             		bsr	_ShowJPG
 1738                             		.balign 2,3,1
 1739                             	.L127:
 760:SOURCES/menu.c **** #elif PHL
 761:SOURCES/menu.c **** 			showpicture( (DISP_WIDTH >> 1)- (picture[1] >> 1 ), (DISP_HEIGHT >> 1)-5, (const unsigned char*)
 762:SOURCES/menu.c **** #elif OPH | OPH1004
 763:SOURCES/menu.c **** 			showpicture( (DISP_WIDTH >> 1)- (picture[1] >> 1 ), (DISP_HEIGHT >> 1)-25, (const unsigned char*
 764:SOURCES/menu.c **** #else
 765:SOURCES/menu.c **** 			showpicture( (DISP_WIDTH >> 1)- (picture[1] >> 1 ), (DISP_HEIGHT >> 1)-8, (const unsigned char*)
 766:SOURCES/menu.c **** #endif
 767:SOURCES/menu.c **** 	}
 768:SOURCES/menu.c **** }
 1740                             		.loc 1 768 0
 1741 0c42 62 40                   		add	#4, r0
 1742 0c44 7E B6                   		pop	r6
 1743 0c46 7E BA                   		pop	r10
 1744 0c48 02                      		rts
 1745                             	.LFE16:
 1747                             		.section C,"a",@progbits
 1748 0076 00 00                   		.p2align 2
 1749                             	.LC11:
 1750 0078 53 45 4C 45 43 54 00    		.string	"SELECT"
 1751 007f 00                      		.section P,"ax"
 1753                             	_display_selection_bar:
 1754                             	.LFB17:
 769:SOURCES/menu.c **** 
 770:SOURCES/menu.c **** static void display_selection_bar(void )
 771:SOURCES/menu.c **** {
 1755                             		.loc 1 771 0
 1756 0c49 7E A6                   		push.l	r6
 1757                             	.LCFI50:
 1758 0c4b EF 06                   		mov.L	r0, r6
 1759                             	.LCFI51:
 1760 0c4d 60 40                   		sub	#4, r0
 772:SOURCES/menu.c **** 	// Show the up arrow
 773:SOURCES/menu.c **** #ifdef OPH1005
 774:SOURCES/menu.c **** 
 775:SOURCES/menu.c **** 	gotoxy(0,9);
 1761                             		.loc 1 775 0
 1762 0c4f 66 01                   		mov.L	#0, r1
 1763 0c51 66 92                   		mov.L	#9, r2
 1764 0c53 05 00 00 00             		bsr	_gotoxy
 776:SOURCES/menu.c **** 	printf("%c",24);
 1765                             		.loc 1 776 0
 1766 0c57 75 41 18                		mov.L	#24, r1
 1767 0c5a 05 00 00 00             		bsr	_putchar
 777:SOURCES/menu.c **** 	gotoxy(5,9);
 1768                             		.loc 1 777 0
 1769 0c5e 66 51                   		mov.L	#5, r1
 1770 0c60 66 92                   		mov.L	#9, r2
 1771 0c62 05 00 00 00             		bsr	_gotoxy
 778:SOURCES/menu.c **** 	printf("SELECT");
 1772                             		.loc 1 778 0
 1773 0c66 F8 02 78 00 00 00       		mov.L	#.LC11, [r0]
 1774 0c6c 05 00 00 00             		bsr	_printf
 779:SOURCES/menu.c **** 	gotoxy(15,9);
 1775                             		.loc 1 779 0
 1776 0c70 66 F1                   		mov.L	#15, r1
 1777 0c72 66 92                   		mov.L	#9, r2
 1778 0c74 05 00 00 00             		bsr	_gotoxy
 780:SOURCES/menu.c **** 	printf("%c",25);
 1779                             		.loc 1 780 0
 1780 0c78 75 41 19                		mov.L	#25, r1
 1781 0c7b 05 00 00 00             		bsr	_putchar
 781:SOURCES/menu.c **** #else
 782:SOURCES/menu.c **** 	showpicture( 0, DISP_HEIGHT - _up_arrow[1], (const unsigned char*)_up_arrow);
 783:SOURCES/menu.c **** 
 784:SOURCES/menu.c **** 	// Show the selection item
 785:SOURCES/menu.c **** 	showpicture( (DISP_WIDTH >> 1)- (_select[0] >> 1), DISP_HEIGHT - _select[1], (const unsigned char*
 786:SOURCES/menu.c **** 
 787:SOURCES/menu.c **** 	// Show the down arrow
 788:SOURCES/menu.c **** 	showpicture( DISP_WIDTH - (_down_arrow[0] << 1), DISP_HEIGHT - _down_arrow[1], (const unsigned cha
 789:SOURCES/menu.c **** #endif
 790:SOURCES/menu.c **** }
 1782                             		.loc 1 790 0
 1783 0c7f 3F 66 02                		rtsd	#8, r6-r6
 1784                             	.LFE17:
 1787                             	_display_progress_bar:
 1788                             	.LFB18:
 791:SOURCES/menu.c **** 
 792:SOURCES/menu.c **** 
 793:SOURCES/menu.c **** static void display_progress_bar( int nCurr, int nMax )
 794:SOURCES/menu.c **** {
 1789                             		.loc 1 794 0
 1790 0c82 7E A6                   		push.l	r6
 1791                             	.LCFI52:
 1792 0c84 71 06 F8                		add	#-8, r0, r6
 1793                             	.LCFI53:
 1794 0c87 EF 60                   		mov.L	r6, r0
 1795                             	.LCFI54:
 1796 0c89 E3 61                   		mov.L	r1, [r6]
 1797 0c8b A0 6A                   		mov.L	r2, 4[r6]
 795:SOURCES/menu.c **** #if !OPH1005
 796:SOURCES/menu.c **** 	int nStages;
 797:SOURCES/menu.c **** 	int nGap;
 798:SOURCES/menu.c **** 
 799:SOURCES/menu.c **** 	nCurr--;
 800:SOURCES/menu.c **** 	nStages = (DISP_HEIGHT-DISP_YSTART-1-5)/(nMax-1);
 801:SOURCES/menu.c **** 	nGap = (nCurr!=(nMax-1))?((nCurr*nStages)+DISP_YSTART):(DISP_HEIGHT-7);
 802:SOURCES/menu.c **** 
 803:SOURCES/menu.c **** 	drawline(DISP_WIDTH-1 ,0, DISP_WIDTH-1, DISP_HEIGHT,0);		// clear the progress bar
 804:SOURCES/menu.c **** 	drawline(DISP_WIDTH-2 ,0, DISP_WIDTH-2, DISP_HEIGHT,0);		// clear the progress bar
 805:SOURCES/menu.c **** 	drawline(DISP_WIDTH-3 ,0, DISP_WIDTH-3, DISP_HEIGHT,0);		// clear the progress bar
 806:SOURCES/menu.c **** 
 807:SOURCES/menu.c **** 	drawline( DISP_WIDTH-4, DISP_YSTART, DISP_WIDTH-4, DISP_HEIGHT-1, 1 ); // top bottom line
 808:SOURCES/menu.c **** 	drawline( DISP_WIDTH-4, nGap+1, DISP_WIDTH-4, nGap+5, 0 ); // small gap in line
 809:SOURCES/menu.c **** 	drawline( DISP_WIDTH-2, nGap+1, DISP_WIDTH-2, nGap+5, 1 ); // draw gapline a bit to the left
 810:SOURCES/menu.c **** 	setpixel( DISP_WIDTH-3, nGap, 1 );
 811:SOURCES/menu.c **** 	setpixel( DISP_WIDTH-3, nGap+6, 1 );
 812:SOURCES/menu.c **** #endif
 813:SOURCES/menu.c **** }
 1798                             		.loc 1 813 0
 1799 0c8d 3F 66 03                		rtsd	#12, r6-r6
 1800                             	.LFE18:
 1803                             	_get_graph_menu_input:
 1804                             	.LFB19:
 814:SOURCES/menu.c **** 
 815:SOURCES/menu.c **** static int get_graph_menu_input( int nCurrLayer, sgraphMenu *menuItems, int nMax )
 816:SOURCES/menu.c **** {
 1805                             		.loc 1 816 0
 1806 0c90 6E 6C                   		pushm	r6-r12
 1807                             	.LCFI55:
 1808 0c92 71 06 EC                		add	#-20, r0, r6
 1809                             	.LCFI56:
 1810 0c95 EF 60                   		mov.L	r6, r0
 1811                             	.LCFI57:
 1812 0c97 A0 E1                   		mov.L	r1, 8[r6]
 1813 0c99 A0 EA                   		mov.L	r2, 12[r6]
 1814 0c9b A1 63                   		mov.L	r3, 16[r6]
 817:SOURCES/menu.c **** 	int nKey;
 818:SOURCES/menu.c **** 	int n;
 819:SOURCES/menu.c **** 
 820:SOURCES/menu.c **** 	nKey = WaitForKey();
 1815                             		.loc 1 820 0
 1816 0c9d 05 00 00 00             		bsr	_WaitForKey
 1817 0ca1 A0 69                   		mov.L	r1, 4[r6]
 821:SOURCES/menu.c **** 
 822:SOURCES/menu.c **** 	switch( nKey )
 1818                             		.loc 1 822 0
 1819 0ca3 ED 6A 01                		mov.L	4[r6], r10
 1820 0ca6 75 5A 80                		cmp	#0x80, r10
 1821 0ca9 20 3A                   		beq	.L138
 1822 0cab 75 5A 80                		cmp	#0x80, r10
 1823 0cae 2A 1D                   		bgt	.L141
 1824 0cb0 75 5A 1B                		cmp	#27, r10
 1825 0cb3 3A E2 00                		beq	.L136
 1826 0cb6 75 5A 1B                		cmp	#27, r10
 1827 0cb9 28 05 38 5B 01          		blt	.L135
 1828 0cbe 71 AA CF                		add	#-49, r10
 1829 0cc1 61 8A                   		cmp	#8, r10
 1830 0cc3 25 05 38 51 01          		bgtu	.L135
 1831 0cc8 38 F2 00                		bra	.L153
 1832                             	.L141:
 1833 0ccb 75 5A 82                		cmp	#0x82, r10
 1834 0cce 3A 85 00                		beq	.L140
 1835 0cd1 75 5A 82                		cmp	#0x82, r10
 1836 0cd4 29 3F                   		blt	.L139
 1837 0cd6 75 5A 85                		cmp	#0x85, r10
 1838 0cd9 12                      		beq	.L138
 1839 0cda 75 5A 86                		cmp	#0x86, r10
 1840 0cdd 3A B8 00                		beq	.L136
 1841 0ce0 38 36 01                		bra	.L135
 1842                             	.L138:
 823:SOURCES/menu.c **** 	{
 824:SOURCES/menu.c **** 	case ENT_KEY:
 825:SOURCES/menu.c **** 	case TRIGGER_KEY:
 826:SOURCES/menu.c **** 		if( menuItems[ menu_layers[ nCurrLayer ]-1].funcitem == NULL )
 1843                             		.loc 1 826 0
 1844 0ce3 FB A2 00 00 00 00       		mov.L	#_menu_layers, r10
 1845 0ce9 ED 6B 02                		mov.L	8[r6], r11
 1846 0cec FE 6B AA                		mov.L	[r11,r10], r10
 1847 0cef 60 1A                   		sub	#1, r10
 1848 0cf1 63 CA                   		mul	#12, r10
 1849 0cf3 ED 6B 03                		mov.L	12[r6], r11
 1850 0cf6 4B BA                   		add	r11, r10
 1851 0cf8 ED AA 02                		mov.L	8[r10], r10
 1852 0cfb 61 0A                   		cmp	#0, r10
 1853 0cfd 21 11                   		bne	.L142
 827:SOURCES/menu.c **** 			menu_layers[ nCurrLayer ]= 0;
 1854                             		.loc 1 827 0
 1855 0cff FB A2 00 00 00 00       		mov.L	#_menu_layers, r10
 1856 0d05 ED 6B 02                		mov.L	8[r6], r11
 1857 0d08 66 07                   		mov.L	#0, r7
 1858 0d0a FE 2B A7                		mov.L	r7, [r11,r10]
 1859 0d0d 03                      		.balign 2,3,1
 1860                             	.L142:
 828:SOURCES/menu.c **** 		return TRUE; // exit
 1861                             		.loc 1 828 0
 1862 0d0e 66 1A                   		mov.L	#1, r10
 1863 0d10 38 0C 01                		bra	.L143
 1864                             	.L139:
 829:SOURCES/menu.c **** 
 830:SOURCES/menu.c **** 	case UP_KEY:
 831:SOURCES/menu.c **** #if !OPH1005
 832:SOURCES/menu.c **** 	case LEFT_KEY:
 833:SOURCES/menu.c **** #endif
 834:SOURCES/menu.c **** #if PHL|PHL1000|PHL2700
 835:SOURCES/menu.c **** 	case Q1_KEY:
 836:SOURCES/menu.c **** 	case F5_KEY:
 837:SOURCES/menu.c **** 	case F7_KEY:
 838:SOURCES/menu.c **** #endif
 839:SOURCES/menu.c **** 		if( menu_layers[ nCurrLayer ] > 1 )
 1865                             		.loc 1 839 0
 1866 0d13 FB A2 00 00 00 00       		mov.L	#_menu_layers, r10
 1867 0d19 ED 6B 02                		mov.L	8[r6], r11
 1868 0d1c FE 6B AA                		mov.L	[r11,r10], r10
 1869 0d1f 61 1A                   		cmp	#1, r10
 1870 0d21 2B 20                   		ble	.L144
 840:SOURCES/menu.c **** 			menu_layers[ nCurrLayer ]--;
 1871                             		.loc 1 840 0
 1872 0d23 FB A2 00 00 00 00       		mov.L	#_menu_layers, r10
 1873 0d29 ED 6B 02                		mov.L	8[r6], r11
 1874 0d2c FE 6B AA                		mov.L	[r11,r10], r10
 1875 0d2f 71 AC FF                		add	#-1, r10, r12
 1876 0d32 FB A2 00 00 00 00       		mov.L	#_menu_layers, r10
 1877 0d38 ED 6B 02                		mov.L	8[r6], r11
 1878 0d3b FE 2B AC                		mov.L	r12, [r11,r10]
 841:SOURCES/menu.c **** 		else
 842:SOURCES/menu.c **** 			menu_layers[ nCurrLayer ] = nMax;
 843:SOURCES/menu.c **** 		break;
 1879                             		.loc 1 843 0
 1880 0d3e 38 DC 00                		bra	.L146
 1881                             	.L144:
 842:SOURCES/menu.c **** 			menu_layers[ nCurrLayer ] = nMax;
 1882                             		.loc 1 842 0
 1883 0d41 FB A2 00 00 00 00       		mov.L	#_menu_layers, r10
 1884 0d47 ED 6B 02                		mov.L	8[r6], r11
 1885 0d4a ED 6C 04                		mov.L	16[r6], r12
 1886 0d4d FE 2B AC                		mov.L	r12, [r11,r10]
 1887                             		.loc 1 843 0
 1888 0d50 38 CA 00                		bra	.L146
 1889                             	.L140:
 844:SOURCES/menu.c **** 
 845:SOURCES/menu.c **** 	case DOWN_KEY:
 846:SOURCES/menu.c **** #if !OPH1005
 847:SOURCES/menu.c **** 	case RIGHT_KEY:
 848:SOURCES/menu.c **** #endif
 849:SOURCES/menu.c **** #if PHL|PHL1000|PHL2700
 850:SOURCES/menu.c **** 	case Q2_KEY:
 851:SOURCES/menu.c **** 	case F6_KEY:
 852:SOURCES/menu.c **** 	case F8_KEY:
 853:SOURCES/menu.c **** #endif
 854:SOURCES/menu.c **** 		if( menu_layers[ nCurrLayer ] < nMax )
 1890                             		.loc 1 854 0
 1891 0d53 FB A2 00 00 00 00       		mov.L	#_menu_layers, r10
 1892 0d59 ED 6B 02                		mov.L	8[r6], r11
 1893 0d5c FE 6B AB                		mov.L	[r11,r10], r11
 1894 0d5f ED 6A 04                		mov.L	16[r6], r10
 1895 0d62 47 AB                   		cmp	r10, r11
 1896 0d64 28 20                   		bge	.L147
 855:SOURCES/menu.c **** 			menu_layers[ nCurrLayer ]++;
 1897                             		.loc 1 855 0
 1898 0d66 FB A2 00 00 00 00       		mov.L	#_menu_layers, r10
 1899 0d6c ED 6B 02                		mov.L	8[r6], r11
 1900 0d6f FE 6B AA                		mov.L	[r11,r10], r10
 1901 0d72 71 AC 01                		add	#1, r10, r12
 1902 0d75 FB A2 00 00 00 00       		mov.L	#_menu_layers, r10
 1903 0d7b ED 6B 02                		mov.L	8[r6], r11
 1904 0d7e FE 2B AC                		mov.L	r12, [r11,r10]
 856:SOURCES/menu.c **** 		else
 857:SOURCES/menu.c **** 			menu_layers[ nCurrLayer ] = 1;
 858:SOURCES/menu.c **** 		break;
 1905                             		.loc 1 858 0
 1906 0d81 38 99 00                		bra	.L146
 1907                             	.L147:
 857:SOURCES/menu.c **** 			menu_layers[ nCurrLayer ] = 1;
 1908                             		.loc 1 857 0
 1909 0d84 FB A2 00 00 00 00       		mov.L	#_menu_layers, r10
 1910 0d8a ED 6B 02                		mov.L	8[r6], r11
 1911 0d8d 66 17                   		mov.L	#1, r7
 1912 0d8f FE 2B A7                		mov.L	r7, [r11,r10]
 1913                             		.loc 1 858 0
 1914 0d92 38 88 00                		bra	.L146
 1915                             	.L136:
 859:SOURCES/menu.c **** 
 860:SOURCES/menu.c **** 	case CLR_KEY:
 861:SOURCES/menu.c **** 	case ESC_KEY:
 862:SOURCES/menu.c **** 			for(n=nCurrLayer;n < MAX_LAYERS;n++)
 1916                             		.loc 1 862 0
 1917 0d95 ED 6A 02                		mov.L	8[r6], r10
 1918 0d98 E3 6A                   		mov.L	r10, [r6]
 1919 0d9a 2E 16                   		bra	.L149
 1920                             	.L150:
 863:SOURCES/menu.c **** 				menu_layers[ n ] = 0;
 1921                             		.loc 1 863 0 discriminator 2
 1922 0d9c FB A2 00 00 00 00       		mov.L	#_menu_layers, r10
 1923 0da2 EC 6B                   		mov.L	[r6], r11
 1924 0da4 66 07                   		mov.L	#0, r7
 1925 0da6 FE 2B A7                		mov.L	r7, [r11,r10]
 862:SOURCES/menu.c **** 			for(n=nCurrLayer;n < MAX_LAYERS;n++)
 1926                             		.loc 1 862 0 discriminator 2
 1927 0da9 EC 6A                   		mov.L	[r6], r10
 1928 0dab 62 1A                   		add	#1, r10
 1929 0dad E3 6A                   		mov.L	r10, [r6]
 1930 0daf 03                      		.balign 2,3,1
 1931                             	.L149:
 862:SOURCES/menu.c **** 			for(n=nCurrLayer;n < MAX_LAYERS;n++)
 1932                             		.loc 1 862 0 is_stmt 0 discriminator 1
 1933 0db0 EC 6A                   		mov.L	[r6], r10
 1934 0db2 61 9A                   		cmp	#9, r10
 1935 0db4 2B E8                   		ble	.L150
 864:SOURCES/menu.c **** 		return TRUE;
 1936                             		.loc 1 864 0 is_stmt 1
 1937 0db6 66 1A                   		mov.L	#1, r10
 1938 0db8 2E 64                   		bra	.L143
 1939                             	.L153:
 865:SOURCES/menu.c **** 
 866:SOURCES/menu.c **** 	case '1':	case '2':	case '3':
 867:SOURCES/menu.c **** 	case '4':	case '5':	case '6':
 868:SOURCES/menu.c **** 	case '7':	case '8':	case '9':
 869:SOURCES/menu.c **** 		if( (nKey - 0x30) > 0 && (nKey - 0x30) <= nMax)
 1940                             		.loc 1 869 0
 1941 0dba ED 6A 01                		mov.L	4[r6], r10
 1942 0dbd 71 AA D0                		add	#-48, r10
 1943 0dc0 61 0A                   		cmp	#0, r10
 1944 0dc2 2B 50                   		ble	.L151
 1945                             		.loc 1 869 0 is_stmt 0 discriminator 1
 1946 0dc4 ED 6A 01                		mov.L	4[r6], r10
 1947 0dc7 71 AB D0                		add	#-48, r10, r11
 1948 0dca ED 6A 04                		mov.L	16[r6], r10
 1949 0dcd 47 AB                   		cmp	r10, r11
 1950 0dcf 2A 43                   		bgt	.L151
 870:SOURCES/menu.c **** 		{
 871:SOURCES/menu.c **** 			menu_layers[ nCurrLayer ] = nKey - 0x30;
 1951                             		.loc 1 871 0 is_stmt 1
 1952 0dd1 ED 6A 01                		mov.L	4[r6], r10
 1953 0dd4 71 AC D0                		add	#-48, r10, r12
 1954 0dd7 FB A2 00 00 00 00       		mov.L	#_menu_layers, r10
 1955 0ddd ED 6B 02                		mov.L	8[r6], r11
 1956 0de0 FE 2B AC                		mov.L	r12, [r11,r10]
 872:SOURCES/menu.c **** 			if( menuItems[ menu_layers[ nCurrLayer ] -1 ].funcitem == NULL )
 1957                             		.loc 1 872 0
 1958 0de3 FB A2 00 00 00 00       		mov.L	#_menu_layers, r10
 1959 0de9 ED 6B 02                		mov.L	8[r6], r11
 1960 0dec FE 6B AA                		mov.L	[r11,r10], r10
 1961 0def 60 1A                   		sub	#1, r10
 1962 0df1 63 CA                   		mul	#12, r10
 1963 0df3 ED 6B 03                		mov.L	12[r6], r11
 1964 0df6 4B BA                   		add	r11, r10
 1965 0df8 ED AA 02                		mov.L	8[r10], r10
 1966 0dfb 61 0A                   		cmp	#0, r10
 1967 0dfd 21 11                   		bne	.L152
 873:SOURCES/menu.c **** 				menu_layers[ nCurrLayer ]= 0;
 1968                             		.loc 1 873 0
 1969 0dff FB A2 00 00 00 00       		mov.L	#_menu_layers, r10
 1970 0e05 ED 6B 02                		mov.L	8[r6], r11
 1971 0e08 66 07                   		mov.L	#0, r7
 1972 0e0a FE 2B A7                		mov.L	r7, [r11,r10]
 1973 0e0d 03                      		.balign 2,3,1
 1974                             	.L152:
 874:SOURCES/menu.c **** 			return TRUE;
 1975                             		.loc 1 874 0
 1976 0e0e 66 1A                   		mov.L	#1, r10
 1977 0e10 2E 0C                   		bra	.L143
 1978                             	.L151:
 875:SOURCES/menu.c **** 		}
 876:SOURCES/menu.c **** 		errorbeep();
 1979                             		.loc 1 876 0
 1980 0e12 39 51 F4                		bsr	_errorbeep
 877:SOURCES/menu.c **** 		break;
 1981                             		.loc 1 877 0
 1982 0e15 0D                      		bra	.L146
 1983                             	.L135:
 878:SOURCES/menu.c **** 	default:
 879:SOURCES/menu.c **** 		errorbeep();
 1984                             		.loc 1 879 0
 1985 0e16 39 4D F4                		bsr	_errorbeep
 880:SOURCES/menu.c **** 		break;
 1986                             		.loc 1 880 0
 1987 0e19 03                      		nop
 1988                             		.balign 2,3,1
 1989                             	.L146:
 881:SOURCES/menu.c **** 	}
 882:SOURCES/menu.c **** 	return FALSE;
 1990                             		.loc 1 882 0
 1991 0e1a 66 0A                   		mov.L	#0, r10
 1992                             		.balign 2,3,1
 1993                             	.L143:
 883:SOURCES/menu.c **** }
 1994                             		.loc 1 883 0
 1995 0e1c EF A1                   		mov.L	r10, r1
 1996 0e1e 3F 6C 0C                		rtsd	#48, r6-r12
 1997                             	.LFE19:
 1999                             		.global	_ShowGraphMenu
 2001                             	_ShowGraphMenu:
 2002                             	.LFB20:
 884:SOURCES/menu.c **** 
 885:SOURCES/menu.c **** void ShowGraphMenu( sgraphMenu *menuItems, int nMax )
 886:SOURCES/menu.c **** {
 2003                             		.loc 1 886 0
 2004 0e21 6E 6B                   		pushm	r6-r11
 2005                             	.LCFI58:
 2006 0e23 71 06 F4                		add	#-12, r0, r6
 2007                             	.LCFI59:
 2008 0e26 EF 60                   		mov.L	r6, r0
 2009                             	.LCFI60:
 2010 0e28 A0 69                   		mov.L	r1, 4[r6]
 2011 0e2a A0 E2                   		mov.L	r2, 8[r6]
 887:SOURCES/menu.c **** 	int nCurrLayer;
 888:SOURCES/menu.c **** 	static char layer_string[ MAX_LAYERS*3 ];
 889:SOURCES/menu.c **** 
 890:SOURCES/menu.c **** #if PHL1000
 891:SOURCES/menu.c **** 	cursor( NOICONS );
 892:SOURCES/menu.c **** #endif
 893:SOURCES/menu.c **** 	cursor( NOWRAP );
 2012                             		.loc 1 893 0
 2013 0e2c 66 41                   		mov.L	#4, r1
 2014 0e2e 05 00 00 00             		bsr	_cursor
 894:SOURCES/menu.c **** 	GraphIncLayer( 1 );
 2015                             		.loc 1 894 0
 2016 0e32 66 11                   		mov.L	#1, r1
 2017 0e34 05 00 00 00             		bsr	_GraphIncLayer
 895:SOURCES/menu.c **** 	nCurrLayer  = build_layer_string( layer_string );
 2018                             		.loc 1 895 0
 2019 0e38 FB 12 46 00 00 00       		mov.L	#_layer_string.3782, r1
 2020 0e3e 39 6F FC                		bsr	_build_layer_string
 2021 0e41 E3 61                   		mov.L	r1, [r6]
 896:SOURCES/menu.c **** 
 897:SOURCES/menu.c **** 	putchar('\f');
 2022                             		.loc 1 897 0
 2023 0e43 FB A2 00 00 00 00       		mov.L	#__impure_ptr, r10
 2024 0e49 EC AA                   		mov.L	[r10], r10
 2025 0e4b ED AA 02                		mov.L	8[r10], r10
 2026 0e4e ED AB 02                		mov.L	8[r10], r11
 2027 0e51 60 1B                   		sub	#1, r11
 2028 0e53 E7 AB 02                		mov.L	r11, 8[r10]
 2029 0e56 ED AA 02                		mov.L	8[r10], r10
 2030 0e59 61 0A                   		cmp	#0, r10
 2031 0e5b 29 05 38 99 00          		bge	.L155
 2032                             		.loc 1 897 0 is_stmt 0 discriminator 1
 2033 0e60 FB A2 00 00 00 00       		mov.L	#__impure_ptr, r10
 2034 0e66 EC AA                   		mov.L	[r10], r10
 2035 0e68 ED AA 02                		mov.L	8[r10], r10
 2036 0e6b ED AB 02                		mov.L	8[r10], r11
 2037 0e6e FB A2 00 00 00 00       		mov.L	#__impure_ptr, r10
 2038 0e74 EC AA                   		mov.L	[r10], r10
 2039 0e76 ED AA 02                		mov.L	8[r10], r10
 2040 0e79 ED AA 06                		mov.L	24[r10], r10
 2041 0e7c 47 AB                   		cmp	r10, r11
 2042 0e7e 29 59                   		blt	.L156
 2043                             		.loc 1 897 0 discriminator 3
 2044 0e80 FB A2 00 00 00 00       		mov.L	#__impure_ptr, r10
 2045 0e86 EC AA                   		mov.L	[r10], r10
 2046 0e88 ED AA 02                		mov.L	8[r10], r10
 2047 0e8b EC AA                   		mov.L	[r10], r10
 2048 0e8d F8 A4 0C                		mov.B	#12, [r10]
 2049 0e90 FB A2 00 00 00 00       		mov.L	#__impure_ptr, r10
 2050 0e96 EC AA                   		mov.L	[r10], r10
 2051 0e98 ED AA 02                		mov.L	8[r10], r10
 2052 0e9b EC AA                   		mov.L	[r10], r10
 2053 0e9d CC AA                   		mov.B	[r10], r10
 2054 0e9f 5B AA                   		movu.B	r10, r10
 2055 0ea1 61 AA                   		cmp	#10, r10
 2056 0ea3 20 15                   		beq	.L157
 2057                             		.loc 1 897 0 discriminator 5
 2058 0ea5 FB A2 00 00 00 00       		mov.L	#__impure_ptr, r10
 2059 0eab EC AA                   		mov.L	[r10], r10
 2060 0ead ED AA 02                		mov.L	8[r10], r10
 2061 0eb0 EC AB                   		mov.L	[r10], r11
 2062 0eb2 62 1B                   		add	#1, r11
 2063 0eb4 E3 AB                   		mov.L	r11, [r10]
 2064 0eb6 2E 62                   		bra	.L160
 2065                             	.L157:
 2066                             		.loc 1 897 0 discriminator 6
 2067 0eb8 FB A2 00 00 00 00       		mov.L	#__impure_ptr, r10
 2068 0ebe EC AB                   		mov.L	[r10], r11
 2069 0ec0 FB A2 00 00 00 00       		mov.L	#__impure_ptr, r10
 2070 0ec6 EC AA                   		mov.L	[r10], r10
 2071 0ec8 ED AA 02                		mov.L	8[r10], r10
 2072 0ecb EF B1                   		mov.L	r11, r1
 2073 0ecd 66 A2                   		mov.L	#10, r2
 2074 0ecf EF A3                   		mov.L	r10, r3
 2075 0ed1 05 00 00 00             		bsr	___swbuf_r
 2076 0ed5 2E 43                   		bra	.L160
 2077                             	.L156:
 2078                             		.loc 1 897 0 discriminator 4
 2079 0ed7 FB A2 00 00 00 00       		mov.L	#__impure_ptr, r10
 2080 0edd EC AB                   		mov.L	[r10], r11
 2081 0edf FB A2 00 00 00 00       		mov.L	#__impure_ptr, r10
 2082 0ee5 EC AA                   		mov.L	[r10], r10
 2083 0ee7 ED AA 02                		mov.L	8[r10], r10
 2084 0eea EF B1                   		mov.L	r11, r1
 2085 0eec 66 C2                   		mov.L	#12, r2
 2086 0eee EF A3                   		mov.L	r10, r3
 2087 0ef0 05 00 00 00             		bsr	___swbuf_r
 2088 0ef4 2E 24                   		bra	.L160
 2089                             	.L155:
 2090                             		.loc 1 897 0 discriminator 2
 2091 0ef6 FB A2 00 00 00 00       		mov.L	#__impure_ptr, r10
 2092 0efc EC AA                   		mov.L	[r10], r10
 2093 0efe ED AA 02                		mov.L	8[r10], r10
 2094 0f01 EC AA                   		mov.L	[r10], r10
 2095 0f03 F8 A4 0C                		mov.B	#12, [r10]
 2096 0f06 FB A2 00 00 00 00       		mov.L	#__impure_ptr, r10
 2097 0f0c EC AA                   		mov.L	[r10], r10
 2098 0f0e ED AA 02                		mov.L	8[r10], r10
 2099 0f11 EC AB                   		mov.L	[r10], r11
 2100 0f13 62 1B                   		add	#1, r11
 2101 0f15 E3 AB                   		mov.L	r11, [r10]
 2102 0f17 03                      		.balign 2,3,3
 2103                             	.L160:
 898:SOURCES/menu.c **** 	resetkey();
 2104                             		.loc 1 898 0 is_stmt 1
 2105 0f18 05 00 00 00             		bsr	_resetkey
 2106 0f1c 2E 04                   		bra	.L170
 2107                             	.L172:
 899:SOURCES/menu.c **** 	for(;;)
 900:SOURCES/menu.c **** 	{
 901:SOURCES/menu.c **** 		display_layer(layer_string, menu_layers[nCurrLayer]);
 902:SOURCES/menu.c **** 
 903:SOURCES/menu.c **** 		display_menu_item_text(menuItems[menu_layers[nCurrLayer]-1].text);
 904:SOURCES/menu.c **** 
 905:SOURCES/menu.c **** 		display_image((unsigned char*)menuItems[menu_layers[nCurrLayer]-1].picture);
 906:SOURCES/menu.c **** 
 907:SOURCES/menu.c **** 		display_selection_bar();
 908:SOURCES/menu.c **** 
 909:SOURCES/menu.c **** 		display_progress_bar(menu_layers[nCurrLayer], nMax);
 910:SOURCES/menu.c **** 
 911:SOURCES/menu.c **** 		if(get_graph_menu_input(nCurrLayer, menuItems, nMax))
 912:SOURCES/menu.c **** 		{
 913:SOURCES/menu.c **** 			if(menu_layers[nCurrLayer] == 0)
 914:SOURCES/menu.c **** 			{
 915:SOURCES/menu.c **** 				nCurrLayer  = build_layer_string( layer_string );
 916:SOURCES/menu.c **** 				return;
 917:SOURCES/menu.c **** 			}
 918:SOURCES/menu.c **** 			menuItems[menu_layers[nCurrLayer]-1].funcitem();
 919:SOURCES/menu.c **** 			putchar('\f');
 920:SOURCES/menu.c **** 			resetkey();
 921:SOURCES/menu.c **** 			cursor( NOWRAP );
 922:SOURCES/menu.c **** 		}
 923:SOURCES/menu.c **** 	}
 2108                             		.loc 1 923 0
 2109 0f1e 03                      		nop
 2110 0f1f 03                      		.balign 2,3,5
 2111                             	.L170:
 901:SOURCES/menu.c **** 		display_layer(layer_string, menu_layers[nCurrLayer]);
 2112                             		.loc 1 901 0
 2113 0f20 FB A2 00 00 00 00       		mov.L	#_menu_layers, r10
 2114 0f26 EC 6B                   		mov.L	[r6], r11
 2115 0f28 FE 6B AA                		mov.L	[r11,r10], r10
 2116 0f2b FB 12 46 00 00 00       		mov.L	#_layer_string.3782, r1
 2117 0f31 EF A2                   		mov.L	r10, r2
 2118 0f33 39 4C FC                		bsr	_display_layer
 903:SOURCES/menu.c **** 		display_menu_item_text(menuItems[menu_layers[nCurrLayer]-1].text);
 2119                             		.loc 1 903 0
 2120 0f36 FB A2 00 00 00 00       		mov.L	#_menu_layers, r10
 2121 0f3c EC 6B                   		mov.L	[r6], r11
 2122 0f3e FE 6B AA                		mov.L	[r11,r10], r10
 2123 0f41 60 1A                   		sub	#1, r10
 2124 0f43 63 CA                   		mul	#12, r10
 2125 0f45 ED 6B 01                		mov.L	4[r6], r11
 2126 0f48 4B BA                   		add	r11, r10
 2127 0f4a EC AA                   		mov.L	[r10], r10
 2128 0f4c EF A1                   		mov.L	r10, r1
 2129 0f4e 39 3F FC                		bsr	_display_menu_item_text
 905:SOURCES/menu.c **** 		display_image((unsigned char*)menuItems[menu_layers[nCurrLayer]-1].picture);
 2130                             		.loc 1 905 0
 2131 0f51 FB A2 00 00 00 00       		mov.L	#_menu_layers, r10
 2132 0f57 EC 6B                   		mov.L	[r6], r11
 2133 0f59 FE 6B AA                		mov.L	[r11,r10], r10
 2134 0f5c 60 1A                   		sub	#1, r10
 2135 0f5e 63 CA                   		mul	#12, r10
 2136 0f60 ED 6B 01                		mov.L	4[r6], r11
 2137 0f63 4B BA                   		add	r11, r10
 2138 0f65 ED AA 01                		mov.L	4[r10], r10
 2139 0f68 EF A1                   		mov.L	r10, r1
 2140 0f6a 39 81 FC                		bsr	_display_image
 907:SOURCES/menu.c **** 		display_selection_bar();
 2141                             		.loc 1 907 0
 2142 0f6d 39 DC FC                		bsr	_display_selection_bar
 909:SOURCES/menu.c **** 		display_progress_bar(menu_layers[nCurrLayer], nMax);
 2143                             		.loc 1 909 0
 2144 0f70 FB A2 00 00 00 00       		mov.L	#_menu_layers, r10
 2145 0f76 EC 6B                   		mov.L	[r6], r11
 2146 0f78 FE 6B AA                		mov.L	[r11,r10], r10
 2147 0f7b EF A1                   		mov.L	r10, r1
 2148 0f7d A8 E2                   		mov.L	8[r6], r2
 2149 0f7f 39 03 FD                		bsr	_display_progress_bar
 911:SOURCES/menu.c **** 		if(get_graph_menu_input(nCurrLayer, menuItems, nMax))
 2150                             		.loc 1 911 0
 2151 0f82 EC 61                   		mov.L	[r6], r1
 2152 0f84 A8 6A                   		mov.L	4[r6], r2
 2153 0f86 A8 E3                   		mov.L	8[r6], r3
 2154 0f88 39 08 FD                		bsr	_get_graph_menu_input
 2155 0f8b EF 1A                   		mov.L	r1, r10
 2156 0f8d 61 0A                   		cmp	#0, r10
 2157 0f8f 20 8F                   		beq	.L172
 913:SOURCES/menu.c **** 			if(menu_layers[nCurrLayer] == 0)
 2158                             		.loc 1 913 0
 2159 0f91 FB A2 00 00 00 00       		mov.L	#_menu_layers, r10
 2160 0f97 EC 6B                   		mov.L	[r6], r11
 2161 0f99 FE 6B AA                		mov.L	[r11,r10], r10
 2162 0f9c 61 0A                   		cmp	#0, r10
 2163 0f9e 21 11                   		bne	.L162
 915:SOURCES/menu.c **** 				nCurrLayer  = build_layer_string( layer_string );
 2164                             		.loc 1 915 0
 2165 0fa0 FB 12 46 00 00 00       		mov.L	#_layer_string.3782, r1
 2166 0fa6 39 07 FB                		bsr	_build_layer_string
 2167 0fa9 E3 61                   		mov.L	r1, [r6]
 916:SOURCES/menu.c **** 				return;
 2168                             		.loc 1 916 0
 2169 0fab 03                      		nop
 2170 0fac 38 FD 00                		bra	.L171
 2171                             	.L162:
 918:SOURCES/menu.c **** 			menuItems[menu_layers[nCurrLayer]-1].funcitem();
 2172                             		.loc 1 918 0
 2173 0faf FB A2 00 00 00 00       		mov.L	#_menu_layers, r10
 2174 0fb5 EC 6B                   		mov.L	[r6], r11
 2175 0fb7 FE 6B AA                		mov.L	[r11,r10], r10
 2176 0fba 60 1A                   		sub	#1, r10
 2177 0fbc 63 CA                   		mul	#12, r10
 2178 0fbe ED 6B 01                		mov.L	4[r6], r11
 2179 0fc1 4B BA                   		add	r11, r10
 2180 0fc3 ED AA 02                		mov.L	8[r10], r10
 2181 0fc6 7F 1A                   		jsr	r10
 919:SOURCES/menu.c **** 			putchar('\f');
 2182                             		.loc 1 919 0
 2183 0fc8 FB A2 00 00 00 00       		mov.L	#__impure_ptr, r10
 2184 0fce EC AA                   		mov.L	[r10], r10
 2185 0fd0 ED AA 02                		mov.L	8[r10], r10
 2186 0fd3 ED AB 02                		mov.L	8[r10], r11
 2187 0fd6 60 1B                   		sub	#1, r11
 2188 0fd8 E7 AB 02                		mov.L	r11, 8[r10]
 2189 0fdb ED AA 02                		mov.L	8[r10], r10
 2190 0fde 61 0A                   		cmp	#0, r10
 2191 0fe0 29 05 38 99 00          		bge	.L164
 919:SOURCES/menu.c **** 			putchar('\f');
 2192                             		.loc 1 919 0 is_stmt 0 discriminator 1
 2193 0fe5 FB A2 00 00 00 00       		mov.L	#__impure_ptr, r10
 2194 0feb EC AA                   		mov.L	[r10], r10
 2195 0fed ED AA 02                		mov.L	8[r10], r10
 2196 0ff0 ED AB 02                		mov.L	8[r10], r11
 2197 0ff3 FB A2 00 00 00 00       		mov.L	#__impure_ptr, r10
 2198 0ff9 EC AA                   		mov.L	[r10], r10
 2199 0ffb ED AA 02                		mov.L	8[r10], r10
 2200 0ffe ED AA 06                		mov.L	24[r10], r10
 2201 1001 47 AB                   		cmp	r10, r11
 2202 1003 29 59                   		blt	.L165
 919:SOURCES/menu.c **** 			putchar('\f');
 2203                             		.loc 1 919 0 discriminator 3
 2204 1005 FB A2 00 00 00 00       		mov.L	#__impure_ptr, r10
 2205 100b EC AA                   		mov.L	[r10], r10
 2206 100d ED AA 02                		mov.L	8[r10], r10
 2207 1010 EC AA                   		mov.L	[r10], r10
 2208 1012 F8 A4 0C                		mov.B	#12, [r10]
 2209 1015 FB A2 00 00 00 00       		mov.L	#__impure_ptr, r10
 2210 101b EC AA                   		mov.L	[r10], r10
 2211 101d ED AA 02                		mov.L	8[r10], r10
 2212 1020 EC AA                   		mov.L	[r10], r10
 2213 1022 CC AA                   		mov.B	[r10], r10
 2214 1024 5B AA                   		movu.B	r10, r10
 2215 1026 61 AA                   		cmp	#10, r10
 2216 1028 20 15                   		beq	.L166
 919:SOURCES/menu.c **** 			putchar('\f');
 2217                             		.loc 1 919 0 discriminator 5
 2218 102a FB A2 00 00 00 00       		mov.L	#__impure_ptr, r10
 2219 1030 EC AA                   		mov.L	[r10], r10
 2220 1032 ED AA 02                		mov.L	8[r10], r10
 2221 1035 EC AB                   		mov.L	[r10], r11
 2222 1037 62 1B                   		add	#1, r11
 2223 1039 E3 AB                   		mov.L	r11, [r10]
 2224 103b 2E 61                   		bra	.L169
 2225                             	.L166:
 919:SOURCES/menu.c **** 			putchar('\f');
 2226                             		.loc 1 919 0 discriminator 6
 2227 103d FB A2 00 00 00 00       		mov.L	#__impure_ptr, r10
 2228 1043 EC AB                   		mov.L	[r10], r11
 2229 1045 FB A2 00 00 00 00       		mov.L	#__impure_ptr, r10
 2230 104b EC AA                   		mov.L	[r10], r10
 2231 104d ED AA 02                		mov.L	8[r10], r10
 2232 1050 EF B1                   		mov.L	r11, r1
 2233 1052 66 A2                   		mov.L	#10, r2
 2234 1054 EF A3                   		mov.L	r10, r3
 2235 1056 05 00 00 00             		bsr	___swbuf_r
 2236 105a 2E 42                   		bra	.L169
 2237                             	.L165:
 919:SOURCES/menu.c **** 			putchar('\f');
 2238                             		.loc 1 919 0 discriminator 4
 2239 105c FB A2 00 00 00 00       		mov.L	#__impure_ptr, r10
 2240 1062 EC AB                   		mov.L	[r10], r11
 2241 1064 FB A2 00 00 00 00       		mov.L	#__impure_ptr, r10
 2242 106a EC AA                   		mov.L	[r10], r10
 2243 106c ED AA 02                		mov.L	8[r10], r10
 2244 106f EF B1                   		mov.L	r11, r1
 2245 1071 66 C2                   		mov.L	#12, r2
 2246 1073 EF A3                   		mov.L	r10, r3
 2247 1075 05 00 00 00             		bsr	___swbuf_r
 2248 1079 2E 23                   		bra	.L169
 2249                             	.L164:
 919:SOURCES/menu.c **** 			putchar('\f');
 2250                             		.loc 1 919 0 discriminator 2
 2251 107b FB A2 00 00 00 00       		mov.L	#__impure_ptr, r10
 2252 1081 EC AA                   		mov.L	[r10], r10
 2253 1083 ED AA 02                		mov.L	8[r10], r10
 2254 1086 EC AA                   		mov.L	[r10], r10
 2255 1088 F8 A4 0C                		mov.B	#12, [r10]
 2256 108b FB A2 00 00 00 00       		mov.L	#__impure_ptr, r10
 2257 1091 EC AA                   		mov.L	[r10], r10
 2258 1093 ED AA 02                		mov.L	8[r10], r10
 2259 1096 EC AB                   		mov.L	[r10], r11
 2260 1098 62 1B                   		add	#1, r11
 2261 109a E3 AB                   		mov.L	r11, [r10]
 2262                             		.balign 2,3,3
 2263                             	.L169:
 920:SOURCES/menu.c **** 			resetkey();
 2264                             		.loc 1 920 0 is_stmt 1
 2265 109c 05 00 00 00             		bsr	_resetkey
 921:SOURCES/menu.c **** 			cursor( NOWRAP );
 2266                             		.loc 1 921 0
 2267 10a0 66 41                   		mov.L	#4, r1
 2268 10a2 05 00 00 00             		bsr	_cursor
 2269                             		.loc 1 923 0
 2270 10a6 38 78 FE                		bra	.L172
 2271                             	.L171:
 924:SOURCES/menu.c **** }
 2272                             		.loc 1 924 0
 2273 10a9 3F 6B 09                		rtsd	#36, r6-r11
 2274                             	.LFE20:
 2277                             	_graph_menu_sel_set_value:
 2278                             	.LFB21:
 925:SOURCES/menu.c **** 
 926:SOURCES/menu.c **** //
 927:SOURCES/menu.c **** // Graphical selection menu
 928:SOURCES/menu.c **** //
 929:SOURCES/menu.c **** static void graph_menu_sel_set_value( int nCurr, sSelMenu *menuSelItems, int nOptions, long *lValue
 930:SOURCES/menu.c **** {
 2279                             		.loc 1 930 0
 2280 10ac 6E 6C                   		pushm	r6-r12
 2281                             	.LCFI61:
 2282 10ae 71 06 F0                		add	#-16, r0, r6
 2283                             	.LCFI62:
 2284 10b1 EF 60                   		mov.L	r6, r0
 2285                             	.LCFI63:
 2286 10b3 E3 61                   		mov.L	r1, [r6]
 2287 10b5 A0 6A                   		mov.L	r2, 4[r6]
 2288 10b7 A0 E3                   		mov.L	r3, 8[r6]
 2289 10b9 A0 EC                   		mov.L	r4, 12[r6]
 931:SOURCES/menu.c **** 	if( menuSelItems[ menu_layers[ nCurr ] -1 ].value == -1L )
 2290                             		.loc 1 931 0
 2291 10bb FB A2 00 00 00 00       		mov.L	#_menu_layers, r10
 2292 10c1 EC 6B                   		mov.L	[r6], r11
 2293 10c3 FE 6B AA                		mov.L	[r11,r10], r10
 2294 10c6 60 1A                   		sub	#1, r10
 2295 10c8 6C 3A                   		shll	#3, r10
 2296 10ca ED 6B 01                		mov.L	4[r6], r11
 2297 10cd 4B BA                   		add	r11, r10
 2298 10cf ED AA 01                		mov.L	4[r10], r10
 2299 10d2 75 0A FF                		cmp	#-1, r10
 2300 10d5 21 11                   		bne	.L174
 932:SOURCES/menu.c **** 		 menu_layers[ nCurr ] = 0;
 2301                             		.loc 1 932 0
 2302 10d7 FB A2 00 00 00 00       		mov.L	#_menu_layers, r10
 2303 10dd EC 6B                   		mov.L	[r6], r11
 2304 10df 66 07                   		mov.L	#0, r7
 2305 10e1 FE 2B A7                		mov.L	r7, [r11,r10]
 2306 10e4 2E 56                   		bra	.L175
 2307                             	.L174:
 933:SOURCES/menu.c **** 	else if( MULTIPLE_SELECT( nOptions ))
 2308                             		.loc 1 933 0
 2309 10e6 ED 6A 02                		mov.L	8[r6], r10
 2310 10e9 64 2A                   		and	#2, r10
 2311 10eb 61 0A                   		cmp	#0, r10
 2312 10ed 20 28                   		beq	.L176
 934:SOURCES/menu.c **** 		*lValue ^= menuSelItems[ menu_layers[ nCurr ] -1 ].value;
 2313                             		.loc 1 934 0
 2314 10ef ED 6A 03                		mov.L	12[r6], r10
 2315 10f2 EC AB                   		mov.L	[r10], r11
 2316 10f4 FB A2 00 00 00 00       		mov.L	#_menu_layers, r10
 2317 10fa EC 6C                   		mov.L	[r6], r12
 2318 10fc FE 6C AA                		mov.L	[r12,r10], r10
 2319 10ff 60 1A                   		sub	#1, r10
 2320 1101 6C 3A                   		shll	#3, r10
 2321 1103 ED 6C 01                		mov.L	4[r6], r12
 2322 1106 4B CA                   		add	r12, r10
 2323 1108 ED AA 01                		mov.L	4[r10], r10
 2324 110b FC 37 AB                		xor	r10, r11
 2325 110e ED 6A 03                		mov.L	12[r6], r10
 2326 1111 E3 AB                   		mov.L	r11, [r10]
 2327 1113 2E 27                   		bra	.L175
 2328                             	.L176:
 935:SOURCES/menu.c **** 	else if( !MULTIPLE_SELECT( nOptions ) ) //&& menuSelItems[ *nIndex ].value != 0UL )
 2329                             		.loc 1 935 0
 2330 1115 ED 6A 02                		mov.L	8[r6], r10
 2331 1118 64 2A                   		and	#2, r10
 2332 111a 61 0A                   		cmp	#0, r10
 2333 111c 21 1E                   		bne	.L175
 936:SOURCES/menu.c **** 		*lValue = menuSelItems[ menu_layers[ nCurr ] -1 ].value;
 2334                             		.loc 1 936 0
 2335 111e FB A2 00 00 00 00       		mov.L	#_menu_layers, r10
 2336 1124 EC 6B                   		mov.L	[r6], r11
 2337 1126 FE 6B AA                		mov.L	[r11,r10], r10
 2338 1129 60 1A                   		sub	#1, r10
 2339 112b 6C 3A                   		shll	#3, r10
 2340 112d ED 6B 01                		mov.L	4[r6], r11
 2341 1130 4B BA                   		add	r11, r10
 2342 1132 ED AB 01                		mov.L	4[r10], r11
 2343 1135 ED 6A 03                		mov.L	12[r6], r10
 2344 1138 E3 AB                   		mov.L	r11, [r10]
 2345                             		.balign 2,3,1
 2346                             	.L175:
 937:SOURCES/menu.c **** 
 938:SOURCES/menu.c **** 	if( RETURN_SINGLE_SELECT(nOptions) )
 2347                             		.loc 1 938 0
 2348 113a ED 6A 02                		mov.L	8[r6], r10
 2349 113d 64 4A                   		and	#4, r10
 2350 113f 61 0A                   		cmp	#0, r10
 2351 1141 20 19                   		beq	.L173
 2352                             		.loc 1 938 0 is_stmt 0 discriminator 1
 2353 1143 ED 6A 02                		mov.L	8[r6], r10
 2354 1146 64 2A                   		and	#2, r10
 2355 1148 61 0A                   		cmp	#0, r10
 2356 114a 21 10                   		bne	.L173
 939:SOURCES/menu.c **** 		menu_layers[ nCurr ] = 0;
 2357                             		.loc 1 939 0 is_stmt 1
 2358 114c FB A2 00 00 00 00       		mov.L	#_menu_layers, r10
 2359 1152 EC 6B                   		mov.L	[r6], r11
 2360 1154 66 07                   		mov.L	#0, r7
 2361 1156 FE 2B A7                		mov.L	r7, [r11,r10]
 2362 1159 03                      		.balign 2,3,2
 2363                             	.L173:
 940:SOURCES/menu.c **** }
 2364                             		.loc 1 940 0
 2365 115a 3F 6C 0B                		rtsd	#44, r6-r12
 2366                             	.LFE21:
 2369                             	_display_check_box:
 2370                             	.LFB22:
 941:SOURCES/menu.c **** 
 942:SOURCES/menu.c **** static void display_check_box( int nCurr, sSelMenu *menuSelItems, int nOptions, long *lValue )
 943:SOURCES/menu.c **** {
 2371                             		.loc 1 943 0
 2372 115d 6E 6B                   		pushm	r6-r11
 2373                             	.LCFI64:
 2374 115f 71 06 EC                		add	#-20, r0, r6
 2375                             	.LCFI65:
 2376 1162 EF 60                   		mov.L	r6, r0
 2377                             	.LCFI66:
 2378 1164 A0 69                   		mov.L	r1, 4[r6]
 2379 1166 A0 E2                   		mov.L	r2, 8[r6]
 2380 1168 A0 EB                   		mov.L	r3, 12[r6]
 2381 116a A1 64                   		mov.L	r4, 16[r6]
 944:SOURCES/menu.c **** 	int nCheck;
 945:SOURCES/menu.c **** 	nCheck = FALSE;
 2382                             		.loc 1 945 0
 2383 116c 3E 60 00                		mov.L	#0, [r6]
 946:SOURCES/menu.c **** 	if( menuSelItems[ menu_layers[ nCurr ] -1 ].value == -1L )
 2384                             		.loc 1 946 0
 2385 116f FB A2 00 00 00 00       		mov.L	#_menu_layers, r10
 2386 1175 ED 6B 01                		mov.L	4[r6], r11
 2387 1178 FE 6B AA                		mov.L	[r11,r10], r10
 2388 117b 60 1A                   		sub	#1, r10
 2389 117d 6C 3A                   		shll	#3, r10
 2390 117f ED 6B 02                		mov.L	8[r6], r11
 2391 1182 4B BA                   		add	r11, r10
 2392 1184 ED AA 01                		mov.L	4[r10], r10
 2393 1187 75 0A FF                		cmp	#-1, r10
 2394 118a 18                      		bne	.L179
 947:SOURCES/menu.c **** 	{
 948:SOURCES/menu.c **** 		display_image( NULL ); // show exit sign
 2395                             		.loc 1 948 0
 2396 118b 66 01                   		mov.L	#0, r1
 2397 118d 39 5E FA                		bsr	_display_image
 949:SOURCES/menu.c **** 		return;
 2398                             		.loc 1 949 0
 2399 1190 2E 76                   		bra	.L178
 2400                             	.L179:
 950:SOURCES/menu.c **** 	}
 951:SOURCES/menu.c **** 	else if( MULTIPLE_SELECT( nOptions ) && menuSelItems[ menu_layers[ nCurr ] -1 ].value & *lValue )
 2401                             		.loc 1 951 0
 2402 1192 ED 6A 03                		mov.L	12[r6], r10
 2403 1195 64 2A                   		and	#2, r10
 2404 1197 61 0A                   		cmp	#0, r10
 2405 1199 20 29                   		beq	.L181
 2406                             		.loc 1 951 0 is_stmt 0 discriminator 1
 2407 119b FB A2 00 00 00 00       		mov.L	#_menu_layers, r10
 2408 11a1 ED 6B 01                		mov.L	4[r6], r11
 2409 11a4 FE 6B AA                		mov.L	[r11,r10], r10
 2410 11a7 60 1A                   		sub	#1, r10
 2411 11a9 6C 3A                   		shll	#3, r10
 2412 11ab ED 6B 02                		mov.L	8[r6], r11
 2413 11ae 4B BA                   		add	r11, r10
 2414 11b0 ED AB 01                		mov.L	4[r10], r11
 2415 11b3 ED 6A 04                		mov.L	16[r6], r10
 2416 11b6 EC AA                   		mov.L	[r10], r10
 2417 11b8 53 BA                   		and	r11, r10
 2418 11ba 61 0A                   		cmp	#0, r10
 2419 11bc 16                      		beq	.L181
 952:SOURCES/menu.c **** 	{
 953:SOURCES/menu.c **** 		nCheck = TRUE;
 2420                             		.loc 1 953 0 is_stmt 1
 2421 11bd 3E 60 01                		mov.L	#1, [r6]
 2422 11c0 2E 2E                   		bra	.L182
 2423                             	.L181:
 954:SOURCES/menu.c **** 	}
 955:SOURCES/menu.c **** 	else if( !MULTIPLE_SELECT( nOptions ) && menuSelItems[ menu_layers[ nCurr ] -1 ].value == *lValue 
 2424                             		.loc 1 955 0
 2425 11c2 ED 6A 03                		mov.L	12[r6], r10
 2426 11c5 64 2A                   		and	#2, r10
 2427 11c7 61 0A                   		cmp	#0, r10
 2428 11c9 21 25                   		bne	.L182
 2429                             		.loc 1 955 0 is_stmt 0 discriminator 1
 2430 11cb FB A2 00 00 00 00       		mov.L	#_menu_layers, r10
 2431 11d1 ED 6B 01                		mov.L	4[r6], r11
 2432 11d4 FE 6B AA                		mov.L	[r11,r10], r10
 2433 11d7 60 1A                   		sub	#1, r10
 2434 11d9 6C 3A                   		shll	#3, r10
 2435 11db ED 6B 02                		mov.L	8[r6], r11
 2436 11de 4B BA                   		add	r11, r10
 2437 11e0 ED AB 01                		mov.L	4[r10], r11
 2438 11e3 ED 6A 04                		mov.L	16[r6], r10
 2439 11e6 EC AA                   		mov.L	[r10], r10
 2440 11e8 47 AB                   		cmp	r10, r11
 2441 11ea 1C                      		bne	.L182
 956:SOURCES/menu.c **** 		nCheck = TRUE;
 2442                             		.loc 1 956 0 is_stmt 1
 2443 11eb 3E 60 01                		mov.L	#1, [r6]
 2444                             		.balign 2,3,1
 2445                             	.L182:
 957:SOURCES/menu.c **** 
 958:SOURCES/menu.c **** 	display_image( (unsigned char*)((nCheck)?_checked:_uncheck));
 2446                             		.loc 1 958 0
 2447 11ee EC 6A                   		mov.L	[r6], r10
 2448 11f0 61 0A                   		cmp	#0, r10
 2449 11f2 10                      		beq	.L183
 2450                             		.loc 1 958 0 is_stmt 0 discriminator 1
 2451 11f3 FB A2 00 00 00 00       		mov.L	#__checked, r10
 2452 11f9 0F                      		bra	.L184
 2453                             	.L183:
 2454                             		.loc 1 958 0 discriminator 2
 2455 11fa FB A2 00 00 00 00       		mov.L	#__uncheck, r10
 2456                             		.balign 2,3,1
 2457                             	.L184:
 2458                             		.loc 1 958 0 discriminator 3
 2459 1200 EF A1                   		mov.L	r10, r1
 2460 1202 39 E9 F9                		bsr	_display_image
 2461 1205 03                      		.balign 2,3,2
 2462                             	.L178:
 959:SOURCES/menu.c **** }
 2463                             		.loc 1 959 0 is_stmt 1
 2464 1206 3F 6B 0B                		rtsd	#44, r6-r11
 2465                             	.LFE22:
 2468                             	_get_graph_menu_sel_input:
 2469                             	.LFB23:
 960:SOURCES/menu.c **** 
 961:SOURCES/menu.c **** static int get_graph_menu_sel_input( int nCurr, sSelMenu *menuSelItems, int nMax, int nOptions, lon
 962:SOURCES/menu.c **** {
 2470                             		.loc 1 962 0
 2471 1209 6E 6D                   		pushm	r6-r13
 2472                             	.LCFI67:
 2473 120b 71 06 E8                		add	#-24, r0, r6
 2474                             	.LCFI68:
 2475 120e EF 60                   		mov.L	r6, r0
 2476                             	.LCFI69:
 2477 1210 75 4B 3C                		mov.L	#60, r11
 2478 1213 4B 6B                   		add	r6, r11
 2479 1215 A0 69                   		mov.L	r1, 4[r6]
 2480 1217 A0 E2                   		mov.L	r2, 8[r6]
 2481 1219 A0 EB                   		mov.L	r3, 12[r6]
 2482 121b A1 64                   		mov.L	r4, 16[r6]
 963:SOURCES/menu.c **** 	int nKey = WaitForKey();
 2483                             		.loc 1 963 0
 2484 121d 05 00 00 00             		bsr	_WaitForKey
 2485 1221 E3 61                   		mov.L	r1, [r6]
 964:SOURCES/menu.c **** 	switch( nKey )
 2486                             		.loc 1 964 0
 2487 1223 EC 6A                   		mov.L	[r6], r10
 2488 1225 75 5A 80                		cmp	#0x80, r10
 2489 1228 20 39                   		beq	.L189
 2490 122a 75 5A 80                		cmp	#0x80, r10
 2491 122d 2A 1D                   		bgt	.L192
 2492 122f 75 5A 1B                		cmp	#27, r10
 2493 1232 3A BF 00                		beq	.L187
 2494 1235 75 5A 1B                		cmp	#27, r10
 2495 1238 28 05 38 02 01          		blt	.L186
 2496 123d 71 AA CF                		add	#-49, r10
 2497 1240 61 8A                   		cmp	#8, r10
 2498 1242 25 05 38 F8 00          		bgtu	.L186
 2499 1247 38 BC 00                		bra	.L200
 2500                             	.L192:
 2501 124a 75 5A 82                		cmp	#0x82, r10
 2502 124d 20 64                   		beq	.L191
 2503 124f 75 5A 82                		cmp	#0x82, r10
 2504 1252 29 1F                   		blt	.L190
 2505 1254 75 5A 85                		cmp	#0x85, r10
 2506 1257 12                      		beq	.L189
 2507 1258 75 5A 86                		cmp	#0x86, r10
 2508 125b 3A 96 00                		beq	.L187
 2509 125e 38 DE 00                		bra	.L186
 2510                             	.L189:
 965:SOURCES/menu.c **** 	{
 966:SOURCES/menu.c **** 		case ENT_KEY:
 967:SOURCES/menu.c **** 		case TRIGGER_KEY:
 968:SOURCES/menu.c **** 
 969:SOURCES/menu.c **** 			// Change the value item first before redrawing
 970:SOURCES/menu.c **** 			graph_menu_sel_set_value( nCurr, menuSelItems, nOptions, lValue );
 2511                             		.loc 1 970 0
 2512 1261 A8 69                   		mov.L	4[r6], r1
 2513 1263 A8 E2                   		mov.L	8[r6], r2
 2514 1265 A9 63                   		mov.L	16[r6], r3
 2515 1267 EC B4                   		mov.L	[r11], r4
 2516 1269 39 43 FE                		bsr	_graph_menu_sel_set_value
 971:SOURCES/menu.c **** 
 972:SOURCES/menu.c **** 			return TRUE; // exit
 2517                             		.loc 1 972 0
 2518 126c 66 1A                   		mov.L	#1, r10
 2519 126e 38 D4 00                		bra	.L193
 2520                             	.L190:
 973:SOURCES/menu.c **** 
 974:SOURCES/menu.c **** 		case UP_KEY:
 975:SOURCES/menu.c **** #if !OPH1005
 976:SOURCES/menu.c **** 		case LEFT_KEY:
 977:SOURCES/menu.c **** #endif
 978:SOURCES/menu.c **** #if PHL|PHL1000|PHL2700
 979:SOURCES/menu.c **** 	case Q1_KEY:
 980:SOURCES/menu.c **** 	case F5_KEY:
 981:SOURCES/menu.c **** 	case F7_KEY:
 982:SOURCES/menu.c **** #endif
 983:SOURCES/menu.c **** 			if( menu_layers[ nCurr ] > 1 )
 2521                             		.loc 1 983 0
 2522 1271 FB A2 00 00 00 00       		mov.L	#_menu_layers, r10
 2523 1277 ED 6B 01                		mov.L	4[r6], r11
 2524 127a FE 6B AA                		mov.L	[r11,r10], r10
 2525 127d 61 1A                   		cmp	#1, r10
 2526 127f 2B 20                   		ble	.L194
 984:SOURCES/menu.c **** 				menu_layers[ nCurr ]--;
 2527                             		.loc 1 984 0
 2528 1281 FB A2 00 00 00 00       		mov.L	#_menu_layers, r10
 2529 1287 ED 6B 01                		mov.L	4[r6], r11
 2530 128a FE 6B AA                		mov.L	[r11,r10], r10
 2531 128d 71 AC FF                		add	#-1, r10, r12
 2532 1290 FB A2 00 00 00 00       		mov.L	#_menu_layers, r10
 2533 1296 ED 6B 01                		mov.L	4[r6], r11
 2534 1299 FE 2B AC                		mov.L	r12, [r11,r10]
 985:SOURCES/menu.c **** 			else
 986:SOURCES/menu.c **** 				menu_layers[ nCurr ] = nMax;
 987:SOURCES/menu.c **** 			break;
 2535                             		.loc 1 987 0
 2536 129c 38 A4 00                		bra	.L196
 2537                             	.L194:
 986:SOURCES/menu.c **** 				menu_layers[ nCurr ] = nMax;
 2538                             		.loc 1 986 0
 2539 129f FB A2 00 00 00 00       		mov.L	#_menu_layers, r10
 2540 12a5 ED 6B 01                		mov.L	4[r6], r11
 2541 12a8 ED 6C 03                		mov.L	12[r6], r12
 2542 12ab FE 2B AC                		mov.L	r12, [r11,r10]
 2543                             		.loc 1 987 0
 2544 12ae 38 92 00                		bra	.L196
 2545                             	.L191:
 988:SOURCES/menu.c **** 
 989:SOURCES/menu.c **** 		case DOWN_KEY:
 990:SOURCES/menu.c **** #if !OPH1005
 991:SOURCES/menu.c **** 		case RIGHT_KEY:
 992:SOURCES/menu.c **** #endif
 993:SOURCES/menu.c **** #if PHL|PHL1000|PHL2700
 994:SOURCES/menu.c **** 	case Q2_KEY:
 995:SOURCES/menu.c **** 	case F6_KEY:
 996:SOURCES/menu.c **** 	case F8_KEY:
 997:SOURCES/menu.c **** #endif
 998:SOURCES/menu.c **** 			if( menu_layers[ nCurr ] < nMax )
 2546                             		.loc 1 998 0
 2547 12b1 FB A2 00 00 00 00       		mov.L	#_menu_layers, r10
 2548 12b7 ED 6B 01                		mov.L	4[r6], r11
 2549 12ba FE 6B AB                		mov.L	[r11,r10], r11
 2550 12bd ED 6A 03                		mov.L	12[r6], r10
 2551 12c0 47 AB                   		cmp	r10, r11
 2552 12c2 28 1F                   		bge	.L197
 999:SOURCES/menu.c **** 				menu_layers[ nCurr ]++;
 2553                             		.loc 1 999 0
 2554 12c4 FB A2 00 00 00 00       		mov.L	#_menu_layers, r10
 2555 12ca ED 6B 01                		mov.L	4[r6], r11
 2556 12cd FE 6B AA                		mov.L	[r11,r10], r10
 2557 12d0 71 AC 01                		add	#1, r10, r12
 2558 12d3 FB A2 00 00 00 00       		mov.L	#_menu_layers, r10
 2559 12d9 ED 6B 01                		mov.L	4[r6], r11
 2560 12dc FE 2B AC                		mov.L	r12, [r11,r10]
1000:SOURCES/menu.c **** 			else
1001:SOURCES/menu.c **** 				menu_layers[ nCurr ] = 1;
1002:SOURCES/menu.c **** 			break;
 2561                             		.loc 1 1002 0
 2562 12df 2E 61                   		bra	.L196
 2563                             	.L197:
1001:SOURCES/menu.c **** 				menu_layers[ nCurr ] = 1;
 2564                             		.loc 1 1001 0
 2565 12e1 FB A2 00 00 00 00       		mov.L	#_menu_layers, r10
 2566 12e7 ED 6B 01                		mov.L	4[r6], r11
 2567 12ea 66 17                   		mov.L	#1, r7
 2568 12ec FE 2B A7                		mov.L	r7, [r11,r10]
 2569                             		.loc 1 1002 0
 2570 12ef 2E 51                   		bra	.L196
 2571                             	.L187:
1003:SOURCES/menu.c **** 		case CLR_KEY:
1004:SOURCES/menu.c **** 		case ESC_KEY:
1005:SOURCES/menu.c **** 			menu_layers[ nCurr ] = 0;
 2572                             		.loc 1 1005 0
 2573 12f1 FB A2 00 00 00 00       		mov.L	#_menu_layers, r10
 2574 12f7 ED 6B 01                		mov.L	4[r6], r11
 2575 12fa 66 07                   		mov.L	#0, r7
 2576 12fc FE 2B A7                		mov.L	r7, [r11,r10]
1006:SOURCES/menu.c **** 			return TRUE;
 2577                             		.loc 1 1006 0
 2578 12ff 66 1A                   		mov.L	#1, r10
 2579 1301 2E 41                   		bra	.L193
 2580                             	.L200:
1007:SOURCES/menu.c **** 
1008:SOURCES/menu.c **** 		case '1':	case '2':	case '3':
1009:SOURCES/menu.c **** 		case '4':	case '5':	case '6':
1010:SOURCES/menu.c **** 		case '7':	case '8':	case '9':
1011:SOURCES/menu.c **** 			if( (nKey - 0x30) > 0 && (nKey - 0x30) <= nMax)
 2581                             		.loc 1 1011 0
 2582 1303 EC 6A                   		mov.L	[r6], r10
 2583 1305 71 AA D0                		add	#-48, r10
 2584 1308 61 0A                   		cmp	#0, r10
 2585 130a 2B 2E                   		ble	.L199
 2586                             		.loc 1 1011 0 is_stmt 0 discriminator 1
 2587 130c EC 6A                   		mov.L	[r6], r10
 2588 130e 71 AC D0                		add	#-48, r10, r12
 2589 1311 ED 6A 03                		mov.L	12[r6], r10
 2590 1314 47 AC                   		cmp	r10, r12
 2591 1316 2A 22                   		bgt	.L199
1012:SOURCES/menu.c **** 			{
1013:SOURCES/menu.c **** 				menu_layers[ nCurr ] = nKey - 0x30;
 2592                             		.loc 1 1013 0 is_stmt 1
 2593 1318 EC 6A                   		mov.L	[r6], r10
 2594 131a 71 AD D0                		add	#-48, r10, r13
 2595 131d FB A2 00 00 00 00       		mov.L	#_menu_layers, r10
 2596 1323 ED 6C 01                		mov.L	4[r6], r12
 2597 1326 FE 2C AD                		mov.L	r13, [r12,r10]
1014:SOURCES/menu.c **** 				graph_menu_sel_set_value( nCurr, menuSelItems, nOptions, lValue );
 2598                             		.loc 1 1014 0
 2599 1329 A8 69                   		mov.L	4[r6], r1
 2600 132b A8 E2                   		mov.L	8[r6], r2
 2601 132d A9 63                   		mov.L	16[r6], r3
 2602 132f EC B4                   		mov.L	[r11], r4
 2603 1331 39 7B FD                		bsr	_graph_menu_sel_set_value
1015:SOURCES/menu.c **** 
1016:SOURCES/menu.c **** 				return TRUE;
 2604                             		.loc 1 1016 0
 2605 1334 66 1A                   		mov.L	#1, r10
 2606 1336 2E 0C                   		bra	.L193
 2607                             	.L199:
1017:SOURCES/menu.c **** 			}
1018:SOURCES/menu.c **** 			errorbeep();
 2608                             		.loc 1 1018 0
 2609 1338 39 2B EF                		bsr	_errorbeep
1019:SOURCES/menu.c **** 			break;
 2610                             		.loc 1 1019 0
 2611 133b 0D                      		bra	.L196
 2612                             	.L186:
1020:SOURCES/menu.c **** 		default:
1021:SOURCES/menu.c **** 			errorbeep();
 2613                             		.loc 1 1021 0
 2614 133c 39 27 EF                		bsr	_errorbeep
1022:SOURCES/menu.c **** 			break;
 2615                             		.loc 1 1022 0
 2616 133f 03                      		nop
 2617                             		.balign 2,3,1
 2618                             	.L196:
1023:SOURCES/menu.c **** 	}
1024:SOURCES/menu.c **** 	return FALSE;
 2619                             		.loc 1 1024 0
 2620 1340 66 0A                   		mov.L	#0, r10
 2621                             		.balign 2,3,1
 2622                             	.L193:
1025:SOURCES/menu.c **** }
 2623                             		.loc 1 1025 0
 2624 1342 EF A1                   		mov.L	r10, r1
 2625 1344 3F 6D 0E                		rtsd	#56, r6-r13
 2626                             	.LFE23:
 2628                             		.global	_ShowGraphSelectionMenu
 2630                             	_ShowGraphSelectionMenu:
 2631                             	.LFB24:
1026:SOURCES/menu.c **** 
1027:SOURCES/menu.c **** void ShowGraphSelectionMenu( sSelMenu *menuSelItems, int nMax, int nOptions, long *lValue )
1028:SOURCES/menu.c **** {
 2632                             		.loc 1 1028 0
 2633 1347 6E 6B                   		pushm	r6-r11
 2634                             	.LCFI70:
 2635 1349 71 06 EC                		add	#-20, r0, r6
 2636                             	.LCFI71:
 2637 134c 71 60 FC                		add	#-4, r6, r0
 2638                             	.LCFI72:
 2639 134f A0 69                   		mov.L	r1, 4[r6]
 2640 1351 A0 E2                   		mov.L	r2, 8[r6]
 2641 1353 A0 EB                   		mov.L	r3, 12[r6]
 2642 1355 A1 64                   		mov.L	r4, 16[r6]
1029:SOURCES/menu.c **** 	int nCurrLayer;
1030:SOURCES/menu.c **** 	static char layer_string[ MAX_LAYERS*3 ];
1031:SOURCES/menu.c **** 
1032:SOURCES/menu.c **** #if PHL1000
1033:SOURCES/menu.c **** 	cursor( NOICONS );
1034:SOURCES/menu.c **** #endif
1035:SOURCES/menu.c **** 	cursor( NOWRAP );
 2643                             		.loc 1 1035 0
 2644 1357 66 41                   		mov.L	#4, r1
 2645 1359 05 00 00 00             		bsr	_cursor
1036:SOURCES/menu.c **** 	GraphIncLayer( 1 );
 2646                             		.loc 1 1036 0
 2647 135d 66 11                   		mov.L	#1, r1
 2648 135f 05 00 00 00             		bsr	_GraphIncLayer
1037:SOURCES/menu.c **** 	nCurrLayer  = build_layer_string( layer_string );
 2649                             		.loc 1 1037 0
 2650 1363 FB 12 28 00 00 00       		mov.L	#_layer_string.3829, r1
 2651 1369 39 44 F7                		bsr	_build_layer_string
 2652 136c E3 61                   		mov.L	r1, [r6]
1038:SOURCES/menu.c **** 
1039:SOURCES/menu.c **** 	putchar('\f');
 2653                             		.loc 1 1039 0
 2654 136e FB A2 00 00 00 00       		mov.L	#__impure_ptr, r10
 2655 1374 EC AA                   		mov.L	[r10], r10
 2656 1376 ED AA 02                		mov.L	8[r10], r10
 2657 1379 ED AB 02                		mov.L	8[r10], r11
 2658 137c 60 1B                   		sub	#1, r11
 2659 137e E7 AB 02                		mov.L	r11, 8[r10]
 2660 1381 ED AA 02                		mov.L	8[r10], r10
 2661 1384 61 0A                   		cmp	#0, r10
 2662 1386 29 05 38 99 00          		bge	.L202
 2663                             		.loc 1 1039 0 is_stmt 0 discriminator 1
 2664 138b FB A2 00 00 00 00       		mov.L	#__impure_ptr, r10
 2665 1391 EC AA                   		mov.L	[r10], r10
 2666 1393 ED AA 02                		mov.L	8[r10], r10
 2667 1396 ED AB 02                		mov.L	8[r10], r11
 2668 1399 FB A2 00 00 00 00       		mov.L	#__impure_ptr, r10
 2669 139f EC AA                   		mov.L	[r10], r10
 2670 13a1 ED AA 02                		mov.L	8[r10], r10
 2671 13a4 ED AA 06                		mov.L	24[r10], r10
 2672 13a7 47 AB                   		cmp	r10, r11
 2673 13a9 29 59                   		blt	.L203
 2674                             		.loc 1 1039 0 discriminator 3
 2675 13ab FB A2 00 00 00 00       		mov.L	#__impure_ptr, r10
 2676 13b1 EC AA                   		mov.L	[r10], r10
 2677 13b3 ED AA 02                		mov.L	8[r10], r10
 2678 13b6 EC AA                   		mov.L	[r10], r10
 2679 13b8 F8 A4 0C                		mov.B	#12, [r10]
 2680 13bb FB A2 00 00 00 00       		mov.L	#__impure_ptr, r10
 2681 13c1 EC AA                   		mov.L	[r10], r10
 2682 13c3 ED AA 02                		mov.L	8[r10], r10
 2683 13c6 EC AA                   		mov.L	[r10], r10
 2684 13c8 CC AA                   		mov.B	[r10], r10
 2685 13ca 5B AA                   		movu.B	r10, r10
 2686 13cc 61 AA                   		cmp	#10, r10
 2687 13ce 20 15                   		beq	.L204
 2688                             		.loc 1 1039 0 discriminator 5
 2689 13d0 FB A2 00 00 00 00       		mov.L	#__impure_ptr, r10
 2690 13d6 EC AA                   		mov.L	[r10], r10
 2691 13d8 ED AA 02                		mov.L	8[r10], r10
 2692 13db EC AB                   		mov.L	[r10], r11
 2693 13dd 62 1B                   		add	#1, r11
 2694 13df E3 AB                   		mov.L	r11, [r10]
 2695 13e1 2E 61                   		bra	.L207
 2696                             	.L204:
 2697                             		.loc 1 1039 0 discriminator 6
 2698 13e3 FB A2 00 00 00 00       		mov.L	#__impure_ptr, r10
 2699 13e9 EC AB                   		mov.L	[r10], r11
 2700 13eb FB A2 00 00 00 00       		mov.L	#__impure_ptr, r10
 2701 13f1 EC AA                   		mov.L	[r10], r10
 2702 13f3 ED AA 02                		mov.L	8[r10], r10
 2703 13f6 EF B1                   		mov.L	r11, r1
 2704 13f8 66 A2                   		mov.L	#10, r2
 2705 13fa EF A3                   		mov.L	r10, r3
 2706 13fc 05 00 00 00             		bsr	___swbuf_r
 2707 1400 2E 42                   		bra	.L207
 2708                             	.L203:
 2709                             		.loc 1 1039 0 discriminator 4
 2710 1402 FB A2 00 00 00 00       		mov.L	#__impure_ptr, r10
 2711 1408 EC AB                   		mov.L	[r10], r11
 2712 140a FB A2 00 00 00 00       		mov.L	#__impure_ptr, r10
 2713 1410 EC AA                   		mov.L	[r10], r10
 2714 1412 ED AA 02                		mov.L	8[r10], r10
 2715 1415 EF B1                   		mov.L	r11, r1
 2716 1417 66 C2                   		mov.L	#12, r2
 2717 1419 EF A3                   		mov.L	r10, r3
 2718 141b 05 00 00 00             		bsr	___swbuf_r
 2719 141f 2E 23                   		bra	.L207
 2720                             	.L202:
 2721                             		.loc 1 1039 0 discriminator 2
 2722 1421 FB A2 00 00 00 00       		mov.L	#__impure_ptr, r10
 2723 1427 EC AA                   		mov.L	[r10], r10
 2724 1429 ED AA 02                		mov.L	8[r10], r10
 2725 142c EC AA                   		mov.L	[r10], r10
 2726 142e F8 A4 0C                		mov.B	#12, [r10]
 2727 1431 FB A2 00 00 00 00       		mov.L	#__impure_ptr, r10
 2728 1437 EC AA                   		mov.L	[r10], r10
 2729 1439 ED AA 02                		mov.L	8[r10], r10
 2730 143c EC AB                   		mov.L	[r10], r11
 2731 143e 62 1B                   		add	#1, r11
 2732 1440 E3 AB                   		mov.L	r11, [r10]
 2733                             		.balign 2,3,3
 2734                             	.L207:
1040:SOURCES/menu.c **** 	resetkey();
 2735                             		.loc 1 1040 0 is_stmt 1
 2736 1442 05 00 00 00             		bsr	_resetkey
 2737 1446 2E 04                   		bra	.L210
 2738                             	.L211:
1041:SOURCES/menu.c **** 	for(;;)
1042:SOURCES/menu.c **** 	{
1043:SOURCES/menu.c **** 		display_layer( layer_string, menu_layers[ nCurrLayer ] );
1044:SOURCES/menu.c **** 
1045:SOURCES/menu.c **** 		display_menu_item_text( menuSelItems[ menu_layers[ nCurrLayer ]-1].text );
1046:SOURCES/menu.c **** 
1047:SOURCES/menu.c **** 		display_check_box( nCurrLayer, menuSelItems, nOptions, lValue );
1048:SOURCES/menu.c **** 
1049:SOURCES/menu.c **** 		display_selection_bar();
1050:SOURCES/menu.c **** 
1051:SOURCES/menu.c **** 		display_progress_bar( menu_layers[ nCurrLayer ], nMax );
1052:SOURCES/menu.c **** 
1053:SOURCES/menu.c **** 		if( get_graph_menu_sel_input( nCurrLayer, menuSelItems, nMax, nOptions, lValue))
1054:SOURCES/menu.c **** 		{
1055:SOURCES/menu.c **** 			if( menu_layers[ nCurrLayer ] == 0 )
1056:SOURCES/menu.c **** 				return;
1057:SOURCES/menu.c **** 		}
1058:SOURCES/menu.c **** 	}
 2739                             		.loc 1 1058 0
 2740 1448 03                      		nop
 2741 1449 03                      		.balign 2,3,5
 2742                             	.L210:
1043:SOURCES/menu.c **** 		display_layer( layer_string, menu_layers[ nCurrLayer ] );
 2743                             		.loc 1 1043 0
 2744 144a FB A2 00 00 00 00       		mov.L	#_menu_layers, r10
 2745 1450 EC 6B                   		mov.L	[r6], r11
 2746 1452 FE 6B AA                		mov.L	[r11,r10], r10
 2747 1455 FB 12 28 00 00 00       		mov.L	#_layer_string.3829, r1
 2748 145b EF A2                   		mov.L	r10, r2
 2749 145d 39 22 F7                		bsr	_display_layer
1045:SOURCES/menu.c **** 		display_menu_item_text( menuSelItems[ menu_layers[ nCurrLayer ]-1].text );
 2750                             		.loc 1 1045 0
 2751 1460 FB A2 00 00 00 00       		mov.L	#_menu_layers, r10
 2752 1466 EC 6B                   		mov.L	[r6], r11
 2753 1468 FE 6B AA                		mov.L	[r11,r10], r10
 2754 146b 60 1A                   		sub	#1, r10
 2755 146d 6C 3A                   		shll	#3, r10
 2756 146f ED 6B 01                		mov.L	4[r6], r11
 2757 1472 4B BA                   		add	r11, r10
 2758 1474 EC AA                   		mov.L	[r10], r10
 2759 1476 EF A1                   		mov.L	r10, r1
 2760 1478 39 15 F7                		bsr	_display_menu_item_text
1047:SOURCES/menu.c **** 		display_check_box( nCurrLayer, menuSelItems, nOptions, lValue );
 2761                             		.loc 1 1047 0
 2762 147b EC 61                   		mov.L	[r6], r1
 2763 147d A8 6A                   		mov.L	4[r6], r2
 2764 147f A8 EB                   		mov.L	12[r6], r3
 2765 1481 A9 64                   		mov.L	16[r6], r4
 2766 1483 39 DA FC                		bsr	_display_check_box
1049:SOURCES/menu.c **** 		display_selection_bar();
 2767                             		.loc 1 1049 0
 2768 1486 39 C3 F7                		bsr	_display_selection_bar
1051:SOURCES/menu.c **** 		display_progress_bar( menu_layers[ nCurrLayer ], nMax );
 2769                             		.loc 1 1051 0
 2770 1489 FB A2 00 00 00 00       		mov.L	#_menu_layers, r10
 2771 148f EC 6B                   		mov.L	[r6], r11
 2772 1491 FE 6B AA                		mov.L	[r11,r10], r10
 2773 1494 EF A1                   		mov.L	r10, r1
 2774 1496 A8 E2                   		mov.L	8[r6], r2
 2775 1498 39 EA F7                		bsr	_display_progress_bar
1053:SOURCES/menu.c **** 		if( get_graph_menu_sel_input( nCurrLayer, menuSelItems, nMax, nOptions, lValue))
 2776                             		.loc 1 1053 0
 2777 149b ED 6A 04                		mov.L	16[r6], r10
 2778 149e E3 0A                   		mov.L	r10, [r0]
 2779 14a0 EC 61                   		mov.L	[r6], r1
 2780 14a2 A8 6A                   		mov.L	4[r6], r2
 2781 14a4 A8 E3                   		mov.L	8[r6], r3
 2782 14a6 A8 EC                   		mov.L	12[r6], r4
 2783 14a8 39 61 FD                		bsr	_get_graph_menu_sel_input
 2784 14ab EF 1A                   		mov.L	r1, r10
 2785 14ad 61 0A                   		cmp	#0, r10
 2786 14af 20 99                   		beq	.L211
1055:SOURCES/menu.c **** 			if( menu_layers[ nCurrLayer ] == 0 )
 2787                             		.loc 1 1055 0
 2788 14b1 FB A2 00 00 00 00       		mov.L	#_menu_layers, r10
 2789 14b7 EC 6B                   		mov.L	[r6], r11
 2790 14b9 FE 6B AA                		mov.L	[r11,r10], r10
 2791 14bc 61 0A                   		cmp	#0, r10
 2792 14be 21 8A                   		bne	.L211
1056:SOURCES/menu.c **** 				return;
 2793                             		.loc 1 1056 0
 2794 14c0 03                      		nop
1059:SOURCES/menu.c **** }
 2795                             		.loc 1 1059 0
 2796 14c1 3F 6B 0C                		rtsd	#48, r6-r11
 2797                             	.LFE24:
 2799                             		.local	_layer_string.3829
 2800                             		.comm	_layer_string.3829,30,1
 2801                             		.local	_layer_string.3782
 2802                             		.comm	_layer_string.3782,30,1
 2803                             		.local	_tmp.3727
 2804                             		.comm	_tmp.3727,3,1
 3610                             	.Letext0:
 3611                             		.file 2 "c:\\rx_compiler\\bin\\../lib/gcc/rx-elf/4.7-GNURX_v12.02/../../../../rx-elf/include/sys/l
 3612                             		.file 3 "c:\\rx_compiler\\bin\\../lib/gcc/rx-elf/4.7-GNURX_v12.02/../../../../rx-elf/include/sys/_
 3613                             		.file 4 "c:\\rx_compiler\\bin\\../lib/gcc/rx-elf/4.7-GNURX_v12.02/include/stddef.h"
 3614                             		.file 5 "c:\\rx_compiler\\bin\\../lib/gcc/rx-elf/4.7-GNURX_v12.02/../../../../rx-elf/include/sys/r
 3615                             		.file 6 "SOURCES/menu.h"
DEFINED SYMBOLS
                            *ABS*:00000000 menu.c
C:\Users\willem\AppData\Local\Temp\ccKPIB9j.s:5      B_1:00000000 _menu_layers
C:\Users\willem\AppData\Local\Temp\ccKPIB9j.s:7      P:00000000 _GetMaxCharsXPos
C:\Users\willem\AppData\Local\Temp\ccKPIB9j.s:11     P:00000000 L0
C:\Users\willem\AppData\Local\Temp\ccKPIB9j.s:38     P:0000002c _GetMaxYLines
C:\Users\willem\AppData\Local\Temp\ccKPIB9j.s:77     P:00000058 _display_txt_header
C:\Users\willem\AppData\Local\Temp\ccKPIB9j.s:174    P:00000103 _display_txt_menu_lines
C:\Users\willem\AppData\Local\Temp\ccKPIB9j.s:345    P:00000263 _errorbeep
C:\Users\willem\AppData\Local\Temp\ccKPIB9j.s:364    P:0000027b _get_txt_menu_input
C:\Users\willem\AppData\Local\Temp\ccKPIB9j.s:550    P:000003a9 _ShowTextMenu
C:\Users\willem\AppData\Local\Temp\ccKPIB9j.s:715    P:000004f9 _txt_menu_sel_set_value
C:\Users\willem\AppData\Local\Temp\ccKPIB9j.s:797    P:0000057d _get_txt_menu_sel_input
C:\Users\willem\AppData\Local\Temp\ccKPIB9j.s:975    P:00000693 _display_txt_menu_sel_lines
C:\Users\willem\AppData\Local\Temp\ccKPIB9j.s:1284   P:0000090f _ShowTextSelectionMenu
C:\Users\willem\AppData\Local\Temp\ccKPIB9j.s:1438   P:00000a56 _InitGraphMenu
C:\Users\willem\AppData\Local\Temp\ccKPIB9j.s:1456   P:00000a6b _GraphIncLayer
C:\Users\willem\AppData\Local\Temp\ccKPIB9j.s:1510   P:00000aad _build_layer_string
C:\Users\willem\AppData\Local\Temp\ccKPIB9j.s:2802   B_1:00000064 _tmp.3727
C:\Users\willem\AppData\Local\Temp\ccKPIB9j.s:1624   P:00000b7f _display_layer
C:\Users\willem\AppData\Local\Temp\ccKPIB9j.s:1645   P:00000b8d _display_menu_item_text
C:\Users\willem\AppData\Local\Temp\ccKPIB9j.s:1690   P:00000beb _display_image
C:\Users\willem\AppData\Local\Temp\ccKPIB9j.s:1753   P:00000c49 _display_selection_bar
C:\Users\willem\AppData\Local\Temp\ccKPIB9j.s:1787   P:00000c82 _display_progress_bar
C:\Users\willem\AppData\Local\Temp\ccKPIB9j.s:1803   P:00000c90 _get_graph_menu_input
C:\Users\willem\AppData\Local\Temp\ccKPIB9j.s:2001   P:00000e21 _ShowGraphMenu
C:\Users\willem\AppData\Local\Temp\ccKPIB9j.s:2800   B_1:00000046 _layer_string.3782
C:\Users\willem\AppData\Local\Temp\ccKPIB9j.s:2277   P:000010ac _graph_menu_sel_set_value
C:\Users\willem\AppData\Local\Temp\ccKPIB9j.s:2369   P:0000115d _display_check_box
C:\Users\willem\AppData\Local\Temp\ccKPIB9j.s:2468   P:00001209 _get_graph_menu_sel_input
C:\Users\willem\AppData\Local\Temp\ccKPIB9j.s:2630   P:00001347 _ShowGraphSelectionMenu
C:\Users\willem\AppData\Local\Temp\ccKPIB9j.s:5      B_1:00000028 _layer_string.3829
                                C:00000000 .LC0
                                C:0000000a .LC1
                                C:00000014 .LC2
                                C:00000020 .LC3
                                C:00000030 .LC4
                                C:0000003c .LC5
                                C:00000044 .LC6
                                C:00000048 .LC7
                                C:00000059 .LC8
                                C:00000068 .LC9
                                C:0000006c .LC10
                                C:00000078 .LC11
                     .debug_frame:00000000 .Lframe0
                                P:00000000 .LFB0
                                P:0000002c .LFB1
                                P:00000058 .LFB2
                                P:00000103 .LFB3
                                P:00000263 .LFB4
                                P:0000027b .LFB5
                                P:000003a9 .LFB6
                                P:000004f9 .LFB7
                                P:0000057d .LFB8
                                P:00000693 .LFB9
                                P:0000090f .LFB10
                                P:00000a56 .LFB11
                                P:00000a6b .LFB12
                                P:00000aad .LFB13
                                P:00000b7f .LFB14
                                P:00000b8d .LFB15
                                P:00000beb .LFB16
                                P:00000c49 .LFB17
                                P:00000c82 .LFB18
                                P:00000c90 .LFB19
                                P:00000e21 .LFB20
                                P:000010ac .LFB21
                                P:0000115d .LFB22
                                P:00001209 .LFB23
                                P:00001347 .LFB24
                    .debug_abbrev:00000000 .Ldebug_abbrev0
                       .debug_str:00000649 .LASF177
                       .debug_str:00000483 .LASF178
                       .debug_str:000005e1 .LASF179
                                P:00000000 .Ltext0
                                P:000014c4 .Letext0
                      .debug_line:00000000 .Ldebug_line0
                       .debug_str:000002d1 .LASF0
                       .debug_str:00000141 .LASF1
                       .debug_str:000004d2 .LASF2
                       .debug_str:00000505 .LASF3
                       .debug_str:0000030a .LASF4
                       .debug_str:00000298 .LASF5
                       .debug_str:00000133 .LASF6
                       .debug_str:000000c9 .LASF7
                       .debug_str:00000492 .LASF9
                       .debug_str:0000018e .LASF8
                       .debug_str:000005d9 .LASF10
                       .debug_str:00000373 .LASF11
                       .debug_str:0000036d .LASF12
                       .debug_str:000002af .LASF13
                       .debug_str:000003db .LASF14
                       .debug_str:000005a8 .LASF15
                       .debug_str:000005b5 .LASF16
                       .debug_str:0000052d .LASF17
                       .debug_str:00000263 .LASF18
                       .debug_str:000006bc .LASF19
                       .debug_str:00000274 .LASF24
                       .debug_str:0000069b .LASF20
                       .debug_str:00000593 .LASF21
                       .debug_str:00000256 .LASF22
                       .debug_str:000006ff .LASF23
                       .debug_str:00000293 .LASF25
                       .debug_str:0000011c .LASF26
                       .debug_str:00000625 .LASF27
                       .debug_str:00000159 .LASF28
                       .debug_str:0000079f .LASF29
                       .debug_str:00000433 .LASF30
                       .debug_str:000003b9 .LASF31
                       .debug_str:00000704 .LASF32
                       .debug_str:0000050f .LASF33
                       .debug_str:0000074d .LASF34
                       .debug_str:00000168 .LASF35
                       .debug_str:0000023d .LASF36
                       .debug_str:00000000 .LASF37
                       .debug_str:000006ae .LASF38
                       .debug_str:0000019e .LASF39
                       .debug_str:0000043c .LASF40
                       .debug_str:00000566 .LASF41
                       .debug_str:00000245 .LASF42
                       .debug_str:00000519 .LASF43
                       .debug_str:00000153 .LASF44
                       .debug_str:00000025 .LASF45
                       .debug_str:00000538 .LASF46
                       .debug_str:00000197 .LASF47
                       .debug_str:000002ea .LASF48
                       .debug_str:000000e0 .LASF49
                       .debug_str:00000176 .LASF50
                       .debug_str:00000283 .LASF51
                       .debug_str:000003b2 .LASF52
                       .debug_str:000005bd .LASF53
                       .debug_str:00000767 .LASF54
                       .debug_str:0000014d .LASF55
                       .debug_str:00000731 .LASF56
                       .debug_str:000001ba .LASF57
                       .debug_str:00000201 .LASF58
                       .debug_str:00000078 .LASF59
                       .debug_str:00000388 .LASF60
                       .debug_str:00000540 .LASF61
                       .debug_str:00000393 .LASF62
                       .debug_str:0000059b .LASF63
                       .debug_str:00000614 .LASF64
                       .debug_str:000001a6 .LASF65
                       .debug_str:000002c1 .LASF66
                       .debug_str:0000026c .LASF67
                       .debug_str:00000561 .LASF68
                       .debug_str:00000047 .LASF69
                       .debug_str:000006d9 .LASF70
                       .debug_str:0000056b .LASF71
                       .debug_str:00000444 .LASF72
                       .debug_str:00000589 .LASF73
                       .debug_str:00000365 .LASF74
                       .debug_str:00000289 .LASF75
                       .debug_str:00000793 .LASF76
                       .debug_str:00000479 .LASF77
                       .debug_str:000002c9 .LASF78
                       .debug_str:000001f9 .LASF79
                       .debug_str:000004f7 .LASF80
                       .debug_str:00000336 .LASF81
                       .debug_str:00000727 .LASF82
                       .debug_str:0000017e .LASF83
                       .debug_str:00000163 .LASF84
                       .debug_str:0000061b .LASF85
                       .debug_str:00000526 .LASF86
                       .debug_str:0000070e .LASF87
                       .debug_str:00000303 .LASF88
                       .debug_str:00000520 .LASF89
                       .debug_str:0000003f .LASF90
                       .debug_str:000005a2 .LASF91
                       .debug_str:0000068c .LASF92
                       .debug_str:000006b7 .LASF93
                       .debug_str:000006f2 .LASF94
                       .debug_str:000006a1 .LASF95
                       .debug_str:0000034b .LASF96
                       .debug_str:00000758 .LASF97
                       .debug_str:0000044f .LASF98
                       .debug_str:00000549 .LASF99
                       .debug_str:0000076e .LASF100
                       .debug_str:00000554 .LASF101
                       .debug_str:00000785 .LASF102
                       .debug_str:0000010e .LASF103
                       .debug_str:0000071d .LASF104
                       .debug_str:0000033f .LASF105
                       .debug_str:000006c4 .LASF106
                       .debug_str:0000022f .LASF107
                       .debug_str:000000ff .LASF108
                       .debug_str:0000021e .LASF109
                       .debug_str:0000009d .LASF110
                       .debug_str:000000ac .LASF111
                       .debug_str:000004fc .LASF112
                       .debug_str:00000419 .LASF113
                       .debug_str:00000714 .LASF114
                       .debug_str:00000737 .LASF115
                       .debug_str:00000620 .LASF116
                       .debug_str:0000006f .LASF117
                       .debug_str:00000036 .LASF118
                       .debug_str:0000001f .LASF119
                       .debug_str:00000466 .LASF120
                       .debug_str:000006d1 .LASF121
                       .debug_str:000002b6 .LASF122
                       .debug_str:000004a4 .LASF125
                                P:0000002c .LFE0
                       .debug_loc:00000000 .LLST0
                       .debug_str:00000186 .LASF123
                       .debug_str:0000025c .LASF124
                       .debug_str:000003e4 .LASF126
                                P:00000058 .LFE1
                       .debug_loc:00000038 .LLST1
                       .debug_str:0000000c .LASF132
                                P:00000103 .LFE2
                       .debug_loc:00000070 .LLST2
                       .debug_str:000007c0 .LASF127
                       .debug_str:000001dc .LASF128
                       .debug_str:0000038e .LASF129
                       .debug_str:000000f6 .LASF130
                       .debug_str:00000660 .LASF131
                       .debug_str:0000007e .LASF133
                                P:00000263 .LFE3
                       .debug_loc:000000a9 .LLST3
                       .debug_str:0000046f .LASF134
                       .debug_str:00000358 .LASF135
                       .debug_str:000002e3 .LASF136
                       .debug_str:000005b0 .LASF137
                       .debug_str:000006eb .LASF138
                       .debug_str:00000408 .LASF139
                       .debug_str:0000037a .LASF140
                       .debug_str:000005c3 .LASF158
                                P:0000027b .LFE4
                       .debug_loc:000000e3 .LLST4
                       .debug_str:000002f0 .LASF141
                                P:000003a9 .LFE5
                       .debug_loc:0000010f .LLST5
                       .debug_str:00000420 .LASF142
                       .debug_str:000000e9 .LASF148
                                P:000004f9 .LFE6
                       .debug_loc:00000147 .LLST6
                       .debug_str:000007a9 .LASF143
                                P:0000057d .LFE7
                       .debug_loc:0000017f .LLST7
                       .debug_str:000003c3 .LASF144
                       .debug_str:00000798 .LASF145
                       .debug_str:000003f1 .LASF146
                                P:00000693 .LFE8
                       .debug_loc:000001b7 .LLST8
                       .debug_str:0000062e .LASF147
                                P:0000090f .LFE9
                       .debug_loc:000001ef .LLST9
                       .debug_str:00000059 .LASF149
                                P:00000a56 .LFE10
                       .debug_loc:00000229 .LLST10
                       .debug_str:00000125 .LASF180
                                P:00000a6b .LFE11
                       .debug_loc:00000262 .LLST11
                       .debug_str:00000668 .LASF181
                                P:00000aad .LFE12
                       .debug_loc:0000028e .LLST12
                       .debug_str:00000095 .LASF150
                       .debug_str:000001e6 .LASF151
                                P:00000b7f .LFE13
                       .debug_loc:000002c6 .LLST13
                       .debug_str:00000052 .LASF152
                       .debug_str:00000425 .LASF153
                                P:00000b8d .LFE14
                       .debug_loc:000002fe .LLST14
                       .debug_str:0000045e .LASF154
                       .debug_str:0000039b .LASF155
                                P:00000beb .LFE15
                       .debug_loc:00000336 .LLST15
                       .debug_str:0000024a .LASF156
                       .debug_str:0000057b .LASF157
                                P:00000c49 .LFE16
                       .debug_loc:0000036e .LLST16
                       .debug_str:00000676 .LASF159
                                P:00000c82 .LFE17
                       .debug_loc:000003b2 .LLST17
                       .debug_str:00000209 .LASF160
                                P:00000c90 .LFE18
                       .debug_loc:000003de .LLST18
                       .debug_str:00000250 .LASF161
                       .debug_str:000004bd .LASF162
                                P:00000e21 .LFE19
                       .debug_loc:00000416 .LLST19
                       .debug_str:0000002b .LASF163
                       .debug_str:0000073f .LASF164
                                P:000010ac .LFE20
                       .debug_loc:0000044e .LLST20
                       .debug_str:000001ad .LASF165
                       .debug_str:000001c3 .LASF166
                                P:0000115d .LFE21
                       .debug_loc:00000486 .LLST21
                       .debug_str:00000773 .LASF167
                                P:00001209 .LFE22
                       .debug_loc:000004be .LLST22
                       .debug_str:0000027c .LASF168
                       .debug_str:0000031d .LASF169
                                P:00001347 .LFE23
                       .debug_loc:000004f6 .LLST23
                       .debug_str:000004e0 .LASF170
                                P:000014c4 .LFE24
                       .debug_loc:0000052e .LLST24
                       .debug_str:000000bd .LASF171
                       .debug_str:000005cd .LASF172
                       .debug_str:000003d0 .LASF173
                       .debug_str:000002a5 .LASF174
                       .debug_str:00000692 .LASF175
                       .debug_str:000004b4 .LASF176
                      .debug_info:00000000 .Ldebug_info0

UNDEFINED SYMBOLS
_getfontsize
_gotoxy
_printf
_sound
_WaitForKey
_cursor
__impure_ptr
___swbuf_r
_memset
_strlen
_sprintf
_strrchr
__vga_15_32
_setfont
__exit_pic
_ShowJPG
__checked
__uncheck
_putchar
_resetkey
